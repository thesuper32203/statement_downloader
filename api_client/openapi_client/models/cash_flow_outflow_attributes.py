# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.obb_date_range_and_amount import ObbDateRangeAndAmount
from openapi_client.models.obb_date_range_and_count import ObbDateRangeAndCount
from typing import Optional, Set
from typing_extensions import Self

class CashFlowOutflowAttributes(BaseModel):
    """
    Outflow attributes
    """ # noqa: E501
    average_withdrawal_by_month_for_the_report_time_period: Optional[List[ObbDateRangeAndAmount]] = Field(default=None, description="Average value of withdrawals during periods in the report", alias="averageWithdrawalByMonthForTheReportTimePeriod")
    count_withdrawals_by_month_for_the_report_time_period: List[ObbDateRangeAndCount] = Field(description="Count of all withdrawals during periods in the report", alias="countWithdrawalsByMonthForTheReportTimePeriod")
    historic_count_of_withdrawal_transactions: StrictInt = Field(description="Count of ALL withdrawals over entire known history of the account (may exceed requested length of report)", alias="historicCountOfWithdrawalTransactions")
    historic_sum_of_withdrawals: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sum of ALL withdrawals over entire known history of the account (may exceed requested length of report)", alias="historicSumOfWithdrawals")
    maximum_withdrawal_by_month_for_the_report_time_period: List[ObbDateRangeAndAmount] = Field(description="Maximum withdrawal value for different periods in the report", alias="maximumWithdrawalByMonthForTheReportTimePeriod")
    minimum_withdrawal_by_month_for_the_report_time_period: List[ObbDateRangeAndAmount] = Field(description="Minimum withdrawal value for different periods in the report", alias="minimumWithdrawalByMonthForTheReportTimePeriod")
    sum_withdrawals_by_month_for_the_report_time_period: List[ObbDateRangeAndAmount] = Field(description="Sum of all withdrawals during periods in the report", alias="sumWithdrawalsByMonthForTheReportTimePeriod")
    __properties: ClassVar[List[str]] = ["averageWithdrawalByMonthForTheReportTimePeriod", "countWithdrawalsByMonthForTheReportTimePeriod", "historicCountOfWithdrawalTransactions", "historicSumOfWithdrawals", "maximumWithdrawalByMonthForTheReportTimePeriod", "minimumWithdrawalByMonthForTheReportTimePeriod", "sumWithdrawalsByMonthForTheReportTimePeriod"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CashFlowOutflowAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in average_withdrawal_by_month_for_the_report_time_period (list)
        _items = []
        if self.average_withdrawal_by_month_for_the_report_time_period:
            for _item_average_withdrawal_by_month_for_the_report_time_period in self.average_withdrawal_by_month_for_the_report_time_period:
                if _item_average_withdrawal_by_month_for_the_report_time_period:
                    _items.append(_item_average_withdrawal_by_month_for_the_report_time_period.to_dict())
            _dict['averageWithdrawalByMonthForTheReportTimePeriod'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in count_withdrawals_by_month_for_the_report_time_period (list)
        _items = []
        if self.count_withdrawals_by_month_for_the_report_time_period:
            for _item_count_withdrawals_by_month_for_the_report_time_period in self.count_withdrawals_by_month_for_the_report_time_period:
                if _item_count_withdrawals_by_month_for_the_report_time_period:
                    _items.append(_item_count_withdrawals_by_month_for_the_report_time_period.to_dict())
            _dict['countWithdrawalsByMonthForTheReportTimePeriod'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in maximum_withdrawal_by_month_for_the_report_time_period (list)
        _items = []
        if self.maximum_withdrawal_by_month_for_the_report_time_period:
            for _item_maximum_withdrawal_by_month_for_the_report_time_period in self.maximum_withdrawal_by_month_for_the_report_time_period:
                if _item_maximum_withdrawal_by_month_for_the_report_time_period:
                    _items.append(_item_maximum_withdrawal_by_month_for_the_report_time_period.to_dict())
            _dict['maximumWithdrawalByMonthForTheReportTimePeriod'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in minimum_withdrawal_by_month_for_the_report_time_period (list)
        _items = []
        if self.minimum_withdrawal_by_month_for_the_report_time_period:
            for _item_minimum_withdrawal_by_month_for_the_report_time_period in self.minimum_withdrawal_by_month_for_the_report_time_period:
                if _item_minimum_withdrawal_by_month_for_the_report_time_period:
                    _items.append(_item_minimum_withdrawal_by_month_for_the_report_time_period.to_dict())
            _dict['minimumWithdrawalByMonthForTheReportTimePeriod'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sum_withdrawals_by_month_for_the_report_time_period (list)
        _items = []
        if self.sum_withdrawals_by_month_for_the_report_time_period:
            for _item_sum_withdrawals_by_month_for_the_report_time_period in self.sum_withdrawals_by_month_for_the_report_time_period:
                if _item_sum_withdrawals_by_month_for_the_report_time_period:
                    _items.append(_item_sum_withdrawals_by_month_for_the_report_time_period.to_dict())
            _dict['sumWithdrawalsByMonthForTheReportTimePeriod'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CashFlowOutflowAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "averageWithdrawalByMonthForTheReportTimePeriod": [ObbDateRangeAndAmount.from_dict(_item) for _item in obj["averageWithdrawalByMonthForTheReportTimePeriod"]] if obj.get("averageWithdrawalByMonthForTheReportTimePeriod") is not None else None,
            "countWithdrawalsByMonthForTheReportTimePeriod": [ObbDateRangeAndCount.from_dict(_item) for _item in obj["countWithdrawalsByMonthForTheReportTimePeriod"]] if obj.get("countWithdrawalsByMonthForTheReportTimePeriod") is not None else None,
            "historicCountOfWithdrawalTransactions": obj.get("historicCountOfWithdrawalTransactions"),
            "historicSumOfWithdrawals": obj.get("historicSumOfWithdrawals"),
            "maximumWithdrawalByMonthForTheReportTimePeriod": [ObbDateRangeAndAmount.from_dict(_item) for _item in obj["maximumWithdrawalByMonthForTheReportTimePeriod"]] if obj.get("maximumWithdrawalByMonthForTheReportTimePeriod") is not None else None,
            "minimumWithdrawalByMonthForTheReportTimePeriod": [ObbDateRangeAndAmount.from_dict(_item) for _item in obj["minimumWithdrawalByMonthForTheReportTimePeriod"]] if obj.get("minimumWithdrawalByMonthForTheReportTimePeriod") is not None else None,
            "sumWithdrawalsByMonthForTheReportTimePeriod": [ObbDateRangeAndAmount.from_dict(_item) for _item in obj["sumWithdrawalsByMonthForTheReportTimePeriod"]] if obj.get("sumWithdrawalsByMonthForTheReportTimePeriod") is not None else None
        })
        return _obj


