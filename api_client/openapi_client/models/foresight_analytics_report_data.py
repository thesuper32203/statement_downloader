# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.foresight_analytics_report_data_segments import ForesightAnalyticsReportDataSegments
from typing import Optional, Set
from typing_extensions import Self

class ForesightAnalyticsReportData(BaseModel):
    """
    Parameters supplied by the client requesting the analytics.
    """ # noqa: E501
    for_cra_purpose: StrictBool = Field(description="Field to indicate if the requested report is for CRA or NONCRA. For small business lending or other similar business use cases, pass the value as “true” for purposes of this field.", alias="forCraPurpose")
    segments: Optional[ForesightAnalyticsReportDataSegments] = None
    analytics: Optional[Annotated[List[StrictStr], Field(max_length=2)]] = Field(default=None, description="Analytics information for the requested report. The allowed values are benchmarking & forecasting. If it is null, default to benchmarking and forecasting")
    time_interval_types: Optional[Annotated[List[StrictStr], Field(max_length=2)]] = Field(default=None, description="Requested time interval for attribute values.", alias="timeIntervalTypes")
    __properties: ClassVar[List[str]] = ["forCraPurpose", "segments", "analytics", "timeIntervalTypes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ForesightAnalyticsReportData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of segments
        if self.segments:
            _dict['segments'] = self.segments.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ForesightAnalyticsReportData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "forCraPurpose": obj.get("forCraPurpose"),
            "segments": ForesightAnalyticsReportDataSegments.from_dict(obj["segments"]) if obj.get("segments") is not None else None,
            "analytics": obj.get("analytics"),
            "timeIntervalTypes": obj.get("timeIntervalTypes")
        })
        return _obj


