# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.cash_flow_monthly_cash_flow_characteristics import CashFlowMonthlyCashFlowCharacteristics
from typing import Optional, Set
from typing_extensions import Self

class CashFlowCashFlowCharacteristic(BaseModel):
    """
    CashFlowCashFlowCharacteristic
    """ # noqa: E501
    monthly_cash_flow_characteristics: List[CashFlowMonthlyCashFlowCharacteristics] = Field(description="List of attributes for each month", alias="monthlyCashFlowCharacteristics")
    average_monthly_net: Union[StrictFloat, StrictInt] = Field(description="Average (Total Credits - Total Debits) for the account", alias="averageMonthlyNet")
    average_monthly_net_less_transfers: Union[StrictFloat, StrictInt] = Field(description="Average (Total Credits - Total Debits) without transfers for the account", alias="averageMonthlyNetLessTransfers")
    twelve_month_total_net: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sum of all monthly (Total Credits - Total Debits) each month for the account", alias="twelveMonthTotalNet")
    twelve_month_total_net_less_transfers: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sum of all monthly (Total Credits - Total Debits) without transfers for the account", alias="twelveMonthTotalNetLessTransfers")
    six_month_average_total_credits_less_total_debits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="6 Month Average (Total Credits - Total Debits)", alias="sixMonthAverageTotalCreditsLessTotalDebits")
    six_month_average_total_credits_less_total_debits_less_transfers: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="6 Month Average (Total Credits - Total Debits) - (Without Transfers)", alias="sixMonthAverageTotalCreditsLessTotalDebitsLessTransfers")
    two_month_average_total_credits_less_total_debits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="2 Month Average (Total Credits - Total Debits)", alias="twoMonthAverageTotalCreditsLessTotalDebits")
    two_month_average_total_credits_less_total_debits_less_transfers: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="2 Month Average (Total Credits - Total Debits) - (Without Transfers)", alias="twoMonthAverageTotalCreditsLessTotalDebitsLessTransfers")
    __properties: ClassVar[List[str]] = ["monthlyCashFlowCharacteristics", "averageMonthlyNet", "averageMonthlyNetLessTransfers", "twelveMonthTotalNet", "twelveMonthTotalNetLessTransfers", "sixMonthAverageTotalCreditsLessTotalDebits", "sixMonthAverageTotalCreditsLessTotalDebitsLessTransfers", "twoMonthAverageTotalCreditsLessTotalDebits", "twoMonthAverageTotalCreditsLessTotalDebitsLessTransfers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CashFlowCashFlowCharacteristic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in monthly_cash_flow_characteristics (list)
        _items = []
        if self.monthly_cash_flow_characteristics:
            for _item_monthly_cash_flow_characteristics in self.monthly_cash_flow_characteristics:
                if _item_monthly_cash_flow_characteristics:
                    _items.append(_item_monthly_cash_flow_characteristics.to_dict())
            _dict['monthlyCashFlowCharacteristics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CashFlowCashFlowCharacteristic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "monthlyCashFlowCharacteristics": [CashFlowMonthlyCashFlowCharacteristics.from_dict(_item) for _item in obj["monthlyCashFlowCharacteristics"]] if obj.get("monthlyCashFlowCharacteristics") is not None else None,
            "averageMonthlyNet": obj.get("averageMonthlyNet"),
            "averageMonthlyNetLessTransfers": obj.get("averageMonthlyNetLessTransfers"),
            "twelveMonthTotalNet": obj.get("twelveMonthTotalNet"),
            "twelveMonthTotalNetLessTransfers": obj.get("twelveMonthTotalNetLessTransfers"),
            "sixMonthAverageTotalCreditsLessTotalDebits": obj.get("sixMonthAverageTotalCreditsLessTotalDebits"),
            "sixMonthAverageTotalCreditsLessTotalDebitsLessTransfers": obj.get("sixMonthAverageTotalCreditsLessTotalDebitsLessTransfers"),
            "twoMonthAverageTotalCreditsLessTotalDebits": obj.get("twoMonthAverageTotalCreditsLessTotalDebits"),
            "twoMonthAverageTotalCreditsLessTotalDebitsLessTransfers": obj.get("twoMonthAverageTotalCreditsLessTotalDebitsLessTransfers")
        })
        return _obj


