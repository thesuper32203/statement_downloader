# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CustomerAccountPosition(BaseModel):
    """
    Details for investment account holdings
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="The ID of the investment position")
    description: Optional[StrictStr] = Field(default=None, description="The description of the holding")
    symbol: Optional[StrictStr] = Field(default=None, description="The investment position's market ticker symbol")
    units: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of units of the holding")
    current_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The current price of the investment holding", alias="currentPrice")
    security_name: Optional[StrictStr] = Field(default=None, description="The security name for the investment holding", alias="securityName")
    transaction_type: Optional[StrictStr] = Field(default=None, description="The transaction type of the holding, such as cash, margin, and more", alias="transactionType")
    market_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Market value of an investment position at the time of retrieval", alias="marketValue")
    change_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percent change in value since the previous day", alias="changePercent")
    daily_change: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The value amount change since the previous day", alias="dailyChange")
    cost_basis: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total cost of acquiring the security", alias="costBasis")
    hold_type: Optional[StrictStr] = Field(default=None, description="The type of the holding", alias="holdType")
    inv_security_type: Optional[StrictStr] = Field(default=None, description="The security type for the investment holding", alias="invSecurityType")
    status: Optional[StrictStr] = Field(default=None, description="The status of the holding")
    current_price_date: Optional[StrictInt] = Field(default=None, description="A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="currentPriceDate")
    security_type: Optional[StrictStr] = Field(default=None, description="Type of security for the investment position", alias="securityType")
    mf_type: Optional[StrictStr] = Field(default=None, description="Type of mutual fund, such as open ended", alias="mfType")
    pos_type: Optional[StrictStr] = Field(default=None, description="Fund type assigned by the FI (long or short)", alias="posType")
    total_gl_dollar: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total gain and loss of the position at the time of aggregation in dollars", alias="totalGLDollar")
    total_gl_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total gain and loss of the position at the time of aggregation in percentage", alias="totalGLPercent")
    option_strike_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The strike price of the option contract", alias="optionStrikePrice")
    option_type: Optional[StrictStr] = Field(default=None, description="The type of option contract (PUT or CALL)", alias="optionType")
    option_shares_per_contract: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of shares per option contract", alias="optionSharesPerContract")
    option_expire_date: Optional[date] = Field(default=None, description="Expiration date of option", alias="optionExpireDate")
    fi_asset_class: Optional[StrictStr] = Field(default=None, description="Financial Institution (FI) defined asset class (COMMON STOCK, COMNEQTY, EQUITY/STOCK, CMA-ISA, CONVERTIBLE PREFERREDS, CORPORATE BONDS, OTHER MONEY FUNDS, ALLOCATION FUNDS, CMA-TAXABLE, FOREIGNEQUITYADRS, COMMONSTOCK, PREFERRED STOCKS, STABLE VALUE, FOREIGN EQUITY ADRS)", alias="fiAssetClass")
    asset_class: Optional[StrictStr] = Field(default=None, description="An asset class is a grouping of comparable financial securities. These include equities (stocks), fixed income (bonds), and cash equivalent or money market instruments. (DOMESTICBOND, LARGESTOCK, INTLSTOCK, MONEYMRKT, OTHER)", alias="assetClass")
    currency_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Currency rate, ratio of currency to original currency", alias="currencyRate")
    security_id: Optional[StrictStr] = Field(default=None, description="The security ID of the transaction", alias="securityId")
    security_id_type: Optional[StrictStr] = Field(default=None, description="The security type. This field is related to the `securityId` field. Possible values: * \"CUSIP\"  * \"ISIN\"  * \"SEDOL\"  * \"SICC\"  * \"VALOR\"  * \"WKN\"", alias="securityIdType")
    cost_basis_per_share: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The per share cost of acquiring the security", alias="costBasisPerShare")
    sub_account_type: Optional[StrictStr] = Field(default=None, description="The subaccount's type, such as cash", alias="subAccountType")
    security_currency: Optional[StrictStr] = Field(default=None, description="Symbol for the currency that the account is being converted into", alias="securityCurrency")
    today_gl_dollar: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The current day's gain and loss of the position at the time of aggregation in dollars", alias="todayGLDollar")
    today_gl_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The current day's gain and loss of the position at the time of aggregation in percentage", alias="todayGLPercent")
    __properties: ClassVar[List[str]] = ["id", "description", "symbol", "units", "currentPrice", "securityName", "transactionType", "marketValue", "changePercent", "dailyChange", "costBasis", "holdType", "invSecurityType", "status", "currentPriceDate", "securityType", "mfType", "posType", "totalGLDollar", "totalGLPercent", "optionStrikePrice", "optionType", "optionSharesPerContract", "optionExpireDate", "fiAssetClass", "assetClass", "currencyRate", "securityId", "securityIdType", "costBasisPerShare", "subAccountType", "securityCurrency", "todayGLDollar", "todayGLPercent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerAccountPosition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerAccountPosition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "description": obj.get("description"),
            "symbol": obj.get("symbol"),
            "units": obj.get("units"),
            "currentPrice": obj.get("currentPrice"),
            "securityName": obj.get("securityName"),
            "transactionType": obj.get("transactionType"),
            "marketValue": obj.get("marketValue"),
            "changePercent": obj.get("changePercent"),
            "dailyChange": obj.get("dailyChange"),
            "costBasis": obj.get("costBasis"),
            "holdType": obj.get("holdType"),
            "invSecurityType": obj.get("invSecurityType"),
            "status": obj.get("status"),
            "currentPriceDate": obj.get("currentPriceDate"),
            "securityType": obj.get("securityType"),
            "mfType": obj.get("mfType"),
            "posType": obj.get("posType"),
            "totalGLDollar": obj.get("totalGLDollar"),
            "totalGLPercent": obj.get("totalGLPercent"),
            "optionStrikePrice": obj.get("optionStrikePrice"),
            "optionType": obj.get("optionType"),
            "optionSharesPerContract": obj.get("optionSharesPerContract"),
            "optionExpireDate": obj.get("optionExpireDate"),
            "fiAssetClass": obj.get("fiAssetClass"),
            "assetClass": obj.get("assetClass"),
            "currencyRate": obj.get("currencyRate"),
            "securityId": obj.get("securityId"),
            "securityIdType": obj.get("securityIdType"),
            "costBasisPerShare": obj.get("costBasisPerShare"),
            "subAccountType": obj.get("subAccountType"),
            "securityCurrency": obj.get("securityCurrency"),
            "todayGLDollar": obj.get("todayGLDollar"),
            "todayGLPercent": obj.get("todayGLPercent")
        })
        return _obj


