# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.payroll_data import PayrollData
from openapi_client.models.report_custom_field import ReportCustomField
from typing import Optional, Set
from typing_extensions import Self

class PayrollReportConstraints(BaseModel):
    """
    PayrollReportConstraints
    """ # noqa: E501
    payroll_data: PayrollData = Field(alias="payrollData")
    report_custom_fields: Optional[List[ReportCustomField]] = Field(default=None, description="The `reportCustomFields` parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you'd like associated with the report when it's generated. Every custom field consists of three variables: `label`, `value`, and `shown`. The `shown` variable is \"true\" or \"false\". * \"true\": (default) display the custom field in the PDF report * \"false\": don't display the custom field in the PDF report  For an experience that generates multiple reports, the `reportCustomFields` parameter gets passed to all reports.  All custom fields display in the Reseller Billing API.", alias="reportCustomFields")
    pay_statements_from_date: Optional[StrictInt] = Field(default=None, description="Limits the pay statement history in the VOIE - Payroll report income record. Pay statements are only included if the payDate of the statement is equal to or greater than the start date requested. Date should be in Unix epoch time (in seconds). See: Handling Epoch Dates and Times.", alias="payStatementsFromDate")
    market_segment: Optional[StrictStr] = Field(default=None, description="Use case for requesting the consumer's data. Current supported enumerations are:  <br> * `Auto`  <br> * `Background`  <br> * `Credit Card` <br> * `Employment`  <br> * `Government`  <br> * `Identity`  <br> * `KYC` <br> * `Mortgage`  <br> * `Personal`  <br> * `Tenant`  <br> If your usecase doesn't match one of these please reach out to your technical point of contact.", alias="marketSegment")
    exclude_emp_info: Optional[StrictBool] = Field(default=None, description="Only used on an exception basis for clients that need to exclude EmpInfo data from the VOE-Payroll or VOIE-Payroll report. If true is passed EmpInfo payroll provider's data will not be searched or returned.", alias="excludeEmpInfo")
    purpose: Optional[StrictStr] = Field(default=None, description="FCRA required 2-digit Permissible Purpose Code, specifying the reason for retrieving this report.")
    __properties: ClassVar[List[str]] = ["payrollData", "reportCustomFields", "payStatementsFromDate", "marketSegment", "excludeEmpInfo", "purpose"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayrollReportConstraints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payroll_data
        if self.payroll_data:
            _dict['payrollData'] = self.payroll_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in report_custom_fields (list)
        _items = []
        if self.report_custom_fields:
            for _item_report_custom_fields in self.report_custom_fields:
                if _item_report_custom_fields:
                    _items.append(_item_report_custom_fields.to_dict())
            _dict['reportCustomFields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayrollReportConstraints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payrollData": PayrollData.from_dict(obj["payrollData"]) if obj.get("payrollData") is not None else None,
            "reportCustomFields": [ReportCustomField.from_dict(_item) for _item in obj["reportCustomFields"]] if obj.get("reportCustomFields") is not None else None,
            "payStatementsFromDate": obj.get("payStatementsFromDate"),
            "marketSegment": obj.get("marketSegment"),
            "excludeEmpInfo": obj.get("excludeEmpInfo"),
            "purpose": obj.get("purpose")
        })
        return _obj


