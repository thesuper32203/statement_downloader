# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.third_party_access_product import ThirdPartyAccessProduct
from openapi_client.models.third_party_access_provenance import ThirdPartyAccessProvenance
from typing import Optional, Set
from typing_extensions import Self

class ThirdPartyAccessReceipt(BaseModel):
    """
    An object representing consent receipt
    """ # noqa: E501
    profile: Optional[StrictInt] = Field(default=None, description="Representation of the type of consent receipt")
    version: Optional[StrictStr] = Field(default=None, description="A schema version of receipt")
    receipt_id: Optional[StrictStr] = Field(default=None, description="This is officially the Consent Receipt ID, but is aliased as the Access Key ID. This is a unique identifier managed by Finicity that points to the contents of this JSON document.", alias="receiptId")
    customer_id: Optional[StrictStr] = Field(default=None, description="This is recipient's customerId represented as a pseudo identifier", alias="customerId")
    partner_id: Optional[StrictStr] = Field(default=None, description="Your Partner ID displayed in the [Developer Dashboard](https://developer.mastercard.com/account/log-in)", alias="partnerId")
    products: Optional[List[ThirdPartyAccessProduct]] = None
    provenance: Optional[ThirdPartyAccessProvenance] = None
    timestamp: Optional[datetime] = Field(default=None, description="A date-time with time zone")
    __properties: ClassVar[List[str]] = ["profile", "version", "receiptId", "customerId", "partnerId", "products", "provenance", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ThirdPartyAccessReceipt from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item_products in self.products:
                if _item_products:
                    _items.append(_item_products.to_dict())
            _dict['products'] = _items
        # override the default output from pydantic by calling `to_dict()` of provenance
        if self.provenance:
            _dict['provenance'] = self.provenance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ThirdPartyAccessReceipt from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "profile": obj.get("profile"),
            "version": obj.get("version"),
            "receiptId": obj.get("receiptId"),
            "customerId": obj.get("customerId"),
            "partnerId": obj.get("partnerId"),
            "products": [ThirdPartyAccessProduct.from_dict(_item) for _item in obj["products"]] if obj.get("products") is not None else None,
            "provenance": ThirdPartyAccessProvenance.from_dict(obj["provenance"]) if obj.get("provenance") is not None else None,
            "timestamp": obj.get("timestamp")
        })
        return _obj


