# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AccountSimpleDetails(BaseModel):
    """
    AccountSimpleDetails
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="An account ID")
    account_number_display: StrictStr = Field(description="The account number from a financial institution in truncated format:    * Last four digits: \"1234\"    * Last four digits with suffix: \"1234-9\"    * Full value for string accounts: \"john@gmail.com\" example: '1234-9'", alias="accountNumberDisplay")
    name: StrictStr = Field(description="The account name from the institution")
    type: StrictStr = Field(description="The list of supported account types. * \"checking\": Standard checking * \"savings\": Standard savings * \"cd\": Certificates of deposit * \"moneyMarket\": Money Market * \"creditCard\": Standard credit cards * \"lineOfCredit\": Home equity, line of credit * \"investment\": Generic investment (no details) * \"investmentTaxDeferred\": Generic tax-advantaged investment (no details) * \"employeeStockPurchasePlan\": ESPP, Employee Stock Ownership Plans (ESOP), Stock Purchase Plans * \"ira\": Individual Retirement Account (not Rollover or Roth) * \"401k\": 401K Plan * \"roth\": Roth IRA, Roth 401K * \"403b\": 403B Plan * \"529plan\": 529 Plan (True value is 529) * \"rollover\": Rollover IRA * \"ugma\": Uniform Gifts to Minors Act * \"utma\": Uniform Transfers to Minors Act * \"keogh\": Keogh Plan * \"457plan\": 457 Plan (True value is 457) * \"401a\": 401A Plan * \"brokerageAccount\": Brokerage Account * \"educationSavings\": Education Savings Account that is not a 529 * \"healthSavingsAccount\": HSA (Health Savings Accounts) * \"pension\": Pension * \"profitSharingPlan\": Profit Sharing Plan * \"roth401k\": Roth 401K * \"sepIRA\": Simplified Employee Pension IRA * \"simpleIRA\": Simple IRA * \"thriftSavingsPlan\": Thrift Savings Plan * \"variableAnnuity\": Variable Annuity * \"cryptocurrency\": Cryptocurrency Wallet, Cryptocurrency Account * \"mortgage\": Standard Mortgages * \"loan\": Auto loans, equity loans, other loans * \"studentLoan\": Student Loan * \"studentLoanGroup\": Student Loan Group * \"studentLoanAccount\": Student Loan Account")
    aggregation_status_code: Optional[StrictInt] = Field(default=None, description="The status of the most recent aggregation attempt (see [Aggregation Status Codes](https://developer.mastercard.com/open-banking-us/documentation/products/manage/account-aggregation/#aggregation-status-codes)). Won't be present until you have run your first aggregation for the account.", alias="aggregationStatusCode")
    status: StrictStr = Field(description="\"pending\" during account discovery, always \"active\" following   successful account activation")
    aggregation_success_date: Optional[datetime] = Field(default=None, description="A date-time with time zone", alias="aggregationSuccessDate")
    aggregation_attempt_date: Optional[datetime] = Field(default=None, description="A date-time with time zone", alias="aggregationAttemptDate")
    created_date: datetime = Field(description="A date-time with time zone", alias="createdDate")
    currency: StrictStr = Field(description="A currency code")
    display_position: StrictInt = Field(description="Display position of the account at the financial institution, \"1\"     being the top listed account", alias="displayPosition")
    parent_account: Optional[StrictStr] = Field(default=None, description="An account ID", alias="parentAccount")
    __properties: ClassVar[List[str]] = ["id", "accountNumberDisplay", "name", "type", "aggregationStatusCode", "status", "aggregationSuccessDate", "aggregationAttemptDate", "createdDate", "currency", "displayPosition", "parentAccount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountSimpleDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountSimpleDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "accountNumberDisplay": obj.get("accountNumberDisplay"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "aggregationStatusCode": obj.get("aggregationStatusCode"),
            "status": obj.get("status"),
            "aggregationSuccessDate": obj.get("aggregationSuccessDate"),
            "aggregationAttemptDate": obj.get("aggregationAttemptDate"),
            "createdDate": obj.get("createdDate"),
            "currency": obj.get("currency"),
            "displayPosition": obj.get("displayPosition"),
            "parentAccount": obj.get("parentAccount")
        })
        return _obj


