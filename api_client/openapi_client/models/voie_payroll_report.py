# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.base_report_ack_constraints import BaseReportAckConstraints
from openapi_client.models.consumer_details import ConsumerDetails
from openapi_client.models.consumer_end_user import ConsumerEndUser
from openapi_client.models.error_message import ErrorMessage
from openapi_client.models.payroll_employment_history_voie import PayrollEmploymentHistoryVOIE
from typing import Optional, Set
from typing_extensions import Self

class VOIEPayrollReport(BaseModel):
    """
    A VOIE Payroll report
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A report ID")
    customer_type: Optional[StrictStr] = Field(default=None, description="The type of customer (\"active\" or \"testing\" or \"\" for all types)", alias="customerType")
    customer_id: Optional[StrictInt] = Field(default=None, description="A customer ID represented as a number. See Add Customer API for how to create a customer ID.", alias="customerId")
    request_id: Optional[StrictStr] = Field(default=None, description="Finicity indicator to track all activity associated with this report", alias="requestId")
    requester_name: Optional[StrictStr] = Field(default=None, description="Name of a Finicity partner", alias="requesterName")
    end_user: Optional[ConsumerEndUser] = Field(default=None, alias="endUser")
    created_date: Optional[StrictInt] = Field(default=None, description="A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/). Note: If the report is retrieved on a day other than the day it was generated, on the header of the PDF version of the report there will be a \"Retrieved Date\" populated.", alias="createdDate")
    title: Optional[StrictStr] = Field(default=None, description="Title of the report")
    consumer_id: Optional[StrictStr] = Field(default=None, description="A consumer ID. See Create Consumer API for how to create a consumer ID.", alias="consumerId")
    consumer_ssn: Optional[StrictStr] = Field(default=None, description="Last 4 digits of a SSN", alias="consumerSsn")
    consumer_details: Optional[ConsumerDetails] = Field(default=None, alias="consumerDetails")
    dispute_statement: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]] = Field(default=None, description="The dispute text", alias="disputeStatement")
    type: Optional[StrictStr] = Field(default=None, description="A report type. Possible values:  * `voi`  * `voa`  * `voaHistory`  * `history`  * `voieTxVerify`  * `voieWithReport`  * `voieWithInterview`  * `voieWithStatement`  * `paystatement`  * `preQualVoa`  * `assetSummary`  * `voie`  * `transactions`  * `statement`  * `voiePayroll`  * `voeTransactions`  * `farpbfnoncra`  * `voePayroll`  * `cfrp`  * `cfrb`  * `barpcra`  * `barpnoncra`  * `barbcra`  * `barbftc`  * `barbnoncra`  * `cfrpcra`  * `cfrpnoncra`  * `cracfrbcra`  * `cfrbnoncra`  * `cfrbftc`  * `phrbcra`  * `phrbnoncra`  * `phrbftc` ")
    status: Optional[StrictStr] = Field(default=None, description="A report generation status. Possible values:  * `inProgress`  * `success`  * `failure` ")
    constraints: Optional[BaseReportAckConstraints] = None
    errors: Optional[List[ErrorMessage]] = Field(default=None, description="In case errors occurred during the report generation")
    portfolio_id: Optional[StrictStr] = Field(default=None, description="A unique identifier that will be consistent across all reports created for the same customer", alias="portfolioId")
    employment_history: Optional[List[PayrollEmploymentHistoryVOIE]] = Field(default=None, description="An array of employment histories, one for each of the consumer's verified employers", alias="employmentHistory")
    gse_enabled: Optional[StrictBool] = Field(default=None, description="Mastercard Open Finance internal use only to flag reports that should not be retrieved by the GSE's (Government-Sponsored Enterprise).  This is a mandatory field for VOE-payroll and VOIE-payroll report types.", alias="gseEnabled")
    report_style: Optional[StrictStr] = Field(default=None, description="A report style. Possible values are directAPIPayroll, credentialedPayroll, paystatement, voieWithInterview, voieWithStatement, voieWithReport", alias="reportStyle")
    __properties: ClassVar[List[str]] = ["id", "customerType", "customerId", "requestId", "requesterName", "endUser", "createdDate", "title", "consumerId", "consumerSsn", "consumerDetails", "disputeStatement", "type", "status", "constraints", "errors", "portfolioId", "employmentHistory", "gseEnabled", "reportStyle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VOIEPayrollReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of end_user
        if self.end_user:
            _dict['endUser'] = self.end_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of consumer_details
        if self.consumer_details:
            _dict['consumerDetails'] = self.consumer_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of constraints
        if self.constraints:
            _dict['constraints'] = self.constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in employment_history (list)
        _items = []
        if self.employment_history:
            for _item_employment_history in self.employment_history:
                if _item_employment_history:
                    _items.append(_item_employment_history.to_dict())
            _dict['employmentHistory'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VOIEPayrollReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "customerType": obj.get("customerType"),
            "customerId": obj.get("customerId"),
            "requestId": obj.get("requestId"),
            "requesterName": obj.get("requesterName"),
            "endUser": ConsumerEndUser.from_dict(obj["endUser"]) if obj.get("endUser") is not None else None,
            "createdDate": obj.get("createdDate"),
            "title": obj.get("title"),
            "consumerId": obj.get("consumerId"),
            "consumerSsn": obj.get("consumerSsn"),
            "consumerDetails": ConsumerDetails.from_dict(obj["consumerDetails"]) if obj.get("consumerDetails") is not None else None,
            "disputeStatement": obj.get("disputeStatement"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "constraints": BaseReportAckConstraints.from_dict(obj["constraints"]) if obj.get("constraints") is not None else None,
            "errors": [ErrorMessage.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "portfolioId": obj.get("portfolioId"),
            "employmentHistory": [PayrollEmploymentHistoryVOIE.from_dict(_item) for _item in obj["employmentHistory"]] if obj.get("employmentHistory") is not None else None,
            "gseEnabled": obj.get("gseEnabled"),
            "reportStyle": obj.get("reportStyle")
        })
        return _obj


