# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class StatePeriod(BaseModel):
    """
    Statistics for one period in the report of a StateAttribute.
    """ # noqa: E501
    beginning_value: Union[StrictFloat, StrictInt] = Field(description="Value on the first date in the period", alias="beginningValue")
    count: StrictInt = Field(description="Count of data points during the period")
    end_date: date = Field(description="End date for the period being reported", alias="endDate")
    ending_value: Union[StrictFloat, StrictInt] = Field(description="Value on the last date in the period", alias="endingValue")
    max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum amount during the period")
    mean: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Mean of amounts during the period")
    median: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Median of amounts during the period")
    min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum amount during the period")
    standard_deviation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Standard deviation of amounts during the period", alias="standardDeviation")
    start_date: date = Field(description="Start date for the period being reported", alias="startDate")
    sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sum of amounts during the period")
    __properties: ClassVar[List[str]] = ["beginningValue", "count", "endDate", "endingValue", "max", "mean", "median", "min", "standardDeviation", "startDate", "sum"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatePeriod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatePeriod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "beginningValue": obj.get("beginningValue"),
            "count": obj.get("count"),
            "endDate": obj.get("endDate"),
            "endingValue": obj.get("endingValue"),
            "max": obj.get("max"),
            "mean": obj.get("mean"),
            "median": obj.get("median"),
            "min": obj.get("min"),
            "standardDeviation": obj.get("standardDeviation"),
            "startDate": obj.get("startDate"),
            "sum": obj.get("sum")
        })
        return _obj


