# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LiteConnectParameters(BaseModel):
    """
    LiteConnectParameters
    """ # noqa: E501
    language: Optional[StrictStr] = Field(default=None, description="By default, the Data Connect application is in English. You don't need to pass this parameter unless you want to translate Data Connect into one of our supported languages.  * Spanish (United States): `es` * French (Canada): `fr` ")
    partner_id: StrictStr = Field(description="Your Partner ID displayed in the [Developer Dashboard](https://developer.mastercard.com/account/log-in)", alias="partnerId")
    customer_id: StrictStr = Field(description="A customer ID. See Add Customer API for how to create a customer ID.", alias="customerId")
    institution_id: StrictInt = Field(description="The ID of a financial institution, represented as a number", alias="institutionId")
    redirect_uri: Optional[StrictStr] = Field(default=None, description="The URL that customers will be redirected to after completing Mastercard Data Connect.  Required unless Data Connect is embedded inside our application (iframe). Required for NON SDK integrations, should be iOS universal link OR Android app link when Data Connect is hosted in a web view / secure container of the partner mobile app.", alias="redirectUri")
    webhook: Optional[StrictStr] = Field(default=None, description="The publicly available URL you want to be notified with events as the user progresses through the application. See [Data Connect Webhook Event](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-connect/) for event details.")
    webhook_content_type: Optional[StrictStr] = Field(default='application/json', description="The content type the webhook events will be sent in. Supported types: \"application/json\" and \"application/xml\".", alias="webhookContentType")
    webhook_data: Optional[Dict[str, Any]] = Field(default=None, description="Allows additional identifiable information to be inserted into the payload of connect webhook events. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/).", alias="webhookData")
    webhook_headers: Optional[Dict[str, Any]] = Field(default=None, description="Allows additional identifiable information to be included as headers of connect webhook event. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/).", alias="webhookHeaders")
    experience: Optional[StrictStr] = Field(default=None, description="The `experience` field allows you to customize: * Brand: color and logo * Icon: displayed on the \"Share your data\" page * Popular institutions: displayed on the Bank Search page * Report: the credit decisioning report to send when Data Connect completes. * MVS modules: financial, payroll, paystub  Note: the Finicity sales engineers (SE) help you set up a default experience for your company. For each additional experience you create thereafter, they'll give you a unique ID. See [Configure the Data Connect Experience](https://developer.mastercard.com/open-banking-us/documentation/connect/configure-connect-experience/).  Experience values options: * \"default\": your default experience (must be defined) * GUID: the code for a different experience * Not defined: If you don't pass the experience parameter, then Data Connect's out of the box default experience (add accounts but no branding) is used, and the MVS modules will not run.")
    single_use_url: Optional[StrictBool] = Field(default=None, description="\"true\": The URL link expires after a Data Connect session successfully completes.  Note: when the `singleUseUrl` and the `experience` parameters are passed in the same call, the `singleUseUrl` value overrides the `singleUseUrl` value configured in the `experience` parameter.", alias="singleUseUrl")
    is_hosted_in_mobile_app: Optional[StrictBool] = Field(default=None, description="Indicates whether Data Connect is hosted in a web view / secure container of the partner mobile app. It is only required for NON SDK integrations.", alias="isHostedInMobileApp")
    is_web_view: Optional[StrictBool] = Field(default=None, description="\"true\": Indicates that the Data Connect Session will be displayed within a WebView. When the `isWebView` parameter is `true` the `redirectUri` parameter is required.  Note: This parameter is no longer recommended. We instead recommend specifying a `redirectUrl` through our WebSDK. Please refer to the following documentation:  - [iOS](https://developer.mastercard.com/open-banking-us/documentation/connect/integrating/webviews/ios-webviews/)  - [Android](https://developer.mastercard.com/open-banking-us/documentation/connect/integrating/webviews/android-webviews/)", alias="isWebView")
    __properties: ClassVar[List[str]] = ["language", "partnerId", "customerId", "institutionId", "redirectUri", "webhook", "webhookContentType", "webhookData", "webhookHeaders", "experience", "singleUseUrl", "isHostedInMobileApp", "isWebView"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiteConnectParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiteConnectParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "language": obj.get("language"),
            "partnerId": obj.get("partnerId"),
            "customerId": obj.get("customerId"),
            "institutionId": obj.get("institutionId"),
            "redirectUri": obj.get("redirectUri"),
            "webhook": obj.get("webhook"),
            "webhookContentType": obj.get("webhookContentType") if obj.get("webhookContentType") is not None else 'application/json',
            "webhookData": obj.get("webhookData"),
            "webhookHeaders": obj.get("webhookHeaders"),
            "experience": obj.get("experience"),
            "singleUseUrl": obj.get("singleUseUrl"),
            "isHostedInMobileApp": obj.get("isHostedInMobileApp"),
            "isWebView": obj.get("isWebView")
        })
        return _obj


