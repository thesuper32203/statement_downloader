# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.report_transaction import ReportTransaction
from typing import Optional, Set
from typing_extensions import Self

class TransactionsReportAccount(BaseModel):
    """
    Fields used for the Transaction History Report (CRA products)
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="The Finicity account ID")
    name: Optional[StrictStr] = Field(default=None, description="The account name from the financial institution.")
    number: Optional[StrictStr] = Field(default=None, description="The account number from the financial institution (obfuscated)")
    type: Optional[StrictStr] = Field(default=None, description="The list of supported account types. * `checking` * `savings` * `moneyMarket` * `cd` * `investment` * `investmentTaxDeferred` * `employeeStockPurchasePlan` * `ira` * `401k` * `roth` * `403b` * `529` * `rollover` * `ugma` * `utma` * `keogh` * `457` * `401a` * `unknown` * `mortgage` * `loan` * `creditCard` * `lineOfCredit` * `payroll` * `studentLoan` * `brokerageAccount` * `educationSavings` * `healthSavingsAccount` * `nonTaxableBrokerageAccount` * `pension` * `profitSharingPlan` * `roth401k` * `sepIRA` * `simpleIRA` * `thriftSavingsPlan` * `variableAnnuity`")
    currency: Optional[StrictStr] = Field(default=None, description="A currency code for account")
    aggregation_status_code: Optional[StrictInt] = Field(default=None, description="The status of the most recent aggregation attempt for this account. Note: non-zero means the account was not accessed successfully for this report, and additional fields for this account may not be reliable.", alias="aggregationStatusCode")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The cleared balance of the account as-of `balanceDate`")
    balance_date: Optional[StrictInt] = Field(default=None, description="A timestamp showing when the balance was captured by the FI", alias="balanceDate")
    oldest_transaction_date: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="The oldest transaction date of this account.", alias="oldestTransactionDate")
    transactions_count: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="A number detailing the total number of transactions for a given account.", alias="transactionsCount")
    transactions: Optional[List[ReportTransaction]] = Field(default=None, description="a list of transaction records")
    __properties: ClassVar[List[str]] = ["id", "name", "number", "type", "currency", "aggregationStatusCode", "balance", "balanceDate", "oldestTransactionDate", "transactionsCount", "transactions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionsReportAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in transactions (list)
        _items = []
        if self.transactions:
            for _item_transactions in self.transactions:
                if _item_transactions:
                    _items.append(_item_transactions.to_dict())
            _dict['transactions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionsReportAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "number": obj.get("number"),
            "type": obj.get("type"),
            "currency": obj.get("currency"),
            "aggregationStatusCode": obj.get("aggregationStatusCode"),
            "balance": obj.get("balance"),
            "balanceDate": obj.get("balanceDate"),
            "oldestTransactionDate": obj.get("oldestTransactionDate"),
            "transactionsCount": obj.get("transactionsCount"),
            "transactions": [ReportTransaction.from_dict(_item) for _item in obj["transactions"]] if obj.get("transactions") is not None else None
        })
        return _obj


