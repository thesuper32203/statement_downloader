# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AccountOwnerDocumentation(BaseModel):
    """
    Account owner documentation
    """ # noqa: E501
    tax_id: Optional[StrictStr] = Field(default=None, description="Country specific tax ID associated with the customer. * **United States**: Social Security number (SSN) or Taxpayer         Identification Number (TIN)    * Format: 123-45-7890  * **Canada**: Social Insurance Number (SIM) or Numero d'assurance sociale (NAS)    * Format: 123-456-789", alias="taxId")
    tax_id_country: Optional[StrictStr] = Field(default=None, description="Country code is Iso3166-1 Alpha-2 code and Alpha 3 standard (max length 3).", alias="taxIdCountry")
    government_id: Optional[StrictStr] = Field(default=None, description="A federal or state issued identification number in alphanumeric characters. * **United States**:    * Passport: 6-9 digits.    * US Visa: 8 digits.    * Driver's license: 1-19 digits * **Canada**:    * Passport: 8 digits    * Driver: 6-9 digits", alias="governmentId")
    __properties: ClassVar[List[str]] = ["taxId", "taxIdCountry", "governmentId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountOwnerDocumentation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountOwnerDocumentation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "taxId": obj.get("taxId"),
            "taxIdCountry": obj.get("taxIdCountry"),
            "governmentId": obj.get("governmentId")
        })
        return _obj


