# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.analytics_report_data import AnalyticsReportData
from openapi_client.models.report_custom_field import ReportCustomField
from typing import Optional, Set
from typing_extensions import Self

class AnalyticsReportConstraints(BaseModel):
    """
    AnalyticsReportConstraints
    """ # noqa: E501
    analytics_report_data: Optional[AnalyticsReportData] = Field(default=None, alias="analyticsReportData")
    account_ids: Optional[StrictStr] = Field(default=None, description="A whitespace-separated list of account IDs to be included in the report (all accounts will be included if not set)", alias="accountIds")
    report_custom_fields: Optional[List[ReportCustomField]] = Field(default=None, description="The `reportCustomFields` parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you'd like associated with the report when it's generated. Every custom field consists of three variables: `label`, `value`, and `shown`. The `shown` variable is \"true\" or \"false\". * \"true\": (default) display the custom field in the PDF report * \"false\": don't display the custom field in the PDF report  For an experience that generates multiple reports, the `reportCustomFields` parameter gets passed to all reports.  All custom fields display in the Reseller Billing API.", alias="reportCustomFields")
    from_date: Optional[StrictInt] = Field(default=None, description="A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="fromDate")
    __properties: ClassVar[List[str]] = ["analyticsReportData", "accountIds", "reportCustomFields", "fromDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalyticsReportConstraints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of analytics_report_data
        if self.analytics_report_data:
            _dict['analyticsReportData'] = self.analytics_report_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in report_custom_fields (list)
        _items = []
        if self.report_custom_fields:
            for _item_report_custom_fields in self.report_custom_fields:
                if _item_report_custom_fields:
                    _items.append(_item_report_custom_fields.to_dict())
            _dict['reportCustomFields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalyticsReportConstraints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analyticsReportData": AnalyticsReportData.from_dict(obj["analyticsReportData"]) if obj.get("analyticsReportData") is not None else None,
            "accountIds": obj.get("accountIds"),
            "reportCustomFields": [ReportCustomField.from_dict(_item) for _item in obj["reportCustomFields"]] if obj.get("reportCustomFields") is not None else None,
            "fromDate": obj.get("fromDate")
        })
        return _obj


