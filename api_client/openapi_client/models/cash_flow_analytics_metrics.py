# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.cash_flow_inflow_attributes import CashFlowInflowAttributes
from openapi_client.models.cash_flow_negative_triggers import CashFlowNegativeTriggers
from openapi_client.models.cash_flow_outflow_attributes import CashFlowOutflowAttributes
from openapi_client.models.cash_flow_transaction_analytics_attributes import CashFlowTransactionAnalyticsAttributes
from openapi_client.models.obb_date_range_and_amount import ObbDateRangeAndAmount
from typing import Optional, Set
from typing_extensions import Self

class CashFlowAnalyticsMetrics(BaseModel):
    """
    Cash flow analytics metrics and calculations
    """ # noqa: E501
    inflow: Optional[CashFlowInflowAttributes] = None
    negative_triggers: Optional[CashFlowNegativeTriggers] = Field(default=None, alias="negativeTriggers")
    outflow: Optional[CashFlowOutflowAttributes] = None
    revenue_by_month_for_the_report_time_period: Optional[List[ObbDateRangeAndAmount]] = Field(default=None, description="Sum of all transactions categorized as revenue, split by months", alias="revenueByMonthForTheReportTimePeriod")
    revenue_for_the_report_time_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sum of all transactions categorized as revenue", alias="revenueForTheReportTimePeriod")
    transaction_analytics: Optional[CashFlowTransactionAnalyticsAttributes] = Field(default=None, alias="transactionAnalytics")
    __properties: ClassVar[List[str]] = ["inflow", "negativeTriggers", "outflow", "revenueByMonthForTheReportTimePeriod", "revenueForTheReportTimePeriod", "transactionAnalytics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CashFlowAnalyticsMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inflow
        if self.inflow:
            _dict['inflow'] = self.inflow.to_dict()
        # override the default output from pydantic by calling `to_dict()` of negative_triggers
        if self.negative_triggers:
            _dict['negativeTriggers'] = self.negative_triggers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outflow
        if self.outflow:
            _dict['outflow'] = self.outflow.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in revenue_by_month_for_the_report_time_period (list)
        _items = []
        if self.revenue_by_month_for_the_report_time_period:
            for _item_revenue_by_month_for_the_report_time_period in self.revenue_by_month_for_the_report_time_period:
                if _item_revenue_by_month_for_the_report_time_period:
                    _items.append(_item_revenue_by_month_for_the_report_time_period.to_dict())
            _dict['revenueByMonthForTheReportTimePeriod'] = _items
        # override the default output from pydantic by calling `to_dict()` of transaction_analytics
        if self.transaction_analytics:
            _dict['transactionAnalytics'] = self.transaction_analytics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CashFlowAnalyticsMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inflow": CashFlowInflowAttributes.from_dict(obj["inflow"]) if obj.get("inflow") is not None else None,
            "negativeTriggers": CashFlowNegativeTriggers.from_dict(obj["negativeTriggers"]) if obj.get("negativeTriggers") is not None else None,
            "outflow": CashFlowOutflowAttributes.from_dict(obj["outflow"]) if obj.get("outflow") is not None else None,
            "revenueByMonthForTheReportTimePeriod": [ObbDateRangeAndAmount.from_dict(_item) for _item in obj["revenueByMonthForTheReportTimePeriod"]] if obj.get("revenueByMonthForTheReportTimePeriod") is not None else None,
            "revenueForTheReportTimePeriod": obj.get("revenueForTheReportTimePeriod"),
            "transactionAnalytics": CashFlowTransactionAnalyticsAttributes.from_dict(obj["transactionAnalytics"]) if obj.get("transactionAnalytics") is not None else None
        })
        return _obj


