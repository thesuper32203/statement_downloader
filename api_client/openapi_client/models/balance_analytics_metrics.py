# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.obb_daily_balance import ObbDailyBalance
from openapi_client.models.obb_date_range_and_amount import ObbDateRangeAndAmount
from openapi_client.models.obb_date_range_and_count import ObbDateRangeAndCount
from openapi_client.models.obb_num_weeks_average_balance_increasing import ObbNumWeeksAverageBalanceIncreasing
from typing import Optional, Set
from typing_extensions import Self

class BalanceAnalyticsMetrics(BaseModel):
    """
    Balance analytics metrics and calculations
    """ # noqa: E501
    available_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Available Balance", alias="availableBalance")
    available_balance_date: Optional[Annotated[str, Field(min_length=25, strict=True, max_length=25)]] = Field(default=None, description="Available Balance date", alias="availableBalanceDate")
    average_daily_balance_by_month_for_the_report_time_period: Optional[List[ObbDateRangeAndAmount]] = Field(default=None, description="Average daily ending balance each month over the report time period", alias="averageDailyBalanceByMonthForTheReportTimePeriod")
    average_daily_balance_for_the_report_time_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average Daily Balance", alias="averageDailyBalanceForTheReportTimePeriod")
    average_weekday_balance_for_the_report_time_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average Weekday Balance", alias="averageWeekdayBalanceForTheReportTimePeriod")
    count_daily_negative_balances_by_month_for_the_report_time_period: Optional[List[ObbDateRangeAndCount]] = Field(default=None, description="Number of negative daily ending balances each month over the report time period", alias="countDailyNegativeBalancesByMonthForTheReportTimePeriod")
    current_running_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Current Running Balance Date", alias="currentRunningBalance")
    current_running_balance_date: Optional[Annotated[str, Field(min_length=25, strict=True, max_length=25)]] = Field(default=None, description="Current Running Balance date", alias="currentRunningBalanceDate")
    daily_balances_by_weekday_for_the_report_time_period: Optional[List[ObbDailyBalance]] = Field(default=None, description="Daily balance of the account during weekdays over the length of the report", alias="dailyBalancesByWeekdayForTheReportTimePeriod")
    daily_balances_for_the_report_time_period: Optional[List[ObbDailyBalance]] = Field(default=None, description="Daily balance of the account over the length of the report", alias="dailyBalancesForTheReportTimePeriod")
    historic_number_of_weeks_average_balance_increasing: Optional[ObbNumWeeksAverageBalanceIncreasing] = Field(default=None, alias="historicNumberOfWeeksAverageBalanceIncreasing")
    maximum_daily_balance_by_month_for_the_report_time_period: Optional[List[ObbDateRangeAndAmount]] = Field(default=None, description="Maximum daily ending balance each month over the report time period", alias="maximumDailyBalanceByMonthForTheReportTimePeriod")
    maximum_running_balance_for_the_report_time_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum Running Balance", alias="maximumRunningBalanceForTheReportTimePeriod")
    minimum_daily_balance_by_month_for_the_report_time_period: Optional[List[ObbDateRangeAndAmount]] = Field(default=None, description="Minimum daily ending balance each month over the report time period", alias="minimumDailyBalanceByMonthForTheReportTimePeriod")
    minimum_running_balance_for_the_report_time_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum Running Balance", alias="minimumRunningBalanceForTheReportTimePeriod")
    __properties: ClassVar[List[str]] = ["availableBalance", "availableBalanceDate", "averageDailyBalanceByMonthForTheReportTimePeriod", "averageDailyBalanceForTheReportTimePeriod", "averageWeekdayBalanceForTheReportTimePeriod", "countDailyNegativeBalancesByMonthForTheReportTimePeriod", "currentRunningBalance", "currentRunningBalanceDate", "dailyBalancesByWeekdayForTheReportTimePeriod", "dailyBalancesForTheReportTimePeriod", "historicNumberOfWeeksAverageBalanceIncreasing", "maximumDailyBalanceByMonthForTheReportTimePeriod", "maximumRunningBalanceForTheReportTimePeriod", "minimumDailyBalanceByMonthForTheReportTimePeriod", "minimumRunningBalanceForTheReportTimePeriod"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BalanceAnalyticsMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in average_daily_balance_by_month_for_the_report_time_period (list)
        _items = []
        if self.average_daily_balance_by_month_for_the_report_time_period:
            for _item_average_daily_balance_by_month_for_the_report_time_period in self.average_daily_balance_by_month_for_the_report_time_period:
                if _item_average_daily_balance_by_month_for_the_report_time_period:
                    _items.append(_item_average_daily_balance_by_month_for_the_report_time_period.to_dict())
            _dict['averageDailyBalanceByMonthForTheReportTimePeriod'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in count_daily_negative_balances_by_month_for_the_report_time_period (list)
        _items = []
        if self.count_daily_negative_balances_by_month_for_the_report_time_period:
            for _item_count_daily_negative_balances_by_month_for_the_report_time_period in self.count_daily_negative_balances_by_month_for_the_report_time_period:
                if _item_count_daily_negative_balances_by_month_for_the_report_time_period:
                    _items.append(_item_count_daily_negative_balances_by_month_for_the_report_time_period.to_dict())
            _dict['countDailyNegativeBalancesByMonthForTheReportTimePeriod'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in daily_balances_by_weekday_for_the_report_time_period (list)
        _items = []
        if self.daily_balances_by_weekday_for_the_report_time_period:
            for _item_daily_balances_by_weekday_for_the_report_time_period in self.daily_balances_by_weekday_for_the_report_time_period:
                if _item_daily_balances_by_weekday_for_the_report_time_period:
                    _items.append(_item_daily_balances_by_weekday_for_the_report_time_period.to_dict())
            _dict['dailyBalancesByWeekdayForTheReportTimePeriod'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in daily_balances_for_the_report_time_period (list)
        _items = []
        if self.daily_balances_for_the_report_time_period:
            for _item_daily_balances_for_the_report_time_period in self.daily_balances_for_the_report_time_period:
                if _item_daily_balances_for_the_report_time_period:
                    _items.append(_item_daily_balances_for_the_report_time_period.to_dict())
            _dict['dailyBalancesForTheReportTimePeriod'] = _items
        # override the default output from pydantic by calling `to_dict()` of historic_number_of_weeks_average_balance_increasing
        if self.historic_number_of_weeks_average_balance_increasing:
            _dict['historicNumberOfWeeksAverageBalanceIncreasing'] = self.historic_number_of_weeks_average_balance_increasing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in maximum_daily_balance_by_month_for_the_report_time_period (list)
        _items = []
        if self.maximum_daily_balance_by_month_for_the_report_time_period:
            for _item_maximum_daily_balance_by_month_for_the_report_time_period in self.maximum_daily_balance_by_month_for_the_report_time_period:
                if _item_maximum_daily_balance_by_month_for_the_report_time_period:
                    _items.append(_item_maximum_daily_balance_by_month_for_the_report_time_period.to_dict())
            _dict['maximumDailyBalanceByMonthForTheReportTimePeriod'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in minimum_daily_balance_by_month_for_the_report_time_period (list)
        _items = []
        if self.minimum_daily_balance_by_month_for_the_report_time_period:
            for _item_minimum_daily_balance_by_month_for_the_report_time_period in self.minimum_daily_balance_by_month_for_the_report_time_period:
                if _item_minimum_daily_balance_by_month_for_the_report_time_period:
                    _items.append(_item_minimum_daily_balance_by_month_for_the_report_time_period.to_dict())
            _dict['minimumDailyBalanceByMonthForTheReportTimePeriod'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BalanceAnalyticsMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableBalance": obj.get("availableBalance"),
            "availableBalanceDate": obj.get("availableBalanceDate"),
            "averageDailyBalanceByMonthForTheReportTimePeriod": [ObbDateRangeAndAmount.from_dict(_item) for _item in obj["averageDailyBalanceByMonthForTheReportTimePeriod"]] if obj.get("averageDailyBalanceByMonthForTheReportTimePeriod") is not None else None,
            "averageDailyBalanceForTheReportTimePeriod": obj.get("averageDailyBalanceForTheReportTimePeriod"),
            "averageWeekdayBalanceForTheReportTimePeriod": obj.get("averageWeekdayBalanceForTheReportTimePeriod"),
            "countDailyNegativeBalancesByMonthForTheReportTimePeriod": [ObbDateRangeAndCount.from_dict(_item) for _item in obj["countDailyNegativeBalancesByMonthForTheReportTimePeriod"]] if obj.get("countDailyNegativeBalancesByMonthForTheReportTimePeriod") is not None else None,
            "currentRunningBalance": obj.get("currentRunningBalance"),
            "currentRunningBalanceDate": obj.get("currentRunningBalanceDate"),
            "dailyBalancesByWeekdayForTheReportTimePeriod": [ObbDailyBalance.from_dict(_item) for _item in obj["dailyBalancesByWeekdayForTheReportTimePeriod"]] if obj.get("dailyBalancesByWeekdayForTheReportTimePeriod") is not None else None,
            "dailyBalancesForTheReportTimePeriod": [ObbDailyBalance.from_dict(_item) for _item in obj["dailyBalancesForTheReportTimePeriod"]] if obj.get("dailyBalancesForTheReportTimePeriod") is not None else None,
            "historicNumberOfWeeksAverageBalanceIncreasing": ObbNumWeeksAverageBalanceIncreasing.from_dict(obj["historicNumberOfWeeksAverageBalanceIncreasing"]) if obj.get("historicNumberOfWeeksAverageBalanceIncreasing") is not None else None,
            "maximumDailyBalanceByMonthForTheReportTimePeriod": [ObbDateRangeAndAmount.from_dict(_item) for _item in obj["maximumDailyBalanceByMonthForTheReportTimePeriod"]] if obj.get("maximumDailyBalanceByMonthForTheReportTimePeriod") is not None else None,
            "maximumRunningBalanceForTheReportTimePeriod": obj.get("maximumRunningBalanceForTheReportTimePeriod"),
            "minimumDailyBalanceByMonthForTheReportTimePeriod": [ObbDateRangeAndAmount.from_dict(_item) for _item in obj["minimumDailyBalanceByMonthForTheReportTimePeriod"]] if obj.get("minimumDailyBalanceByMonthForTheReportTimePeriod") is not None else None,
            "minimumRunningBalanceForTheReportTimePeriod": obj.get("minimumRunningBalanceForTheReportTimePeriod")
        })
        return _obj


