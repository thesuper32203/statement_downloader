# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class CashFlowMonthlyCashFlowCreditSummaries(BaseModel):
    """
    CashFlowMonthlyCashFlowCreditSummaries
    """ # noqa: E501
    month: StrictInt = Field(description="One instance for each complete calendar month in the report")
    number_of_credits: StrictStr = Field(description="Number of credits by month across all accounts", alias="numberOfCredits")
    total_credits_amount: Union[StrictFloat, StrictInt] = Field(description="Total amount of credits by month across all accounts", alias="totalCreditsAmount")
    largest_credit: Union[StrictFloat, StrictInt] = Field(description="Largest credit by month across all accounts", alias="largestCredit")
    number_of_credits_less_transfers: StrictStr = Field(description="Number of credits by month (less transfers) across all accounts", alias="numberOfCreditsLessTransfers")
    total_credits_amount_less_transfers: Union[StrictFloat, StrictInt] = Field(description="Total amount of credits by month (less transfers) across all accounts", alias="totalCreditsAmountLessTransfers")
    average_credit_amount: Union[StrictFloat, StrictInt] = Field(description="The average credit amount", alias="averageCreditAmount")
    estimated_number_of_loan_deposits: StrictStr = Field(description="The estimated number of loan deposits by month", alias="estimatedNumberOfLoanDeposits")
    estimated_loan_deposit_amount: Union[StrictFloat, StrictInt] = Field(description="The estimated loan deposit amount by month", alias="estimatedLoanDepositAmount")
    __properties: ClassVar[List[str]] = ["month", "numberOfCredits", "totalCreditsAmount", "largestCredit", "numberOfCreditsLessTransfers", "totalCreditsAmountLessTransfers", "averageCreditAmount", "estimatedNumberOfLoanDeposits", "estimatedLoanDepositAmount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CashFlowMonthlyCashFlowCreditSummaries from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CashFlowMonthlyCashFlowCreditSummaries from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "month": obj.get("month"),
            "numberOfCredits": obj.get("numberOfCredits"),
            "totalCreditsAmount": obj.get("totalCreditsAmount"),
            "largestCredit": obj.get("largestCredit"),
            "numberOfCreditsLessTransfers": obj.get("numberOfCreditsLessTransfers"),
            "totalCreditsAmountLessTransfers": obj.get("totalCreditsAmountLessTransfers"),
            "averageCreditAmount": obj.get("averageCreditAmount"),
            "estimatedNumberOfLoanDeposits": obj.get("estimatedNumberOfLoanDeposits"),
            "estimatedLoanDepositAmount": obj.get("estimatedLoanDepositAmount")
        })
        return _obj


