# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.input_merchant_information import InputMerchantInformation
from typing import Optional, Set
from typing_extensions import Self

class TransactionPayload(BaseModel):
    """
    TransactionPayload
    """ # noqa: E501
    external_customer_id: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(description="A unique identifier assigned to the customer for a particular institution. __Note:__ The externalCustomerId and externalAccountId fields are to allow you to map the transactions back to your data. __Do not send Mastercard plaintext representations of customer or account IDs.__ The representative IDs must be obfuscated through cryptographically strong hashing (we recommend using SHA-2 or SHA-3 methods).", alias="externalCustomerId")
    external_account_id: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(description="A unique identifier assigned to the accounts for a particular institution. __Note:__ The externalCustomerId and externalAccountId fields are to allow you to map the transactions back to your data. __Do not send Mastercard plaintext representations of customer or account IDs.__ The representative IDs must be obfuscated through cryptographically strong hashing (we recommend using SHA-2 or SHA-3 methods).", alias="externalAccountId")
    account_type: Annotated[str, Field(min_length=1, strict=True, max_length=511)] = Field(description="Indicates the type of account associated with the transaction. Listed below are the current account types supported:  \"checking\", \"savings\", \"creditCard\", \"brokerageAccount\", \"investment\", \"healthSavingsAccount\", \"unknown\"  NOTE : If \"unknown\" is provided, the enrichment service will assume it is a \"checking\" account. An incorrect assumption could impact the results from the enrichment service. ", alias="accountType")
    external_transaction_id: Annotated[str, Field(min_length=1, strict=True, max_length=511)] = Field(description="A unique identifier for the transaction that assists in linking data back to your systems.", alias="externalTransactionId")
    posted_timestamp: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=32)]] = Field(default=None, description="The date and time when the transaction was officially recorded in the account.  Supported formats are yyyy-MM-dd'T'HH:mm:ss.SSS'Z', yyyy-MM-dd'T'HH:mm:ss'Z', yyyy-MM-dd HH:mm:ss.0, yyyy-MM-dd. ", alias="postedTimestamp")
    transaction_timestamp: Annotated[str, Field(min_length=3, strict=True, max_length=32)] = Field(description="The exact date and time when the transaction was initiated or occurred.  Supported formats are yyyy-MM-dd'T'HH:mm:ss.SSS'Z', yyyy-MM-dd'T'HH:mm:ss'Z', yyyy-MM-dd HH:mm:ss.0, yyyy-MM-dd. ", alias="transactionTimestamp")
    description: Annotated[str, Field(min_length=1, strict=True, max_length=1024)] = Field(description="Description of the transaction.")
    memo: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=511)]] = Field(default=None, description="Memo of the transaction.")
    amount: Union[Annotated[float, Field(le=1.7976931348623157E+308, strict=True, ge=-1.7976931348623157E+308)], Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(description="Value amount for transaction.")
    transaction_fee: Optional[Union[Annotated[float, Field(le=1.7976931348623157E+308, strict=True, ge=-1.7976931348623157E+308)], Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]]] = Field(default=None, description="A charge applied to the transaction.", alias="transactionFee")
    type: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=32)]] = Field(default=None, description="Type of the transaction.")
    direction_indicator: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=32)]] = Field(default=None, description="- The directionIndicator should be from the perspective of the account holder. - If you always send us positive amount values, you MUST send us corresponding directionIndicator values to ensure the categorization logic works as intended. - If you have internal logic to provide the amount field as either positive or negative, do not send us data in the directionIndicator.  - Listed below are the current directionIndicator types supported:   - \"Debit\"   - \"Credit\" ", alias="directionIndicator")
    additional_details: Optional[Dict[str, StrictStr]] = Field(default=None, description="A dictionary containing additional details of the transaction being returned in the enrichment response. - This object should not contain any PII. - The max number of allowed keys are 30. - The key max length should be 100. - The value max length should be 255. ", alias="additionalDetails")
    card_acceptor_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=15)]] = Field(default=None, description="Also known as CAID, Merchant ID, or DE42, cardAcceptorId is an alphanumeric string assigned by the acquiring bank (Acquirer) to a merchant or merchant location. It serves as a unique identifier for the point of transaction origin, such as a physical store, payment terminal, or online checkout page.", alias="cardAcceptorId")
    input_is_recurring_transaction: Optional[StrictBool] = Field(default=None, description="A flag indicating whether the transaction is recurring or not.", alias="inputIsRecurringTransaction")
    input_merchant_information: Optional[InputMerchantInformation] = Field(default=None, alias="inputMerchantInformation")
    __properties: ClassVar[List[str]] = ["externalCustomerId", "externalAccountId", "accountType", "externalTransactionId", "postedTimestamp", "transactionTimestamp", "description", "memo", "amount", "transactionFee", "type", "directionIndicator", "additionalDetails", "cardAcceptorId", "inputIsRecurringTransaction", "inputMerchantInformation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of input_merchant_information
        if self.input_merchant_information:
            _dict['inputMerchantInformation'] = self.input_merchant_information.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "externalCustomerId": obj.get("externalCustomerId"),
            "externalAccountId": obj.get("externalAccountId"),
            "accountType": obj.get("accountType"),
            "externalTransactionId": obj.get("externalTransactionId"),
            "postedTimestamp": obj.get("postedTimestamp"),
            "transactionTimestamp": obj.get("transactionTimestamp"),
            "description": obj.get("description"),
            "memo": obj.get("memo"),
            "amount": obj.get("amount"),
            "transactionFee": obj.get("transactionFee"),
            "type": obj.get("type"),
            "directionIndicator": obj.get("directionIndicator"),
            "additionalDetails": obj.get("additionalDetails"),
            "cardAcceptorId": obj.get("cardAcceptorId"),
            "inputIsRecurringTransaction": obj.get("inputIsRecurringTransaction"),
            "inputMerchantInformation": InputMerchantInformation.from_dict(obj["inputMerchantInformation"]) if obj.get("inputMerchantInformation") is not None else None
        })
        return _obj


