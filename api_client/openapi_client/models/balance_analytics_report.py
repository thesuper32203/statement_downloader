# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.balance_analytics_account_result import BalanceAnalyticsAccountResult
from openapi_client.models.balance_analytics_business_summary import BalanceAnalyticsBusinessSummary
from openapi_client.models.obb_report_header import ObbReportHeader
from typing import Optional, Set
from typing_extensions import Self

class BalanceAnalyticsReport(BaseModel):
    """
    Balance analytics report data as JSON
    """ # noqa: E501
    account_results: Optional[List[BalanceAnalyticsAccountResult]] = Field(default=None, description="Balance results per account", alias="accountResults")
    business_id: Optional[StrictInt] = Field(default=None, description="Business ID", alias="businessId")
    business_summary: Optional[BalanceAnalyticsBusinessSummary] = Field(default=None, alias="businessSummary")
    customer_id: StrictInt = Field(description="A customer ID represented as a number. See Add Customer API for how to create a customer ID.", alias="customerId")
    report_header: ObbReportHeader = Field(alias="reportHeader")
    requester_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Name of requester", alias="requesterName")
    title: StrictStr = Field(description="Title of the report")
    __properties: ClassVar[List[str]] = ["accountResults", "businessId", "businessSummary", "customerId", "reportHeader", "requesterName", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BalanceAnalyticsReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in account_results (list)
        _items = []
        if self.account_results:
            for _item_account_results in self.account_results:
                if _item_account_results:
                    _items.append(_item_account_results.to_dict())
            _dict['accountResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of business_summary
        if self.business_summary:
            _dict['businessSummary'] = self.business_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of report_header
        if self.report_header:
            _dict['reportHeader'] = self.report_header.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BalanceAnalyticsReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountResults": [BalanceAnalyticsAccountResult.from_dict(_item) for _item in obj["accountResults"]] if obj.get("accountResults") is not None else None,
            "businessId": obj.get("businessId"),
            "businessSummary": BalanceAnalyticsBusinessSummary.from_dict(obj["businessSummary"]) if obj.get("businessSummary") is not None else None,
            "customerId": obj.get("customerId"),
            "reportHeader": ObbReportHeader.from_dict(obj["reportHeader"]) if obj.get("reportHeader") is not None else None,
            "requesterName": obj.get("requesterName"),
            "title": obj.get("title")
        })
        return _obj


