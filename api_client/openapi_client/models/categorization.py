# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Categorization(BaseModel):
    """
    Categorization Record
    """ # noqa: E501
    normalized_payee_name: StrictStr = Field(description="A normalized payee, derived from the transaction's description and memo fields", alias="normalizedPayeeName")
    category: StrictStr = Field(description="The different categories for transactions. * \"ATM Fee\"  * \"Advertising\"  * \"Air Travel\"  * \"Alcohol & Bars\"  * \"Allowance\"  * \"Amusement\"  * \"Arts\"  * \"Auto & Transport\"  * \"Auto Insurance\"  * \"Auto Payment\"  * \"Baby Supplies\"  * \"Babysitter & Daycare\"  * \"Bank Fee\"  * \"Bills & Utilities\"  * \"Bonus\"  * \"Books\"  * \"Books & Supplies\"  * \"Business Services\"  * \"Buy\"  * \"Cash & ATM\"  * \"Charity\"  * \"Check\"  * \"Child Support\"  * \"Clothing\"  * \"Coffee Shops\"  * \"Credit Card Payment\"  * \"Dentist\"  * \"Deposit\"  * \"Dividend & Cap Gains\"  * \"Doctor\"  * \"Education\"  * \"Electronics & Software\"  * \"Entertainment\"  * \"Eyecare\"  * \"Fast Food\"  * \"Federal Tax\"  * \"Fees & Charges\"  * \"Finance Charge\"  * \"Financial\"  * \"Financial Advisor\"  * \"Food & Dining\"  * \"Furnishings\"  * \"Gas & Fuel\"  * \"Gift\"  * \"Gifts & Donations\"  * \"Groceries\"  * \"Gym\"  * \"Hair\"  * \"Health & Fitness\"  * \"Health Insurance\"  * \"Hobbies\"  * \"Home\"  * \"Home Improvement\"  * \"Home Insurance\"  * \"Home Phone\"  * \"Home Services\"  * \"Home Supplies\"  * \"Hotel\"  * \"Income\"  * \"Interest Income\"  * \"Internet\"  * \"Investments\"  * \"Kids\"  * \"Kids Activities\"  * \"Late Fee\"  * \"Laundry\"  * \"Lawn & Garden\"  * \"Legal\"  * \"Life Insurance\"  * \"Loan Fees and Charges\"  * \"Loan Insurance\"  * \"Loan Interest\"  * \"Loan Payment\"  * \"Loan Principal\"  * \"Loans\"  * \"Local Tax\"  * \"Low Balance\"  * \"Mobile Phone\"  * \"Mortgage & Rent\"  * \"Movies & DVDs\"  * \"Music\"  * \"Newspapers & Magazines\"  * \"Office Supplies\"  * \"Parking\"  * \"Paycheck\"  * \"Personal Care\"  * \"Pet Food & Supplies\"  * \"Pet Grooming\"  * \"Pets\"  * \"Pharmacy\"  * \"Printing\"  * \"Property Tax\"  * \"Public Transportation\"  * \"Reimbursement\"  * \"Rental Car & Taxi\"  * \"Restaurants\"  * \"Sales Tax\"  * \"Sell\"  * \"Service & Parts\"  * \"Service Fee\"  * \"Shipping\"  * \"Shopping\"  * \"Spa & Massage\"  * \"Sporting Goods\"  * \"Sports\"  * \"State Tax\"  * \"Streaming Services\"  * \"Student Loan\"  * \"Taxes\"  * \"Television\"  * \"Toys\"  * \"Trade Commissions\"  * \"Transfer\"  * \"Transfer for Cash Spending\"  * \"Travel\"  * \"Tuition\"  * \"Uncategorized\"  * \"Utilities\"  * \"Vacation\"  * \"Veterinary\"  * \"Internet / Broadband Charges\"")
    city: Optional[StrictStr] = Field(default=None, description="City")
    state: Optional[StrictStr] = Field(default=None, description="State")
    postal_code: Optional[StrictStr] = Field(default=None, description="A ZIP code", alias="postalCode")
    country: StrictStr = Field(description="Country code is Iso3166-1 Alpha-2 code and Alpha 3 standard (max length 3).")
    best_representation: Optional[StrictStr] = Field(default=None, description="Combines the `description` and `memo` data together, removing duplicated information and numbers and special characters", alias="bestRepresentation")
    __properties: ClassVar[List[str]] = ["normalizedPayeeName", "category", "city", "state", "postalCode", "country", "bestRepresentation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Categorization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Categorization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "normalizedPayeeName": obj.get("normalizedPayeeName"),
            "category": obj.get("category"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "postalCode": obj.get("postalCode"),
            "country": obj.get("country"),
            "bestRepresentation": obj.get("bestRepresentation")
        })
        return _obj


