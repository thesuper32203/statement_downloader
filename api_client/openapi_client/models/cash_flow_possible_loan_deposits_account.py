# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.report_transaction import ReportTransaction
from typing import Optional, Set
from typing_extensions import Self

class CashFlowPossibleLoanDepositsAccount(BaseModel):
    """
    CashFlowPossibleLoanDepositsAccount
    """ # noqa: E501
    id: StrictStr = Field(description="Finicity account ID")
    owner_name: StrictStr = Field(description="The name(s) of the account owner(s). If the owner information is not available, this field will not appear in the report. If the account has multiple owners then all owners will be listed separated by |.", alias="ownerName")
    owner_address: StrictStr = Field(description="The mailing address of the account owner(s). If the owner information is not available, this field will not appear in the report. If the account has multiple owners then the address of the primary owner will be listed.", alias="ownerAddress")
    owner_as_of_date: Optional[StrictInt] = Field(default=None, description="The ownerAsOfDate field is populated if the account owner information was retrieved from a prior report and will show the created date of that report. Reports always try and aggregate fresh account owner information and only rarely aren't able to aggregate it. If account owner information is not able to be aggregated, but it was available from a prior report that had that same account, the information from that prior report will be used and this field will be populated. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/errors/error-list/#handling-epoch-dates-and-times).", alias="ownerAsOfDate")
    name: StrictStr = Field(description="The account name from the institution")
    number: StrictStr = Field(description="The account number from the institution (obfuscated)")
    type: StrictStr = Field(description="CFR: `ALL` (`checking` / `savings` / `loan` / `mortgage` / `credit card` / `CD` / `MM` / `investment`...)")
    aggregation_status_code: StrictInt = Field(description="The status of the most recent aggregation attempt for this account (non-zero means the account was not accessed successfully for this report, and additional fields for this account may not be reliable)", alias="aggregationStatusCode")
    current_balance: Union[StrictFloat, StrictInt] = Field(description="The cleared balance of the account as-of `balanceDate`", alias="currentBalance")
    available_balance: Union[StrictFloat, StrictInt] = Field(description="Available balance", alias="availableBalance")
    balance_date: StrictInt = Field(description="A timestamp showing when the `balance` was captured", alias="balanceDate")
    transactions: List[ReportTransaction] = Field(description="a list of transaction records")
    __properties: ClassVar[List[str]] = ["id", "ownerName", "ownerAddress", "ownerAsOfDate", "name", "number", "type", "aggregationStatusCode", "currentBalance", "availableBalance", "balanceDate", "transactions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CashFlowPossibleLoanDepositsAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in transactions (list)
        _items = []
        if self.transactions:
            for _item_transactions in self.transactions:
                if _item_transactions:
                    _items.append(_item_transactions.to_dict())
            _dict['transactions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CashFlowPossibleLoanDepositsAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "ownerName": obj.get("ownerName"),
            "ownerAddress": obj.get("ownerAddress"),
            "ownerAsOfDate": obj.get("ownerAsOfDate"),
            "name": obj.get("name"),
            "number": obj.get("number"),
            "type": obj.get("type"),
            "aggregationStatusCode": obj.get("aggregationStatusCode"),
            "currentBalance": obj.get("currentBalance"),
            "availableBalance": obj.get("availableBalance"),
            "balanceDate": obj.get("balanceDate"),
            "transactions": [ReportTransaction.from_dict(_item) for _item in obj["transactions"]] if obj.get("transactions") is not None else None
        })
        return _obj


