# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class App(BaseModel):
    """
    List of applications
    """ # noqa: E501
    pre_app_id: Optional[StrictInt] = Field(default=None, description="The Pre-app Id is generated after the partner submits the request to create an application using the /aggregation/v1/partners/applications API.", alias="preAppId")
    application_id: Optional[StrictStr] = Field(default=None, description="The Application Id is assigned to the pre-app after the pre-app approval.", alias="applicationId")
    status: Optional[StrictStr] = Field(default=None, description="The application registration status with Mastercard ('A'=Approved, 'P'=Pending, 'D'=Deleted, 'R'=Rejected, 'S'=Skipped)")
    name: Optional[StrictStr] = Field(default=None, description="The name of the application submitted by the partner.")
    scopes: Optional[StrictStr] = Field(default=None, description="The scope of the application for the partner.")
    note: Optional[StrictStr] = Field(default=None, description="The note for the pre-application status.")
    created_date: Optional[StrictStr] = Field(default=None, description="The application creation date and time in ISO 8601 format.", alias="createdDate")
    modified_date: Optional[StrictStr] = Field(default=None, description="The application modification date and time are in ISO 8601 format.", alias="modifiedDate")
    submitted_date: Optional[StrictStr] = Field(default=None, description="The application submitted date and time in ISO 8601 format.", alias="submittedDate")
    __properties: ClassVar[List[str]] = ["preAppId", "applicationId", "status", "name", "scopes", "note", "createdDate", "modifiedDate", "submittedDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of App from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of App from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "preAppId": obj.get("preAppId"),
            "applicationId": obj.get("applicationId"),
            "status": obj.get("status"),
            "name": obj.get("name"),
            "scopes": obj.get("scopes"),
            "note": obj.get("note"),
            "createdDate": obj.get("createdDate"),
            "modifiedDate": obj.get("modifiedDate"),
            "submittedDate": obj.get("submittedDate")
        })
        return _obj


