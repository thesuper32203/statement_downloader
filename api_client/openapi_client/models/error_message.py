# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ErrorMessage(BaseModel):
    """
    ErrorMessage
    """ # noqa: E501
    code: Dict[str, Any] = Field(description="An error code (can be returned as a number or a string). Useful links: [Common API Status Codes](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/#common-api-status-codes), [Aggregation Status Codes](https://developer.mastercard.com/open-banking-us/documentation/products/manage/account-aggregation/#aggregation-status-codes).")
    status: Optional[StrictStr] = Field(default=None, description="A status code")
    title: Optional[StrictStr] = Field(default=None, description="A title for the error")
    level: Optional[StrictStr] = Field(default=None, description="An error level")
    message: Optional[StrictStr] = Field(default=None, description="An error message")
    user_message: Optional[StrictStr] = Field(default=None, description="Some more details about the error")
    asset_id: Optional[StrictStr] = Field(default=None, description="An asset ID. Generated by Data Connect or by using the Store Customer Pay Statement API.", alias="assetId")
    account_id: Optional[StrictStr] = Field(default=None, description="An account ID", alias="accountId")
    external_transaction_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=511)]] = Field(default=None, description="A unique identifier for the transaction that assists in linking data back to your systems.", alias="externalTransactionId")
    tags: Optional[StrictStr] = Field(default=None, description="Categories that the error belongs to")
    __properties: ClassVar[List[str]] = ["code", "status", "title", "level", "message", "user_message", "assetId", "accountId", "externalTransactionId", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ErrorMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ErrorMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "level": obj.get("level"),
            "message": obj.get("message"),
            "user_message": obj.get("user_message"),
            "assetId": obj.get("assetId"),
            "accountId": obj.get("accountId"),
            "externalTransactionId": obj.get("externalTransactionId"),
            "tags": obj.get("tags")
        })
        return _obj


