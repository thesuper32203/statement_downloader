# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PayStatementData(BaseModel):
    """
    Data to be included within the pay statement report
    """ # noqa: E501
    asset_ids: List[StrictStr] = Field(description="A list of pay statement asset IDs", alias="assetIds")
    extract_earnings: Optional[StrictBool] = Field(default=True, description="Field to indicate whether to extract the earnings on all pay statements", alias="extractEarnings")
    extract_deductions: Optional[StrictBool] = Field(default=False, description="Field to indicate whether to extract the deductions on all pay statements", alias="extractDeductions")
    extract_direct_deposit: Optional[StrictBool] = Field(default=True, description="Field to indicate whether to extract the direct deposits on all pay statements", alias="extractDirectDeposit")
    __properties: ClassVar[List[str]] = ["assetIds", "extractEarnings", "extractDeductions", "extractDirectDeposit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayStatementData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayStatementData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetIds": obj.get("assetIds"),
            "extractEarnings": obj.get("extractEarnings") if obj.get("extractEarnings") is not None else True,
            "extractDeductions": obj.get("extractDeductions") if obj.get("extractDeductions") is not None else False,
            "extractDirectDeposit": obj.get("extractDirectDeposit") if obj.get("extractDirectDeposit") is not None else True
        })
        return _obj


