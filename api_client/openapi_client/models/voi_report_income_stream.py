# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.cadence_details import CadenceDetails
from openapi_client.models.net_monthly import NetMonthly
from openapi_client.models.report_transaction import ReportTransaction
from typing import Optional, Set
from typing_extensions import Self

class VOIReportIncomeStream(BaseModel):
    """
    VOIReportIncomeStream
    """ # noqa: E501
    id: StrictStr = Field(description="Income stream ID")
    name: StrictStr = Field(description="A human-readable name based on the `normalizedPayee` name of the transactions for this income stream")
    status: StrictStr = Field(description="Possible values: \"ACTIVE\", \"INACTIVE\"")
    estimate_inclusion: StrictStr = Field(description="Possible values: \"HIGH\", \"MODERATE\", \"LOW\", \"NO\"", alias="estimateInclusion")
    confidence: StrictInt = Field(description="Level of confidence that the deposit stream represents income (example: 85%)")
    cadence: CadenceDetails
    net_monthly: Optional[List[NetMonthly]] = Field(default=None, description="A list of net monthly records. One instance for each complete calendar month in the report.", alias="netMonthly")
    net_annual: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sum of all values in `netMonthlyIncome` over the previous 12 months", alias="netAnnual")
    projected_net_annual: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Projected net income over the next 12 months, across all income streams, based on `netAnnualIncome`", alias="projectedNetAnnual")
    estimated_gross_annual: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Before-tax gross annual income (estimated from `netAnnual`) across all income stream in the past 12 months", alias="estimatedGrossAnnual")
    projected_gross_annual: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Projected gross income over the next 12 months, across all active income streams, based on `projectedNetAnnual`", alias="projectedGrossAnnual")
    average_monthly_income_net: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Monthly average amount over the previous 24 months", alias="averageMonthlyIncomeNet")
    income_stream_months: Optional[StrictInt] = Field(default=None, description="The number of months the income transactions are observed", alias="incomeStreamMonths")
    transactions: List[ReportTransaction] = Field(description="A list of transaction records")
    __properties: ClassVar[List[str]] = ["id", "name", "status", "estimateInclusion", "confidence", "cadence", "netMonthly", "netAnnual", "projectedNetAnnual", "estimatedGrossAnnual", "projectedGrossAnnual", "averageMonthlyIncomeNet", "incomeStreamMonths", "transactions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VOIReportIncomeStream from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cadence
        if self.cadence:
            _dict['cadence'] = self.cadence.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in net_monthly (list)
        _items = []
        if self.net_monthly:
            for _item_net_monthly in self.net_monthly:
                if _item_net_monthly:
                    _items.append(_item_net_monthly.to_dict())
            _dict['netMonthly'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transactions (list)
        _items = []
        if self.transactions:
            for _item_transactions in self.transactions:
                if _item_transactions:
                    _items.append(_item_transactions.to_dict())
            _dict['transactions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VOIReportIncomeStream from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "estimateInclusion": obj.get("estimateInclusion"),
            "confidence": obj.get("confidence"),
            "cadence": CadenceDetails.from_dict(obj["cadence"]) if obj.get("cadence") is not None else None,
            "netMonthly": [NetMonthly.from_dict(_item) for _item in obj["netMonthly"]] if obj.get("netMonthly") is not None else None,
            "netAnnual": obj.get("netAnnual"),
            "projectedNetAnnual": obj.get("projectedNetAnnual"),
            "estimatedGrossAnnual": obj.get("estimatedGrossAnnual"),
            "projectedGrossAnnual": obj.get("projectedGrossAnnual"),
            "averageMonthlyIncomeNet": obj.get("averageMonthlyIncomeNet"),
            "incomeStreamMonths": obj.get("incomeStreamMonths"),
            "transactions": [ReportTransaction.from_dict(_item) for _item in obj["transactions"]] if obj.get("transactions") is not None else None
        })
        return _obj


