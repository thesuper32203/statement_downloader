# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.loan_payment_details_group import LoanPaymentDetailsGroup
from openapi_client.models.loan_payment_details_loan import LoanPaymentDetailsLoan
from typing import Optional, Set
from typing_extensions import Self

class LoanPaymentDetailsAccount(BaseModel):
    """
    LoanPaymentDetailsAccount
    """ # noqa: E501
    account_id: StrictStr = Field(description="An account ID", alias="accountId")
    account_number: StrictStr = Field(description="Institution's ID of the Student Loan Account", alias="accountNumber")
    account_payment_number: StrictStr = Field(description="The payment number given by the institution. This number is typically for manual payments. This is not an ACH payment number.", alias="accountPaymentNumber")
    account_payment_address: StrictStr = Field(description="The payment address to which send manual payments should be sent", alias="accountPaymentAddress")
    account_future_payoff_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The payoff amount for the account", alias="accountFuturePayoffAmount")
    account_future_payoff_date: Optional[datetime] = Field(default=None, description="The date to which the \"Future Payoff Amount\" applies", alias="accountFuturePayoffDate")
    group_detail: Optional[List[LoanPaymentDetailsGroup]] = Field(default=None, description="Group details", alias="groupDetail")
    loan_detail: Optional[List[LoanPaymentDetailsLoan]] = Field(default=None, description="Loan details", alias="loanDetail")
    __properties: ClassVar[List[str]] = ["accountId", "accountNumber", "accountPaymentNumber", "accountPaymentAddress", "accountFuturePayoffAmount", "accountFuturePayoffDate", "groupDetail", "loanDetail"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoanPaymentDetailsAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in group_detail (list)
        _items = []
        if self.group_detail:
            for _item_group_detail in self.group_detail:
                if _item_group_detail:
                    _items.append(_item_group_detail.to_dict())
            _dict['groupDetail'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in loan_detail (list)
        _items = []
        if self.loan_detail:
            for _item_loan_detail in self.loan_detail:
                if _item_loan_detail:
                    _items.append(_item_loan_detail.to_dict())
            _dict['loanDetail'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoanPaymentDetailsAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "accountNumber": obj.get("accountNumber"),
            "accountPaymentNumber": obj.get("accountPaymentNumber"),
            "accountPaymentAddress": obj.get("accountPaymentAddress"),
            "accountFuturePayoffAmount": obj.get("accountFuturePayoffAmount"),
            "accountFuturePayoffDate": obj.get("accountFuturePayoffDate"),
            "groupDetail": [LoanPaymentDetailsGroup.from_dict(_item) for _item in obj["groupDetail"]] if obj.get("groupDetail") is not None else None,
            "loanDetail": [LoanPaymentDetailsLoan.from_dict(_item) for _item in obj["loanDetail"]] if obj.get("loanDetail") is not None else None
        })
        return _obj


