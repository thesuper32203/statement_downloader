# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.cash_flow_monthly_cash_flow_balances import CashFlowMonthlyCashFlowBalances
from typing import Optional, Set
from typing_extensions import Self

class CashFlowCashFlowBalance(BaseModel):
    """
    CashFlowCashFlowBalance
    """ # noqa: E501
    monthly_cash_flow_balances: List[CashFlowMonthlyCashFlowBalances] = Field(description="List of attributes for each month", alias="monthlyCashFlowBalances")
    min_daily_balance: Union[StrictFloat, StrictInt] = Field(description="Min daily balance across entire transaction history", alias="minDailyBalance")
    max_daily_balance: Union[StrictFloat, StrictInt] = Field(description="Max Daily Balance across entire transaction history", alias="maxDailyBalance")
    twelve_month_average_daily_balance: Union[StrictFloat, StrictInt] = Field(description="Average Daily Balance across twelve months for the account", alias="twelveMonthAverageDailyBalance")
    six_month_average_daily_balance: Union[StrictFloat, StrictInt] = Field(description="Average Daily Balance across six months for the account", alias="sixMonthAverageDailyBalance")
    two_month_average_daily_balance: Union[StrictFloat, StrictInt] = Field(description="Average Daily Balance across two months for the account", alias="twoMonthAverageDailyBalance")
    twelve_month_standard_deviation_of_daily_balance: StrictStr = Field(description="Standard Deviation of Daily Balance across twelve months for the account", alias="twelveMonthStandardDeviationOfDailyBalance")
    six_month_standard_deviation_of_daily_balance: Optional[StrictStr] = Field(default=None, description="Standard Deviation of Daily Balance across six months for the account", alias="sixMonthStandardDeviationOfDailyBalance")
    two_month_standard_deviation_of_daily_balance: StrictStr = Field(description="Standard Deviation of Daily Balance across two months for the account", alias="twoMonthStandardDeviationOfDailyBalance")
    number_days_negative_balance: Optional[StrictStr] = Field(default=None, description="Number of Days Negative Balance over entire transaction history", alias="numberDaysNegativeBalance")
    number_of_days_positive_balance: StrictStr = Field(description="Number of Days positive balance over entire transaction history", alias="numberOfDaysPositiveBalance")
    __properties: ClassVar[List[str]] = ["monthlyCashFlowBalances", "minDailyBalance", "maxDailyBalance", "twelveMonthAverageDailyBalance", "sixMonthAverageDailyBalance", "twoMonthAverageDailyBalance", "twelveMonthStandardDeviationOfDailyBalance", "sixMonthStandardDeviationOfDailyBalance", "twoMonthStandardDeviationOfDailyBalance", "numberDaysNegativeBalance", "numberOfDaysPositiveBalance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CashFlowCashFlowBalance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in monthly_cash_flow_balances (list)
        _items = []
        if self.monthly_cash_flow_balances:
            for _item_monthly_cash_flow_balances in self.monthly_cash_flow_balances:
                if _item_monthly_cash_flow_balances:
                    _items.append(_item_monthly_cash_flow_balances.to_dict())
            _dict['monthlyCashFlowBalances'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CashFlowCashFlowBalance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "monthlyCashFlowBalances": [CashFlowMonthlyCashFlowBalances.from_dict(_item) for _item in obj["monthlyCashFlowBalances"]] if obj.get("monthlyCashFlowBalances") is not None else None,
            "minDailyBalance": obj.get("minDailyBalance"),
            "maxDailyBalance": obj.get("maxDailyBalance"),
            "twelveMonthAverageDailyBalance": obj.get("twelveMonthAverageDailyBalance"),
            "sixMonthAverageDailyBalance": obj.get("sixMonthAverageDailyBalance"),
            "twoMonthAverageDailyBalance": obj.get("twoMonthAverageDailyBalance"),
            "twelveMonthStandardDeviationOfDailyBalance": obj.get("twelveMonthStandardDeviationOfDailyBalance"),
            "sixMonthStandardDeviationOfDailyBalance": obj.get("sixMonthStandardDeviationOfDailyBalance"),
            "twoMonthStandardDeviationOfDailyBalance": obj.get("twoMonthStandardDeviationOfDailyBalance"),
            "numberDaysNegativeBalance": obj.get("numberDaysNegativeBalance"),
            "numberOfDaysPositiveBalance": obj.get("numberOfDaysPositiveBalance")
        })
        return _obj


