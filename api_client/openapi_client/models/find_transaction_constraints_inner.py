# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class FindTransactionConstraintsInner(BaseModel):
    """
    FindTransactionConstraintsInner
    """ # noqa: E501
    find_transaction_description_memo: Optional[StrictStr] = Field(default=None, description="A string to return transactions that have an exact match to Description/Memo.</br> - Description/Memo</br>   - Found in the PDF report for reach transactions.</br>   - A combination of **description** and **memo** from the JSON version of the report.</br> ", alias="findTransactionDescriptionMemo")
    find_transaction_amount_from: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A decimal value to return transactions with **amount** greater than or equal to **findTransactionAmountFrom**.</br> - If both **findTransactionAmountFrom** and **findTransactionAmountTo** are present. Then transactions with  **amount** between (inclusive) both values will be returned. ", alias="findTransactionAmountFrom")
    find_transaction_amount_to: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A decimal value to return transactions with **amount** less than or equal to **findTransactionAmountTo**.</br> - If both **findTransactionAmountFrom** and **findTransactionAmountTo** are present. Then transactions with  **amount** between (inclusive) both values will be returned. ", alias="findTransactionAmountTo")
    find_transaction_category: Optional[Annotated[List[StrictStr], Field(max_length=10)]] = Field(default=None, description="An array of **categories** to return transactions with an exact match to the array of **category**. Limit of 10. ", alias="findTransactionCategory")
    __properties: ClassVar[List[str]] = ["findTransactionDescriptionMemo", "findTransactionAmountFrom", "findTransactionAmountTo", "findTransactionCategory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FindTransactionConstraintsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FindTransactionConstraintsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "findTransactionDescriptionMemo": obj.get("findTransactionDescriptionMemo"),
            "findTransactionAmountFrom": obj.get("findTransactionAmountFrom"),
            "findTransactionAmountTo": obj.get("findTransactionAmountTo"),
            "findTransactionCategory": obj.get("findTransactionCategory")
        })
        return _obj


