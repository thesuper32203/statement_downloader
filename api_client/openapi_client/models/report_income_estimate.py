# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class ReportIncomeEstimate(BaseModel):
    """
    ReportIncomeEstimate
    """ # noqa: E501
    net_annual: Union[StrictFloat, StrictInt] = Field(description="Sum of all values in `netMonthlyIncome` over the previous 12 months", alias="netAnnual")
    projected_net_annual: Union[StrictFloat, StrictInt] = Field(description="Projected net income over the next 12 months, across all income streams, based on `netAnnualIncome`", alias="projectedNetAnnual")
    estimated_gross_annual: Union[StrictFloat, StrictInt] = Field(description="Before-tax gross annual income (estimated from `netAnnual`) across all income stream in the past 12 months", alias="estimatedGrossAnnual")
    projected_gross_annual: Union[StrictFloat, StrictInt] = Field(description="Projected gross income over the next 12 months, across all active income streams, based on `projectedNetAnnual`", alias="projectedGrossAnnual")
    __properties: ClassVar[List[str]] = ["netAnnual", "projectedNetAnnual", "estimatedGrossAnnual", "projectedGrossAnnual"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportIncomeEstimate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportIncomeEstimate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "netAnnual": obj.get("netAnnual"),
            "projectedNetAnnual": obj.get("projectedNetAnnual"),
            "estimatedGrossAnnual": obj.get("estimatedGrossAnnual"),
            "projectedGrossAnnual": obj.get("projectedGrossAnnual")
        })
        return _obj


