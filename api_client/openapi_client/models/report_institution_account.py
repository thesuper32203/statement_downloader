# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from openapi_client.models.analytics_reports_account import AnalyticsReportsAccount
from openapi_client.models.cash_flow_report_account import CashFlowReportAccount
from openapi_client.models.prequalification_report_account import PrequalificationReportAccount
from openapi_client.models.transactions_report_account import TransactionsReportAccount
from openapi_client.models.voa_report_account import VOAReportAccount
from openapi_client.models.voa_with_income_report_account import VOAWithIncomeReportAccount
from openapi_client.models.voe_transactions_report_account import VOETransactionsReportAccount
from openapi_client.models.voi_report_account import VOIReportAccount
from openapi_client.models.voietx_verify_report_account import VOIETXVerifyReportAccount
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

REPORTINSTITUTIONACCOUNT_ANY_OF_SCHEMAS = ["AnalyticsReportsAccount", "CashFlowReportAccount", "PrequalificationReportAccount", "TransactionsReportAccount", "VOAReportAccount", "VOAWithIncomeReportAccount", "VOETransactionsReportAccount", "VOIETXVerifyReportAccount", "VOIReportAccount"]

class ReportInstitutionAccount(BaseModel):
    """
    An account record
    """

    # data type: AnalyticsReportsAccount
    anyof_schema_1_validator: Optional[AnalyticsReportsAccount] = None
    # data type: CashFlowReportAccount
    anyof_schema_2_validator: Optional[CashFlowReportAccount] = None
    # data type: PrequalificationReportAccount
    anyof_schema_3_validator: Optional[PrequalificationReportAccount] = None
    # data type: TransactionsReportAccount
    anyof_schema_4_validator: Optional[TransactionsReportAccount] = None
    # data type: VOAReportAccount
    anyof_schema_5_validator: Optional[VOAReportAccount] = None
    # data type: VOAWithIncomeReportAccount
    anyof_schema_6_validator: Optional[VOAWithIncomeReportAccount] = None
    # data type: VOETransactionsReportAccount
    anyof_schema_7_validator: Optional[VOETransactionsReportAccount] = None
    # data type: VOIReportAccount
    anyof_schema_8_validator: Optional[VOIReportAccount] = None
    # data type: VOIETXVerifyReportAccount
    anyof_schema_9_validator: Optional[VOIETXVerifyReportAccount] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[AnalyticsReportsAccount, CashFlowReportAccount, PrequalificationReportAccount, TransactionsReportAccount, VOAReportAccount, VOAWithIncomeReportAccount, VOETransactionsReportAccount, VOIETXVerifyReportAccount, VOIReportAccount]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "AnalyticsReportsAccount", "CashFlowReportAccount", "PrequalificationReportAccount", "TransactionsReportAccount", "VOAReportAccount", "VOAWithIncomeReportAccount", "VOETransactionsReportAccount", "VOIETXVerifyReportAccount", "VOIReportAccount" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = ReportInstitutionAccount.model_construct()
        error_messages = []
        # validate data type: AnalyticsReportsAccount
        if not isinstance(v, AnalyticsReportsAccount):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnalyticsReportsAccount`")
        else:
            return v

        # validate data type: CashFlowReportAccount
        if not isinstance(v, CashFlowReportAccount):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CashFlowReportAccount`")
        else:
            return v

        # validate data type: PrequalificationReportAccount
        if not isinstance(v, PrequalificationReportAccount):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrequalificationReportAccount`")
        else:
            return v

        # validate data type: TransactionsReportAccount
        if not isinstance(v, TransactionsReportAccount):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TransactionsReportAccount`")
        else:
            return v

        # validate data type: VOAReportAccount
        if not isinstance(v, VOAReportAccount):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VOAReportAccount`")
        else:
            return v

        # validate data type: VOAWithIncomeReportAccount
        if not isinstance(v, VOAWithIncomeReportAccount):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VOAWithIncomeReportAccount`")
        else:
            return v

        # validate data type: VOETransactionsReportAccount
        if not isinstance(v, VOETransactionsReportAccount):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VOETransactionsReportAccount`")
        else:
            return v

        # validate data type: VOIReportAccount
        if not isinstance(v, VOIReportAccount):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VOIReportAccount`")
        else:
            return v

        # validate data type: VOIETXVerifyReportAccount
        if not isinstance(v, VOIETXVerifyReportAccount):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VOIETXVerifyReportAccount`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in ReportInstitutionAccount with anyOf schemas: AnalyticsReportsAccount, CashFlowReportAccount, PrequalificationReportAccount, TransactionsReportAccount, VOAReportAccount, VOAWithIncomeReportAccount, VOETransactionsReportAccount, VOIETXVerifyReportAccount, VOIReportAccount. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[AnalyticsReportsAccount] = None
        try:
            instance.actual_instance = AnalyticsReportsAccount.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[CashFlowReportAccount] = None
        try:
            instance.actual_instance = CashFlowReportAccount.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[PrequalificationReportAccount] = None
        try:
            instance.actual_instance = PrequalificationReportAccount.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[TransactionsReportAccount] = None
        try:
            instance.actual_instance = TransactionsReportAccount.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[VOAReportAccount] = None
        try:
            instance.actual_instance = VOAReportAccount.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[VOAWithIncomeReportAccount] = None
        try:
            instance.actual_instance = VOAWithIncomeReportAccount.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[VOETransactionsReportAccount] = None
        try:
            instance.actual_instance = VOETransactionsReportAccount.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[VOIReportAccount] = None
        try:
            instance.actual_instance = VOIReportAccount.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[VOIETXVerifyReportAccount] = None
        try:
            instance.actual_instance = VOIETXVerifyReportAccount.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ReportInstitutionAccount with anyOf schemas: AnalyticsReportsAccount, CashFlowReportAccount, PrequalificationReportAccount, TransactionsReportAccount, VOAReportAccount, VOAWithIncomeReportAccount, VOETransactionsReportAccount, VOIETXVerifyReportAccount, VOIReportAccount. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AnalyticsReportsAccount, CashFlowReportAccount, PrequalificationReportAccount, TransactionsReportAccount, VOAReportAccount, VOAWithIncomeReportAccount, VOETransactionsReportAccount, VOIETXVerifyReportAccount, VOIReportAccount]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


