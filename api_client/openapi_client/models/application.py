# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class Application(BaseModel):
    """
    Application
    """ # noqa: E501
    app_description: StrictStr = Field(description="A short description of the app. This will be visible to end users in the FI interface.", alias="appDescription")
    app_name: StrictStr = Field(description="The name of the application assigned to the customer", alias="appName")
    app_url: StrictStr = Field(description="An URL for the app. This will be visible to end users in the FI interface.", alias="appUrl")
    owner_address_line1: StrictStr = Field(description="Address line 1", alias="ownerAddressLine1")
    owner_address_line2: StrictStr = Field(description="Address line 2", alias="ownerAddressLine2")
    owner_city: StrictStr = Field(description="City for the business entity that owns the app. Information for registration purposes only and not given to the end user.", alias="ownerCity")
    owner_country: StrictStr = Field(description="Country for the  business entity that owns the app. Information for registration purposes only and not given to the end user.", alias="ownerCountry")
    owner_name: StrictStr = Field(description="Business name for the business entity that owns the app. Information for registration purposes only and not given to the end user.", alias="ownerName")
    owner_postal_code: StrictStr = Field(description="Zip code for the business entity that owns the app. Information for registration purposes only and not given to the end user.", alias="ownerPostalCode")
    owner_state: StrictStr = Field(description="State for the business entity that owns the app. Information for registration purposes only and not given to the end user.", alias="ownerState")
    image: StrictStr = Field(description="An app logo passed as a Base64 encoded image (1:1 SVG file, must be less than 50KB)")
    __properties: ClassVar[List[str]] = ["appDescription", "appName", "appUrl", "ownerAddressLine1", "ownerAddressLine2", "ownerCity", "ownerCountry", "ownerName", "ownerPostalCode", "ownerState", "image"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Application from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Application from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appDescription": obj.get("appDescription"),
            "appName": obj.get("appName"),
            "appUrl": obj.get("appUrl"),
            "ownerAddressLine1": obj.get("ownerAddressLine1"),
            "ownerAddressLine2": obj.get("ownerAddressLine2"),
            "ownerCity": obj.get("ownerCity"),
            "ownerCountry": obj.get("ownerCountry"),
            "ownerName": obj.get("ownerName"),
            "ownerPostalCode": obj.get("ownerPostalCode"),
            "ownerState": obj.get("ownerState"),
            "image": obj.get("image")
        })
        return _obj


