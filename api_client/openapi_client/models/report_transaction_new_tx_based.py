# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ReportTransactionNewTxBased(BaseModel):
    """
    ReportTransactionNewTxBased
    """ # noqa: E501
    id: StrictInt = Field(description="A transaction ID")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of the transaction. Transactions for deposits are positive values, withdrawals and debits are negative values.")
    posted_date: StrictInt = Field(description="A timestamp showing when the transaction was posted or cleared by the institution", alias="postedDate")
    description: StrictStr = Field(description="The description of the transaction, as provided by the institution (often known as `payee`). In the event that this field is left blank by the institution, Finicity will pass a value of \"No description provided by institution\". All other values are provided by the institution.")
    memo: Optional[StrictStr] = Field(default=None, description="The memo field of the transaction, as provided by the institution. The institution must provide either a description, a memo, or both. It is recommended to concatenate the two fields into a single value.")
    normalized_payee: Optional[StrictStr] = Field(default=None, description="A normalized payee, derived from the transaction's `description` and `memo` fields", alias="normalizedPayee")
    institution_transaction_id: Optional[StrictStr] = Field(default=None, description="The unique identifier given by the FI for each transaction", alias="institutionTransactionId")
    category: Optional[StrictStr] = Field(default=None, description="One of the values from Categories (assigned based on the payee name)")
    type: Optional[StrictStr] = Field(default=None, description="One of the values from transaction types")
    security_type: Optional[StrictStr] = Field(default=None, description="The type of investment security (VOA only)", alias="securityType")
    symbol: Optional[StrictStr] = Field(default=None, description="Investment symbol (VOA only)")
    commission: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A commission amount")
    investment_transaction_type: Optional[StrictStr] = Field(default=None, description="Keywords in the description and memo fields were used to translate investment transactions into these types  * `cancel`  * `purchaseToClose`  * `purchaseToCover`  * `contribution`  * `optionExercise`  * `optionExpiration`  * `fee`  * `soldToClose`  * `soldToOpen`  * `split`  * `transfer`  * `returnOfCapital`  * `income`  * `purchased`  * `sold`  * `dividendReinvest`  * `dividend`  * `reinvestOfIncome`  * `interest`  * `deposit`  * `otherInfo` ", alias="investmentTransactionType")
    __properties: ClassVar[List[str]] = ["id", "amount", "postedDate", "description", "memo", "normalizedPayee", "institutionTransactionId", "category", "type", "securityType", "symbol", "commission", "investmentTransactionType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportTransactionNewTxBased from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportTransactionNewTxBased from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "amount": obj.get("amount"),
            "postedDate": obj.get("postedDate"),
            "description": obj.get("description"),
            "memo": obj.get("memo"),
            "normalizedPayee": obj.get("normalizedPayee"),
            "institutionTransactionId": obj.get("institutionTransactionId"),
            "category": obj.get("category"),
            "type": obj.get("type"),
            "securityType": obj.get("securityType"),
            "symbol": obj.get("symbol"),
            "commission": obj.get("commission"),
            "investmentTransactionType": obj.get("investmentTransactionType")
        })
        return _obj


