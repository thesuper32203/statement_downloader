# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.account_owner_documentation import AccountOwnerDocumentation
from openapi_client.models.account_owner_identity_insights import AccountOwnerIdentityInsights
from openapi_client.models.account_owner_verification_matching_address import AccountOwnerVerificationMatchingAddress
from openapi_client.models.account_owner_verification_matching_email import AccountOwnerVerificationMatchingEmail
from openapi_client.models.account_owner_verification_phone import AccountOwnerVerificationPhone
from openapi_client.models.name_score import NameScore
from typing import Optional, Set
from typing_extensions import Self

class AccountOwnerVerificationMatchingDetails(BaseModel):
    """
    Owner of a customer account
    """ # noqa: E501
    relationship: Optional[StrictStr] = Field(default=None, description="The type of relationship to the account: * \"AUTHORIZED_USER\"  * \"BUSINESS\"  * \"FOR_BENEFIT_OF_PRIMARY\"  * \"FOR_BENEFIT_OF_PRIMARY_JOINT_RESTRICTED\"  * \"FOR_BENEFIT_OF_SECONDARY\"  * \"FOR_BENEFIT_OF_SECONDARY_JOINT_RESTRICTED\"  * \"FOR_BENEFIT_OF_SOLE_OWNER_RESTRICTED\"  * \"POWER_OF_ATTORNEY\"  * \"PRIMARY_JOINT_TENANTS\"  * \"PRIMARY\"  * \"PRIMARY_BORROWER\"  * \"PRIMARY_JOINT\"  * \"SECONDARY\"  * \"SECONDARY_JOINT_TENANTS\"  * \"SECONDARY_BORROWER\"  * \"SECONDARY_JOINT\"  * \"SOLE_OWNER\"  * \"TRUSTEE\"  * \"UNIFORM_TRANSFER_TO_MINOR\"")
    owner_name: StrictStr = Field(description="The full name of the account owner. Multiple account owners are returned in one string per the source data from the institution.", alias="ownerName")
    first_name: Optional[StrictStr] = Field(default=None, description="The first name of the account holder", alias="firstName")
    middle_name: Optional[StrictStr] = Field(default=None, description="The middle name of the account holder", alias="middleName")
    last_name: Optional[StrictStr] = Field(default=None, description="The last name of the account holder", alias="lastName")
    suffix: Optional[StrictStr] = Field(default=None, description="A generational or academic suffix")
    name_scores: NameScore = Field(alias="nameScores")
    name_classification: StrictStr = Field(description="The classification of the account holder: * \"person / personal / home\" * \"business\" * \"other\"", alias="nameClassification")
    name_classificationconfidencescore: Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="The confidence score 0 â€“ 1.0 of the name classification.", alias="nameClassificationconfidencescore")
    addresses: Optional[List[AccountOwnerVerificationMatchingAddress]] = Field(default=None, description="List of addresses")
    emails: Optional[List[AccountOwnerVerificationMatchingEmail]] = Field(default=None, description="List of emails")
    phones: Optional[List[AccountOwnerVerificationPhone]] = Field(default=None, description="List of phones")
    documentations: Optional[List[AccountOwnerDocumentation]] = Field(default=None, description="List of account owner documentation")
    identity_insights: Optional[AccountOwnerIdentityInsights] = Field(default=None, alias="identityInsights")
    __properties: ClassVar[List[str]] = ["relationship", "ownerName", "firstName", "middleName", "lastName", "suffix", "nameScores", "nameClassification", "nameClassificationconfidencescore", "addresses", "emails", "phones", "documentations", "identityInsights"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountOwnerVerificationMatchingDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name_scores
        if self.name_scores:
            _dict['nameScores'] = self.name_scores.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item_addresses in self.addresses:
                if _item_addresses:
                    _items.append(_item_addresses.to_dict())
            _dict['addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in emails (list)
        _items = []
        if self.emails:
            for _item_emails in self.emails:
                if _item_emails:
                    _items.append(_item_emails.to_dict())
            _dict['emails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phones (list)
        _items = []
        if self.phones:
            for _item_phones in self.phones:
                if _item_phones:
                    _items.append(_item_phones.to_dict())
            _dict['phones'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in documentations (list)
        _items = []
        if self.documentations:
            for _item_documentations in self.documentations:
                if _item_documentations:
                    _items.append(_item_documentations.to_dict())
            _dict['documentations'] = _items
        # override the default output from pydantic by calling `to_dict()` of identity_insights
        if self.identity_insights:
            _dict['identityInsights'] = self.identity_insights.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountOwnerVerificationMatchingDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "relationship": obj.get("relationship"),
            "ownerName": obj.get("ownerName"),
            "firstName": obj.get("firstName"),
            "middleName": obj.get("middleName"),
            "lastName": obj.get("lastName"),
            "suffix": obj.get("suffix"),
            "nameScores": NameScore.from_dict(obj["nameScores"]) if obj.get("nameScores") is not None else None,
            "nameClassification": obj.get("nameClassification"),
            "nameClassificationconfidencescore": obj.get("nameClassificationconfidencescore"),
            "addresses": [AccountOwnerVerificationMatchingAddress.from_dict(_item) for _item in obj["addresses"]] if obj.get("addresses") is not None else None,
            "emails": [AccountOwnerVerificationMatchingEmail.from_dict(_item) for _item in obj["emails"]] if obj.get("emails") is not None else None,
            "phones": [AccountOwnerVerificationPhone.from_dict(_item) for _item in obj["phones"]] if obj.get("phones") is not None else None,
            "documentations": [AccountOwnerDocumentation.from_dict(_item) for _item in obj["documentations"]] if obj.get("documentations") is not None else None,
            "identityInsights": AccountOwnerIdentityInsights.from_dict(obj["identityInsights"]) if obj.get("identityInsights") is not None else None
        })
        return _obj


