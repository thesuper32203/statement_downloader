# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AnnualIncome(BaseModel):
    """
    AnnualIncome
    """ # noqa: E501
    year: StrictStr = Field(description="The year for the amounts given in YTD totals for an employer")
    gross_pay_amount_ytd: Union[StrictFloat, StrictInt] = Field(description="Year to date (YTD) gross pay amount for the indicated year", alias="grossPayAmountYTD")
    net_pay_amount_ytd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Year to date (YTD) net pay amount for the indicated year", alias="netPayAmountYTD")
    base_pay_amount_ytd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Year to date (YTD) base pay amount for the year indicated", alias="basePayAmountYTD")
    overtime_pay_amount_ytd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Year to date (YTD) overtime pay amount for the year indicated", alias="overtimePayAmountYTD")
    other_pay_amount_ytd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Year to date (YTD) other pay amount for the indicated year. Other pay is pay that is not categorized into one of the other categories.", alias="otherPayAmountYTD")
    commission_pay_amount_ytd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Year to date (YTD) commission pay amount for the indicated year", alias="commissionPayAmountYTD")
    __properties: ClassVar[List[str]] = ["year", "grossPayAmountYTD", "netPayAmountYTD", "basePayAmountYTD", "overtimePayAmountYTD", "otherPayAmountYTD", "commissionPayAmountYTD"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnnualIncome from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnnualIncome from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "year": obj.get("year"),
            "grossPayAmountYTD": obj.get("grossPayAmountYTD"),
            "netPayAmountYTD": obj.get("netPayAmountYTD"),
            "basePayAmountYTD": obj.get("basePayAmountYTD"),
            "overtimePayAmountYTD": obj.get("overtimePayAmountYTD"),
            "otherPayAmountYTD": obj.get("otherPayAmountYTD"),
            "commissionPayAmountYTD": obj.get("commissionPayAmountYTD")
        })
        return _obj


