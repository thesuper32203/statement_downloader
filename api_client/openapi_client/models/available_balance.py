# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class AvailableBalance(BaseModel):
    """
    AvailableBalance
    """ # noqa: E501
    id: StrictInt = Field(description="A customer ID represented as a number. See Add Customer API for how to create a customer ID.")
    real_account_number_last4: StrictStr = Field(description="The last 4 digits of the ACH account number", alias="realAccountNumberLast4")
    available_balance: Union[StrictFloat, StrictInt] = Field(description="The available balance of the account", alias="availableBalance")
    available_balance_date: StrictInt = Field(description="A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="availableBalanceDate")
    cleared_balance: Union[StrictFloat, StrictInt] = Field(description="The cleared balance of the account. Also referred as posted balance, current balance, ledger balance", alias="clearedBalance")
    cleared_balance_date: StrictInt = Field(description="A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="clearedBalanceDate")
    aggregation_status_code: StrictInt = Field(description="The status of the most recent aggregation attempt (see [Aggregation Status Codes](https://developer.mastercard.com/open-banking-us/documentation/products/manage/account-aggregation/#aggregation-status-codes)). Won't be present until you have run your first aggregation for the account.", alias="aggregationStatusCode")
    currency: StrictStr = Field(description="A currency code")
    __properties: ClassVar[List[str]] = ["id", "realAccountNumberLast4", "availableBalance", "availableBalanceDate", "clearedBalance", "clearedBalanceDate", "aggregationStatusCode", "currency"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AvailableBalance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AvailableBalance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "realAccountNumberLast4": obj.get("realAccountNumberLast4"),
            "availableBalance": obj.get("availableBalance"),
            "availableBalanceDate": obj.get("availableBalanceDate"),
            "clearedBalance": obj.get("clearedBalance"),
            "clearedBalanceDate": obj.get("clearedBalanceDate"),
            "aggregationStatusCode": obj.get("aggregationStatusCode"),
            "currency": obj.get("currency")
        })
        return _obj


