# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deductions import Deductions
from openapi_client.models.earnings import Earnings
from openapi_client.models.main_pay_statement_fields import MainPayStatementFields
from typing import Optional, Set
from typing_extensions import Self

class DirectPayStatements(BaseModel):
    """
    DirectPayStatements
    """ # noqa: E501
    payroll_pay_history_id: StrictStr = Field(description="An ID for the income and employment details for the given pay period", alias="payrollPayHistoryId")
    last_pay_period_indicator: StrictBool = Field(description="Most recent available pay check", alias="lastPayPeriodIndicator")
    main_pay_statement_fields: MainPayStatementFields = Field(alias="mainPayStatementFields")
    earnings: List[Earnings] = Field(description="Categorization of pay, for the pay period")
    deductions: Optional[List[Deductions]] = Field(default=None, description="Deductions from the pay check")
    __properties: ClassVar[List[str]] = ["payrollPayHistoryId", "lastPayPeriodIndicator", "mainPayStatementFields", "earnings", "deductions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DirectPayStatements from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of main_pay_statement_fields
        if self.main_pay_statement_fields:
            _dict['mainPayStatementFields'] = self.main_pay_statement_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in earnings (list)
        _items = []
        if self.earnings:
            for _item_earnings in self.earnings:
                if _item_earnings:
                    _items.append(_item_earnings.to_dict())
            _dict['earnings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in deductions (list)
        _items = []
        if self.deductions:
            for _item_deductions in self.deductions:
                if _item_deductions:
                    _items.append(_item_deductions.to_dict())
            _dict['deductions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DirectPayStatements from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payrollPayHistoryId": obj.get("payrollPayHistoryId"),
            "lastPayPeriodIndicator": obj.get("lastPayPeriodIndicator"),
            "mainPayStatementFields": MainPayStatementFields.from_dict(obj["mainPayStatementFields"]) if obj.get("mainPayStatementFields") is not None else None,
            "earnings": [Earnings.from_dict(_item) for _item in obj["earnings"]] if obj.get("earnings") is not None else None,
            "deductions": [Deductions.from_dict(_item) for _item in obj["deductions"]] if obj.get("deductions") is not None else None
        })
        return _obj


