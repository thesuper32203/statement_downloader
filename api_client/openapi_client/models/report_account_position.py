# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ReportAccountPosition(BaseModel):
    """
    ReportAccountPosition
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The id of the investment position")
    currency: Optional[StrictStr] = Field(default=None, description="What currency the account operates in")
    symbol: Optional[StrictStr] = Field(default=None, description="The investment positionâ€™s market ticker symbol")
    security_name: Optional[StrictStr] = Field(default=None, description="The security name for the investment holding", alias="securityName")
    units: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of units of the holding")
    market_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Market value of an investment position at the time of retrieval", alias="marketValue")
    current_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The current price of the investment holding", alias="currentPrice")
    security_type: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Type of security of the investment position", alias="securityType")
    __properties: ClassVar[List[str]] = ["id", "currency", "symbol", "securityName", "units", "marketValue", "currentPrice", "securityType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportAccountPosition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportAccountPosition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "currency": obj.get("currency"),
            "symbol": obj.get("symbol"),
            "securityName": obj.get("securityName"),
            "units": obj.get("units"),
            "marketValue": obj.get("marketValue"),
            "currentPrice": obj.get("currentPrice"),
            "securityType": obj.get("securityType")
        })
        return _obj


