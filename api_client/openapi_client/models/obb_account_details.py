# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.obb_account_owner import ObbAccountOwner
from openapi_client.models.obb_institution import ObbInstitution
from typing import Optional, Set
from typing_extensions import Self

class ObbAccountDetails(BaseModel):
    """
    Details of the account and financial institution
    """ # noqa: E501
    account_number_display: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The account number from a financial institution in truncated format", alias="accountNumberDisplay")
    account_owner: ObbAccountOwner = Field(alias="accountOwner")
    aggregation_attempt_date: Optional[Annotated[str, Field(min_length=25, strict=True, max_length=25)]] = Field(default=None, description="A timestamp showing the last aggregation attempt. This will not be present until you have run your first aggregation for the account.", alias="aggregationAttemptDate")
    aggregation_status_code: Optional[StrictInt] = Field(default=None, description="The status of the most recent aggregation attempt. This will not be present until you have run your first aggregation for the account", alias="aggregationStatusCode")
    aggregation_success_date: Optional[Annotated[str, Field(min_length=25, strict=True, max_length=25)]] = Field(default=None, description="A timestamp showing the last successful aggregation of the account. This will not be present until you have run your first aggregation for the account.", alias="aggregationSuccessDate")
    currency: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=5)]] = Field(default=None, description="The currency of the account")
    current_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Current reported balance of the account", alias="currentBalance")
    id: StrictInt = Field(description="An account ID represented as a number")
    institution: ObbInstitution
    institution_login_id: Optional[StrictInt] = Field(default=None, description="An institution login ID (from the account record), represented as a number", alias="institutionLoginId")
    name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The account name from the institution")
    real_account_number_last4: Optional[StrictInt] = Field(default=None, description="The last 4 digits of the ACH account number", alias="realAccountNumberLast4")
    status: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="pending during account discovery, always active following successful account activation")
    type: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="Account type, e.g. checking/saving")
    __properties: ClassVar[List[str]] = ["accountNumberDisplay", "accountOwner", "aggregationAttemptDate", "aggregationStatusCode", "aggregationSuccessDate", "currency", "currentBalance", "id", "institution", "institutionLoginId", "name", "realAccountNumberLast4", "status", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObbAccountDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account_owner
        if self.account_owner:
            _dict['accountOwner'] = self.account_owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of institution
        if self.institution:
            _dict['institution'] = self.institution.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObbAccountDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountNumberDisplay": obj.get("accountNumberDisplay"),
            "accountOwner": ObbAccountOwner.from_dict(obj["accountOwner"]) if obj.get("accountOwner") is not None else None,
            "aggregationAttemptDate": obj.get("aggregationAttemptDate"),
            "aggregationStatusCode": obj.get("aggregationStatusCode"),
            "aggregationSuccessDate": obj.get("aggregationSuccessDate"),
            "currency": obj.get("currency"),
            "currentBalance": obj.get("currentBalance"),
            "id": obj.get("id"),
            "institution": ObbInstitution.from_dict(obj["institution"]) if obj.get("institution") is not None else None,
            "institutionLoginId": obj.get("institutionLoginId"),
            "name": obj.get("name"),
            "realAccountNumberLast4": obj.get("realAccountNumberLast4"),
            "status": obj.get("status"),
            "type": obj.get("type")
        })
        return _obj


