# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pay_switch_details_payment_methods_inner import PaySwitchDetailsPaymentMethodsInner
from openapi_client.models.pay_switch_details_provider import PaySwitchDetailsProvider
from typing import Optional, Set
from typing_extensions import Self

class PaySwitchDetails(BaseModel):
    """
    PaySwitchDetails
    """ # noqa: E501
    customer_id: StrictStr = Field(description="A customer ID", alias="customerId")
    customer_type: StrictStr = Field(description="The type of Mastercard Open Finance customer (`active` or `testing`)", alias="customerType")
    switch_id: StrictStr = Field(description="Pay switch ID", alias="switchId")
    switch_status: StrictStr = Field(description="Pay switch status. Possible values include `processing`, `completed`, or `failed`.  * processing - The pay switch is currently being processed. * completed - The pay switch has been completed successfully. * failed - The pay switch has failed. Refer to failureReason for more details. ", alias="switchStatus")
    failure_reason: Optional[StrictStr] = Field(default=None, description="Pay switch failure reason. Possible values include - * account-lockout - The account is locked out, most likely the end user has had too many failed attempts. * account-unusable - The user's bank account is unusable for the selected product or use case. * bad-credentials - Either the username or password was incorrect. This is our most common fail reason. * connection-error - A network error occurred which caused the connection between our system and the bank/payroll system to be lost. * device-disconnected - The device used to start the task is no longer connected. * expired - The user's password has expired and they must create a new one. * no-data-found - No verify data was found for the user. * routing-number-not-supported - The account did not support the routing number entered. * session-timeout - The user's session timed out. * system-unavailable - The system was unavailable. For example, the site is undergoing maintenance or it is outside the window of scheduled availability for the site. * transaction-pending - There is an allocation already in progress and additional updates cannot be made at this time. * unknown-failure - We encountered an unexpected error. * user-abandon - The user was asked an MFA question, but did not answer the question. ", alias="failureReason")
    created_date: StrictStr = Field(description="Date and time in ISO 8601 format (YYYY-MM-DDThh:mm:ssZ) when deposit switch was performed", alias="createdDate")
    updated_date: StrictStr = Field(description="Date and time in ISO 8601 format (YYYY-MM-DDThh:mm:ssZ) when deposit switch status was updated", alias="updatedDate")
    authenticated: Optional[StrictBool] = Field(default=None, description="Indicates whether or not the pay switch task has successfully authenticated against the payroll system")
    provider: PaySwitchDetailsProvider
    payment_methods: List[PaySwitchDetailsPaymentMethodsInner] = Field(description="Pay switch payment details", alias="paymentMethods")
    __properties: ClassVar[List[str]] = ["customerId", "customerType", "switchId", "switchStatus", "failureReason", "createdDate", "updatedDate", "authenticated", "provider", "paymentMethods"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaySwitchDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of provider
        if self.provider:
            _dict['provider'] = self.provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment_methods (list)
        _items = []
        if self.payment_methods:
            for _item_payment_methods in self.payment_methods:
                if _item_payment_methods:
                    _items.append(_item_payment_methods.to_dict())
            _dict['paymentMethods'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaySwitchDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerId": obj.get("customerId"),
            "customerType": obj.get("customerType"),
            "switchId": obj.get("switchId"),
            "switchStatus": obj.get("switchStatus"),
            "failureReason": obj.get("failureReason"),
            "createdDate": obj.get("createdDate"),
            "updatedDate": obj.get("updatedDate"),
            "authenticated": obj.get("authenticated"),
            "provider": PaySwitchDetailsProvider.from_dict(obj["provider"]) if obj.get("provider") is not None else None,
            "paymentMethods": [PaySwitchDetailsPaymentMethodsInner.from_dict(_item) for _item in obj["paymentMethods"]] if obj.get("paymentMethods") is not None else None
        })
        return _obj


