# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.third_party_access_period import ThirdPartyAccessPeriod
from typing import Optional, Set
from typing_extensions import Self

class ThirdPartyAccessProduct(BaseModel):
    """
    Product for which access token to be generated
    """ # noqa: E501
    product: StrictStr = Field(description="Third party access token can be generated for the following product types:   * \"moneyTransferDetails\": Retrieve account details for money transfer * \"availableBalance\": Retrieves the latest cached available and cleared     account balances for an account. * \"availableBalanceLive\": Retrieves the available and cleared account balances live from the financial institution * \"accountOwner\": Retrieves names and addresses of the account owner from a financial institution. * \"paymentIndicator\": Get the Payment Success Indicator response, scoring the likelihood of payment settlement")
    payor_id: Optional[StrictStr] = Field(default=None, description="The Finicity Partner ID who should be billed when the Requester requests data from Finicity. If no value specified, then the Recipient will be billed.", alias="payorId")
    max_calls: Optional[StrictInt] = Field(default=None, description="Max number of calls to the consented product (consented API)", alias="maxCalls")
    account_id: StrictStr = Field(description="An account ID", alias="accountId")
    access_period: ThirdPartyAccessPeriod = Field(alias="accessPeriod")
    __properties: ClassVar[List[str]] = ["product", "payorId", "maxCalls", "accountId", "accessPeriod"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ThirdPartyAccessProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_period
        if self.access_period:
            _dict['accessPeriod'] = self.access_period.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ThirdPartyAccessProduct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "product": obj.get("product"),
            "payorId": obj.get("payorId"),
            "maxCalls": obj.get("maxCalls"),
            "accountId": obj.get("accountId"),
            "accessPeriod": ThirdPartyAccessPeriod.from_dict(obj["accessPeriod"]) if obj.get("accessPeriod") is not None else None
        })
        return _obj


