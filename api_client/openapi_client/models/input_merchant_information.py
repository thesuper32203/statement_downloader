# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class InputMerchantInformation(BaseModel):
    """
    InputMerchantInformation is an object containing merchant details in the request body.
    """ # noqa: E501
    merchant_descriptor: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="This is a concatenated combination of DE43 merchant name, DE43 merchant city and DE43 merchant state. Spaces should be excluded when concatenating these fields. If merchant state is not provided by the acquirer, use merchant name and city only. If the acquirer provides a country code instead of a state, use a combination of merchant name, city, and country.", alias="merchantDescriptor")
    name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=256)]] = Field(default=None, description="Name of the merchant.")
    line1: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=100)]] = Field(default=None, description="Line 1 of the transaction address.")
    city: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="City of the transaction.")
    state: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=3)]] = Field(default=None, description="State of the transaction.")
    postal_code: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=10)]] = Field(default=None, description="PostalCode of the transaction.", alias="postalCode")
    country: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=3)]] = Field(default=None, description="Country of the transaction.")
    phone_number: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=20)]] = Field(default=None, description="The phone number of the merchant", alias="phoneNumber")
    website: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=256)]] = Field(default=None, description="Website of the involved entity.")
    merchant_category_code: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=128)]] = Field(default=None, description="This code represents the category that a merchant location may be under and is supported by most payment providers.", alias="merchantCategoryCode")
    merchant_category_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=256)]] = Field(default=None, description="This is the name of the Merchant Category that accompanies the MCC Code which identifies the category a merchant falls under.", alias="merchantCategoryName")
    __properties: ClassVar[List[str]] = ["merchantDescriptor", "name", "line1", "city", "state", "postalCode", "country", "phoneNumber", "website", "merchantCategoryCode", "merchantCategoryName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InputMerchantInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InputMerchantInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "merchantDescriptor": obj.get("merchantDescriptor"),
            "name": obj.get("name"),
            "line1": obj.get("line1"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "postalCode": obj.get("postalCode"),
            "country": obj.get("country"),
            "phoneNumber": obj.get("phoneNumber"),
            "website": obj.get("website"),
            "merchantCategoryCode": obj.get("merchantCategoryCode"),
            "merchantCategoryName": obj.get("merchantCategoryName")
        })
        return _obj


