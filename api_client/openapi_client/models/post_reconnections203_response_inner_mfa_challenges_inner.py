# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from uuid import UUID
from typing import Optional, Set
from typing_extensions import Self

class PostReconnections203ResponseInnerMfaChallengesInner(BaseModel):
    """
    PostReconnections203ResponseInnerMfaChallengesInner
    """ # noqa: E501
    id: UUID = Field(description="The unique identifier for the MFA challenge")
    mfa_type: StrictStr = Field(description="The type of MFA challenge:   * TFA_TEXT:  This challenge type will present a single input box to the customer and is commonly used for things like One-Time Passwords.   * TFA_CHOICE: The TFA_CHOICE object represents a multiple choice question and answer selection.   * TFA_MULTI: The TFA_MULTI challenge type will present the customer with multiple images to select from.   * TFA_IMAGE: A TFA_IMAGE challenge will present a captcha-style image the customer will need to decipher.", alias="mfaType")
    prompt: StrictStr = Field(description="The MFA prompt text")
    choice_ids: List[UUID] = Field(description="An array of unique identifiers for the MFA choices", alias="choiceIds")
    __properties: ClassVar[List[str]] = ["id", "mfaType", "prompt", "choiceIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostReconnections203ResponseInnerMfaChallengesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostReconnections203ResponseInnerMfaChallengesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "mfaType": obj.get("mfaType"),
            "prompt": obj.get("prompt"),
            "choiceIds": obj.get("choiceIds")
        })
        return _obj


