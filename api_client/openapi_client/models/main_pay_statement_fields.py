# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class MainPayStatementFields(BaseModel):
    """
    MainPayStatementFields
    """ # noqa: E501
    pay_date: StrictInt = Field(description="Pay date for the pay period", alias="payDate")
    start_date: Optional[StrictInt] = Field(default=None, description="Start date for the pay period", alias="startDate")
    end_date: Optional[StrictInt] = Field(default=None, description="End date for the pay period", alias="endDate")
    pay_period_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sum of all hours worked each week for the pay period", alias="payPeriodHours")
    pay_frequency: Optional[StrictStr] = Field(default=None, description="The current pay frequency, or how often a regular pay check is distributed:  * `Daily`  * `Weekly`  * `Bi-Weekly`  * `Semi-Monthly`  * `Monthly`  * `Quarterly`  * `Semi-Annual`  * `Annual`  * `Every 2.6 wks`  * `Every 4 wks`  * `Every 5.2 wks`  * `Other` ", alias="payFrequency")
    pay_type: Optional[StrictStr] = Field(default=None, description="Current pay type:  * `Salary`  * `Hourly`  * `Daily` ", alias="payType")
    gross_pay_amount: Union[StrictFloat, StrictInt] = Field(description="Gross pay amount for the pay period", alias="grossPayAmount")
    gross_pay_amount_ytd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Year to date (YTD) gross pay amount at the time of payment", alias="grossPayAmountYTD")
    net_pay_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Net pay amount for a pay period", alias="netPayAmount")
    net_pay_amount_ytd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Year to date (YTD) net pay amount at the time of payment", alias="netPayAmountYTD")
    __properties: ClassVar[List[str]] = ["payDate", "startDate", "endDate", "payPeriodHours", "payFrequency", "payType", "grossPayAmount", "grossPayAmountYTD", "netPayAmount", "netPayAmountYTD"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MainPayStatementFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MainPayStatementFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payDate": obj.get("payDate"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "payPeriodHours": obj.get("payPeriodHours"),
            "payFrequency": obj.get("payFrequency"),
            "payType": obj.get("payType"),
            "grossPayAmount": obj.get("grossPayAmount"),
            "grossPayAmountYTD": obj.get("grossPayAmountYTD"),
            "netPayAmount": obj.get("netPayAmount"),
            "netPayAmountYTD": obj.get("netPayAmountYTD")
        })
        return _obj


