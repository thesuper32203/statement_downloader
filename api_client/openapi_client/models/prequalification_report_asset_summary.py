# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PrequalificationReportAssetSummary(BaseModel):
    """
    PrequalificationReportAssetSummary
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="The asset type: \"checking\", \"savings\", \"moneyMarket\", \"cd\", \"investment\"")
    available_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The available balance for the account", alias="availableBalance")
    current_balance: Union[StrictFloat, StrictInt] = Field(description="The current balance of the account", alias="currentBalance")
    two_month_average: Union[StrictFloat, StrictInt] = Field(description="The two month average daily balance of the account", alias="twoMonthAverage")
    six_month_average: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The six month average daily balance of the account", alias="sixMonthAverage")
    beginning_balance: Union[StrictFloat, StrictInt] = Field(description="The beginning balance of the account per the time period of the report", alias="beginningBalance")
    __properties: ClassVar[List[str]] = ["type", "availableBalance", "currentBalance", "twoMonthAverage", "sixMonthAverage", "beginningBalance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrequalificationReportAssetSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrequalificationReportAssetSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "availableBalance": obj.get("availableBalance"),
            "currentBalance": obj.get("currentBalance"),
            "twoMonthAverage": obj.get("twoMonthAverage"),
            "sixMonthAverage": obj.get("sixMonthAverage"),
            "beginningBalance": obj.get("beginningBalance")
        })
        return _obj


