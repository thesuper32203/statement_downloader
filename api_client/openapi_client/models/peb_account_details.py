# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_owner_holders import AccountOwnerHolders
from openapi_client.models.account_simple_details import AccountSimpleDetails
from openapi_client.models.available_balance_peb import AvailableBalancePEB
from openapi_client.models.field_error import FieldError
from openapi_client.models.payment_instruction_peb import PaymentInstructionPEB
from typing import Optional, Set
from typing_extensions import Self

class PEBAccountDetails(BaseModel):
    """
    PEBAccountDetails
    """ # noqa: E501
    id: StrictStr = Field(description="An account ID")
    real_account_number_last4: Optional[StrictStr] = Field(default=None, description="The last 4 digits of the ACH account number", alias="realAccountNumberLast4")
    institution_id: StrictStr = Field(description="The ID of a financial institution", alias="institutionId")
    institution_name: StrictStr = Field(description="The name of the institution", alias="institutionName")
    institution_login_id: StrictInt = Field(description="An institution login ID (from the account record), represented as a number", alias="institutionLoginId")
    account_details: Optional[AccountSimpleDetails] = Field(default=None, alias="accountDetails")
    balance_details: Optional[AvailableBalancePEB] = Field(default=None, alias="balanceDetails")
    account_identity: Optional[AccountOwnerHolders] = Field(default=None, alias="accountIdentity")
    payment_instruction: Optional[PaymentInstructionPEB] = Field(default=None, alias="paymentInstruction")
    errors: Optional[List[FieldError]] = Field(default=None, description="Lists of errors while getting the data")
    __properties: ClassVar[List[str]] = ["id", "realAccountNumberLast4", "institutionId", "institutionName", "institutionLoginId", "accountDetails", "balanceDetails", "accountIdentity", "paymentInstruction", "errors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PEBAccountDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account_details
        if self.account_details:
            _dict['accountDetails'] = self.account_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of balance_details
        if self.balance_details:
            _dict['balanceDetails'] = self.balance_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of account_identity
        if self.account_identity:
            _dict['accountIdentity'] = self.account_identity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_instruction
        if self.payment_instruction:
            _dict['paymentInstruction'] = self.payment_instruction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PEBAccountDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "realAccountNumberLast4": obj.get("realAccountNumberLast4"),
            "institutionId": obj.get("institutionId"),
            "institutionName": obj.get("institutionName"),
            "institutionLoginId": obj.get("institutionLoginId"),
            "accountDetails": AccountSimpleDetails.from_dict(obj["accountDetails"]) if obj.get("accountDetails") is not None else None,
            "balanceDetails": AvailableBalancePEB.from_dict(obj["balanceDetails"]) if obj.get("balanceDetails") is not None else None,
            "accountIdentity": AccountOwnerHolders.from_dict(obj["accountIdentity"]) if obj.get("accountIdentity") is not None else None,
            "paymentInstruction": PaymentInstructionPEB.from_dict(obj["paymentInstruction"]) if obj.get("paymentInstruction") is not None else None,
            "errors": [FieldError.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None
        })
        return _obj


