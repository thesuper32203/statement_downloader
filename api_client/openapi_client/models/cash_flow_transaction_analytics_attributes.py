# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.cash_flow_activity_deposits_credits import CashFlowActivityDepositsCredits
from openapi_client.models.cash_flow_activity_withdrawals_debits import CashFlowActivityWithdrawalsDebits
from openapi_client.models.cash_flow_num_weeks_zeros import CashFlowNumWeeksZeros
from openapi_client.models.cash_flow_transaction_analytics_attributes_last_transaction_date_inner import CashFlowTransactionAnalyticsAttributesLastTransactionDateInner
from openapi_client.models.obb_date_range_and_amount import ObbDateRangeAndAmount
from typing import Optional, Set
from typing_extensions import Self

class CashFlowTransactionAnalyticsAttributes(BaseModel):
    """
    Transaction Analytics Attributes
    """ # noqa: E501
    activity_deposits_credits_for_the_report_time_period: List[CashFlowActivityDepositsCredits] = Field(description="List of all deposit transactions posted to the account during the report period", alias="activityDepositsCreditsForTheReportTimePeriod")
    activity_withdrawals_debits_for_the_report_time_period: List[CashFlowActivityWithdrawalsDebits] = Field(description="List of all withdrawal transactions posted to the account during the report period", alias="activityWithdrawalsDebitsForTheReportTimePeriod")
    average_transaction_value_by_month_for_the_report_time_period: List[ObbDateRangeAndAmount] = Field(description="Average value of transactions during periods in the report. Values may be positive or negative", alias="averageTransactionValueByMonthForTheReportTimePeriod")
    historic_weeks_with_zero_transactions: Optional[CashFlowNumWeeksZeros] = Field(default=None, alias="historicWeeksWithZeroTransactions")
    last_transaction_date: Optional[List[CashFlowTransactionAnalyticsAttributesLastTransactionDateInner]] = Field(default=None, description="Latest posted transaction(s) to the account. May be more than one if they share the same timestamp", alias="lastTransactionDate")
    net_cash_flow_by_month_for_the_report_time_period: Optional[List[ObbDateRangeAndAmount]] = Field(default=None, description="Net cash flow for each month during the report period", alias="netCashFlowByMonthForTheReportTimePeriod")
    net_cash_flow_for_the_report_time_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Net cash flow during the report period (may be positive or negative)", alias="netCashFlowForTheReportTimePeriod")
    __properties: ClassVar[List[str]] = ["activityDepositsCreditsForTheReportTimePeriod", "activityWithdrawalsDebitsForTheReportTimePeriod", "averageTransactionValueByMonthForTheReportTimePeriod", "historicWeeksWithZeroTransactions", "lastTransactionDate", "netCashFlowByMonthForTheReportTimePeriod", "netCashFlowForTheReportTimePeriod"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CashFlowTransactionAnalyticsAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in activity_deposits_credits_for_the_report_time_period (list)
        _items = []
        if self.activity_deposits_credits_for_the_report_time_period:
            for _item_activity_deposits_credits_for_the_report_time_period in self.activity_deposits_credits_for_the_report_time_period:
                if _item_activity_deposits_credits_for_the_report_time_period:
                    _items.append(_item_activity_deposits_credits_for_the_report_time_period.to_dict())
            _dict['activityDepositsCreditsForTheReportTimePeriod'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in activity_withdrawals_debits_for_the_report_time_period (list)
        _items = []
        if self.activity_withdrawals_debits_for_the_report_time_period:
            for _item_activity_withdrawals_debits_for_the_report_time_period in self.activity_withdrawals_debits_for_the_report_time_period:
                if _item_activity_withdrawals_debits_for_the_report_time_period:
                    _items.append(_item_activity_withdrawals_debits_for_the_report_time_period.to_dict())
            _dict['activityWithdrawalsDebitsForTheReportTimePeriod'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in average_transaction_value_by_month_for_the_report_time_period (list)
        _items = []
        if self.average_transaction_value_by_month_for_the_report_time_period:
            for _item_average_transaction_value_by_month_for_the_report_time_period in self.average_transaction_value_by_month_for_the_report_time_period:
                if _item_average_transaction_value_by_month_for_the_report_time_period:
                    _items.append(_item_average_transaction_value_by_month_for_the_report_time_period.to_dict())
            _dict['averageTransactionValueByMonthForTheReportTimePeriod'] = _items
        # override the default output from pydantic by calling `to_dict()` of historic_weeks_with_zero_transactions
        if self.historic_weeks_with_zero_transactions:
            _dict['historicWeeksWithZeroTransactions'] = self.historic_weeks_with_zero_transactions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in last_transaction_date (list)
        _items = []
        if self.last_transaction_date:
            for _item_last_transaction_date in self.last_transaction_date:
                if _item_last_transaction_date:
                    _items.append(_item_last_transaction_date.to_dict())
            _dict['lastTransactionDate'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in net_cash_flow_by_month_for_the_report_time_period (list)
        _items = []
        if self.net_cash_flow_by_month_for_the_report_time_period:
            for _item_net_cash_flow_by_month_for_the_report_time_period in self.net_cash_flow_by_month_for_the_report_time_period:
                if _item_net_cash_flow_by_month_for_the_report_time_period:
                    _items.append(_item_net_cash_flow_by_month_for_the_report_time_period.to_dict())
            _dict['netCashFlowByMonthForTheReportTimePeriod'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CashFlowTransactionAnalyticsAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activityDepositsCreditsForTheReportTimePeriod": [CashFlowActivityDepositsCredits.from_dict(_item) for _item in obj["activityDepositsCreditsForTheReportTimePeriod"]] if obj.get("activityDepositsCreditsForTheReportTimePeriod") is not None else None,
            "activityWithdrawalsDebitsForTheReportTimePeriod": [CashFlowActivityWithdrawalsDebits.from_dict(_item) for _item in obj["activityWithdrawalsDebitsForTheReportTimePeriod"]] if obj.get("activityWithdrawalsDebitsForTheReportTimePeriod") is not None else None,
            "averageTransactionValueByMonthForTheReportTimePeriod": [ObbDateRangeAndAmount.from_dict(_item) for _item in obj["averageTransactionValueByMonthForTheReportTimePeriod"]] if obj.get("averageTransactionValueByMonthForTheReportTimePeriod") is not None else None,
            "historicWeeksWithZeroTransactions": CashFlowNumWeeksZeros.from_dict(obj["historicWeeksWithZeroTransactions"]) if obj.get("historicWeeksWithZeroTransactions") is not None else None,
            "lastTransactionDate": [CashFlowTransactionAnalyticsAttributesLastTransactionDateInner.from_dict(_item) for _item in obj["lastTransactionDate"]] if obj.get("lastTransactionDate") is not None else None,
            "netCashFlowByMonthForTheReportTimePeriod": [ObbDateRangeAndAmount.from_dict(_item) for _item in obj["netCashFlowByMonthForTheReportTimePeriod"]] if obj.get("netCashFlowByMonthForTheReportTimePeriod") is not None else None,
            "netCashFlowForTheReportTimePeriod": obj.get("netCashFlowForTheReportTimePeriod")
        })
        return _obj


