# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.birthday import Birthday
from openapi_client.models.consumer_end_user import ConsumerEndUser
from typing import Optional, Set
from typing_extensions import Self

class ConsumerUpdate(BaseModel):
    """
    ConsumerUpdate
    """ # noqa: E501
    first_name: Optional[StrictStr] = Field(default=None, description="The first name of the account holder", alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, description="The last name of the account holder", alias="lastName")
    address: Optional[StrictStr] = Field(default=None, description="A street address")
    city: Optional[StrictStr] = Field(default=None, description="City")
    state: Optional[StrictStr] = Field(default=None, description="State")
    zip: Optional[StrictStr] = Field(default=None, description="A ZIP code")
    phone: Optional[StrictStr] = Field(default=None, description="A phone number (max length 15).")
    ssn: Optional[StrictStr] = Field(default=None, description="A full SSN with or without hyphens")
    birthday: Optional[Birthday] = None
    email: Optional[StrictStr] = Field(default=None, description="An email address")
    suffix: Optional[StrictStr] = Field(default=None, description="A generational or academic suffix")
    end_user: Optional[ConsumerEndUser] = Field(default=None, alias="endUser")
    __properties: ClassVar[List[str]] = ["firstName", "lastName", "address", "city", "state", "zip", "phone", "ssn", "birthday", "email", "suffix", "endUser"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsumerUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of birthday
        if self.birthday:
            _dict['birthday'] = self.birthday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_user
        if self.end_user:
            _dict['endUser'] = self.end_user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsumerUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "address": obj.get("address"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "zip": obj.get("zip"),
            "phone": obj.get("phone"),
            "ssn": obj.get("ssn"),
            "birthday": Birthday.from_dict(obj["birthday"]) if obj.get("birthday") is not None else None,
            "email": obj.get("email"),
            "suffix": obj.get("suffix"),
            "endUser": ConsumerEndUser.from_dict(obj["endUser"]) if obj.get("endUser") is not None else None
        })
        return _obj


