# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.payroll_employer_address import PayrollEmployerAddress
from typing import Optional, Set
from typing_extensions import Self

class PayrollEmploymentRecord(BaseModel):
    """
    PayrollEmploymentRecord
    """ # noqa: E501
    employer_name: StrictStr = Field(description="Name of the employer as stated by the employer in the payroll system", alias="employerName")
    legal_entity_id: Optional[StrictStr] = Field(default=None, description="Employer identification number (EIN)", alias="legalEntityId")
    original_hire_date: Optional[StrictInt] = Field(default=None, description="The original hired date of an employee at the company", alias="originalHireDate")
    latest_hire_date: Optional[StrictInt] = Field(default=None, description="If an employee leaves the company and returns later, then the employer states the latest hire date at the company", alias="latestHireDate")
    latest_pay_period_end_date: Optional[StrictInt] = Field(default=None, description="The most recent pay periodâ€™s end date.", alias="latestPayPeriodEndDate")
    latest_pay_date: Optional[StrictInt] = Field(default=None, description="The most recent pay date from an employer", alias="latestPayDate")
    days_since_last_pay: Optional[StrictInt] = Field(default=None, description="The number of days since an employee was last paid", alias="daysSinceLastPay")
    number_pay_cadence_without_pay: Optional[StrictInt] = Field(default=None, description="The number of pay cadences an employee has not been paid; determined by the pay frequency", alias="numberPayCadenceWithoutPay")
    employment_end_date: Optional[StrictInt] = Field(default=None, description="The date an employee ended their employment at the company", alias="employmentEndDate")
    employment_duration: Optional[StrictStr] = Field(default=None, description="The length of time an employee has been employed with that employer in ISO 8601 format (e.g. P1Y6M0D)", alias="employmentDuration")
    employer_address: Optional[List[PayrollEmployerAddress]] = Field(default=None, description="Array of addresses", alias="employerAddress")
    employment_status_code: StrictStr = Field(description="'Status codes: `A` - Active, `NLE` - No Longer Employed, `L` - Leave, `O` - Other', `I` - Inactive, `U` - Unknown'", alias="employmentStatusCode")
    employment_status_name: StrictStr = Field(description="'Status name: `Active`, `No Longer Employed`, `Leave` or `Other`, `Inactive`, or `Unknown`'", alias="employmentStatusName")
    derived_employment_status: Optional[StrictBool] = Field(default=None, description="Describes the employment status - it will be true if it is not directly stated by the employer, and false otherwise", alias="derivedEmploymentStatus")
    work_level_code: Optional[StrictStr] = Field(default=None, description="The abbreviate code for the employment level names (workLevelName) that we receive from the employer", alias="workLevelCode")
    work_level_name: Optional[StrictStr] = Field(default=None, description="The employment level name is whatever we receive from the employer, such as full time, part time, temp, contractor, and more", alias="workLevelName")
    work_level_status: StrictStr = Field(description="The categorized work level status. Enumerations are:  * `Temporary`  * `Seasonal`  * `Retired`  * `Student`  * `Full Time`  * `Part Time`  * `Unspecified`  This is a new field, currently enabled only for testing reports. It will be added for all reports in August 2021. ", alias="workLevelStatus")
    position_title: Optional[StrictStr] = Field(default=None, description="Employee job title", alias="positionTitle")
    position_duration: Optional[StrictStr] = Field(default=None, description="The length of time an employee has been employed at their current or latest position for this employment in ISO 8601 format (eg P1Y6M0D)", alias="positionDuration")
    __properties: ClassVar[List[str]] = ["employerName", "legalEntityId", "originalHireDate", "latestHireDate", "latestPayPeriodEndDate", "latestPayDate", "daysSinceLastPay", "numberPayCadenceWithoutPay", "employmentEndDate", "employmentDuration", "employerAddress", "employmentStatusCode", "employmentStatusName", "derivedEmploymentStatus", "workLevelCode", "workLevelName", "workLevelStatus", "positionTitle", "positionDuration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayrollEmploymentRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in employer_address (list)
        _items = []
        if self.employer_address:
            for _item_employer_address in self.employer_address:
                if _item_employer_address:
                    _items.append(_item_employer_address.to_dict())
            _dict['employerAddress'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayrollEmploymentRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "employerName": obj.get("employerName"),
            "legalEntityId": obj.get("legalEntityId"),
            "originalHireDate": obj.get("originalHireDate"),
            "latestHireDate": obj.get("latestHireDate"),
            "latestPayPeriodEndDate": obj.get("latestPayPeriodEndDate"),
            "latestPayDate": obj.get("latestPayDate"),
            "daysSinceLastPay": obj.get("daysSinceLastPay"),
            "numberPayCadenceWithoutPay": obj.get("numberPayCadenceWithoutPay"),
            "employmentEndDate": obj.get("employmentEndDate"),
            "employmentDuration": obj.get("employmentDuration"),
            "employerAddress": [PayrollEmployerAddress.from_dict(_item) for _item in obj["employerAddress"]] if obj.get("employerAddress") is not None else None,
            "employmentStatusCode": obj.get("employmentStatusCode"),
            "employmentStatusName": obj.get("employmentStatusName"),
            "derivedEmploymentStatus": obj.get("derivedEmploymentStatus"),
            "workLevelCode": obj.get("workLevelCode"),
            "workLevelName": obj.get("workLevelName"),
            "workLevelStatus": obj.get("workLevelStatus"),
            "positionTitle": obj.get("positionTitle"),
            "positionDuration": obj.get("positionDuration")
        })
        return _obj


