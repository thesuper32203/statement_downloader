# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ObbReportHeader(BaseModel):
    """
    Details about the business the report is generated for and metadata about the report
    """ # noqa: E501
    business_address: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Business address line 1", alias="businessAddress")
    business_city: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Business address city", alias="businessCity")
    business_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Name of the business", alias="businessName")
    business_state: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Business address state", alias="businessState")
    business_zip: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Business address zip", alias="businessZip")
    reference_number: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Partner-provided reference number", alias="referenceNumber")
    report_date: Annotated[str, Field(min_length=25, strict=True, max_length=25)] = Field(description="Date the report was requested", alias="reportDate")
    report_id: Annotated[str, Field(min_length=0, strict=True, max_length=255)] = Field(description="Generated unique report ID", alias="reportId")
    __properties: ClassVar[List[str]] = ["businessAddress", "businessCity", "businessName", "businessState", "businessZip", "referenceNumber", "reportDate", "reportId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObbReportHeader from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObbReportHeader from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "businessAddress": obj.get("businessAddress"),
            "businessCity": obj.get("businessCity"),
            "businessName": obj.get("businessName"),
            "businessState": obj.get("businessState"),
            "businessZip": obj.get("businessZip"),
            "referenceNumber": obj.get("referenceNumber"),
            "reportDate": obj.get("reportDate"),
            "reportId": obj.get("reportId")
        })
        return _obj


