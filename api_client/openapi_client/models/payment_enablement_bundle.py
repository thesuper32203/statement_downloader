# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.peb_account_details import PEBAccountDetails
from typing import Optional, Set
from typing_extensions import Self

class PaymentEnablementBundle(BaseModel):
    """
    PaymentEnablementBundle
    """ # noqa: E501
    customer_id: StrictStr = Field(description="A customer ID. See Add Customer API for how to create a customer ID.", alias="customerId")
    error_count: StrictInt = Field(description="The number of errors or failures that have occurred while processing the API request. If all the requested parameters are returned successfully then this value will be 0. Any value other than zero indicates failures.", alias="errorCount")
    account_count: Optional[StrictInt] = Field(default=None, description="Total number of accounts returned.", alias="accountCount")
    account_identity_success_count: Optional[StrictInt] = Field(default=None, description="Total number of successful sections returned when requesting accountIdentity. If not provided, value will be 0.", alias="accountIdentitySuccessCount")
    balance_details_success_count: Optional[StrictInt] = Field(default=None, description="Total number of successful sections returned when requesting balanceDetails. If not provided, value will be 0.", alias="balanceDetailsSuccessCount")
    payment_instruction_success_count: Optional[StrictInt] = Field(default=None, description="Total number of successful sections returned when requesting paymentInstruction. If not provided, value will be 0.", alias="paymentInstructionSuccessCount")
    accounts: List[PEBAccountDetails] = Field(description="List of Account Details")
    __properties: ClassVar[List[str]] = ["customerId", "errorCount", "accountCount", "accountIdentitySuccessCount", "balanceDetailsSuccessCount", "paymentInstructionSuccessCount", "accounts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentEnablementBundle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item_accounts in self.accounts:
                if _item_accounts:
                    _items.append(_item_accounts.to_dict())
            _dict['accounts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentEnablementBundle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerId": obj.get("customerId"),
            "errorCount": obj.get("errorCount"),
            "accountCount": obj.get("accountCount"),
            "accountIdentitySuccessCount": obj.get("accountIdentitySuccessCount"),
            "balanceDetailsSuccessCount": obj.get("balanceDetailsSuccessCount"),
            "paymentInstructionSuccessCount": obj.get("paymentInstructionSuccessCount"),
            "accounts": [PEBAccountDetails.from_dict(_item) for _item in obj["accounts"]] if obj.get("accounts") is not None else None
        })
        return _obj


