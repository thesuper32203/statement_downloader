# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.categorization import Categorization
from typing import Optional, Set
from typing_extensions import Self

class Transaction(BaseModel):
    """
    Transaction
    """ # noqa: E501
    id: StrictInt = Field(description="A transaction ID")
    amount: Union[StrictFloat, StrictInt] = Field(description="The total amount of the transaction. Transactions for deposits are positive values, withdrawals and debits are negative values.")
    account_id: StrictInt = Field(description="An account ID represented as a number", alias="accountId")
    customer_id: StrictInt = Field(description="A customer ID represented as a number. See Add Customer API for how to create a customer ID.", alias="customerId")
    status: StrictStr = Field(description="One of \"active\", \"pending\", or \"shadow\" (see [Transaction Status](https://developer.mastercard.com/open-banking-us/documentation/products/manage/transaction-data/#transaction-status))")
    description: StrictStr = Field(description="The description value is from the financial institution (FI), often known as the payee. The value \"No description provided by institution\" is returned when the FI doesn't provide one")
    memo: Optional[StrictStr] = Field(default=None, description="The institution must provide either a description, a memo, or both. We recommended concatenating the two fields into a single value.")
    type: Optional[StrictStr] = Field(default=None, description="If provided by the institution, the following values may be returned in the field of a record: * \"atm\"  * \"cash\"  * \"check\"  * \"credit\"  * \"debit\"  * \"deposit\"  * \"directDebit\"  * \"directDeposit\"  * \"dividend\"  * \"fee\"  * \"interest\"  * \"other\"  * \"payment\"  * \"pointOfSale\"  * \"repeatPayment\"  * \"serviceCharge\"  * \"transfer\"")
    transaction_date: Optional[StrictInt] = Field(default=None, description="A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it occurred. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="transactionDate")
    posted_date: Optional[StrictInt] = Field(default=None, description="A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was posted or cleared by the institution. This value isn't required for student loan transaction data. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="postedDate")
    created_date: StrictInt = Field(description="A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was added to our platform. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="createdDate")
    first_effective_date: Optional[StrictInt] = Field(default=None, description="A date in Unix epoch time (in seconds). Represents the first timestamp of the transaction recorded in the `effectiveDate` field. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="firstEffectiveDate")
    effective_date: Optional[StrictInt] = Field(default=None, description="A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it became effective on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="effectiveDate")
    option_expire_date: Optional[StrictInt] = Field(default=None, description="A date in Unix epoch time (in seconds). Represents the timestamp of the transaction expiration date when it became expires on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="optionExpireDate")
    check_num: Optional[StrictStr] = Field(default=None, description="The check number of the transaction", alias="checkNum")
    escrow_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The portion of the transaction allocated to escrow", alias="escrowAmount")
    fee_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The portion of the overall transaction amount applied to fees", alias="feeAmount")
    suspense_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Temporarily hold funds if you overpay or underpay your monthly payment", alias="suspenseAmount")
    interest_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The portion of the transaction allocated to interest", alias="interestAmount")
    principal_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The portion of the transaction allocated to principal", alias="principalAmount")
    option_strike_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The strike price of the option contract", alias="optionStrikePrice")
    unit_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of units (individual shares) in the transaction", alias="unitQuantity")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Share price for the investment unit: stocks, mutual funds, ETFs", alias="unitPrice")
    categorization: Optional[Categorization] = None
    running_balance_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The ending balance after the transaction was posted", alias="runningBalanceAmount")
    subaccount_security_type: Optional[StrictStr] = Field(default=None, description="The type of sub account the funds came from", alias="subaccountSecurityType")
    commission_amount: Optional[StrictInt] = Field(default=None, description="Transaction commission", alias="commissionAmount")
    ticker: Optional[StrictStr] = Field(default=None, description="Ticker symbol for the investment related to the transaction")
    investment_transaction_type: Optional[StrictStr] = Field(default=None, description="Keywords in the `description` and `memo` fields were used to translate investment transactions into these types.  Possible values: * \"cancel\"  * \"purchaseToClose\"  * \"purchaseToCover\"  * \"contribution\"  * \"optionExercise\"  * \"optionExpiration\"  * \"fee\"  * \"soldToClose\"  * \"soldToOpen\"  * \"split\"  * \"transfer\"  * \"returnOfCapital\"  * \"income\"  * \"purchased\"  * \"sold\"  * \"dividendReinvest\"  * \"tax\"  * \"dividend\"  * \"reinvestOfIncome\"  * \"interest\"  * \"deposit\"  * \"otherInfo\"", alias="investmentTransactionType")
    taxes_amount: Optional[StrictInt] = Field(default=None, description="Taxes applicable to the investment trade", alias="taxesAmount")
    currency_symbol: Optional[StrictStr] = Field(default=None, description="If the foreign amount value is present then this is the currency code of that foreign amount", alias="currencySymbol")
    income_type: Optional[StrictStr] = Field(default=None, description="Capital gains applied in short, long, or miscellaneous terms for tax purposes", alias="incomeType")
    split_denominator: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Denominator of the stock split for the transaction", alias="splitDenominator")
    split_numerator: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Numerator of the stock split for the transaction", alias="splitNumerator")
    shares_per_contract: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Shares per contract of the underlying stock option", alias="sharesPerContract")
    sub_account_fund: Optional[StrictStr] = Field(default=None, description="The sub account where the funds came from", alias="subAccountFund")
    security_id: Optional[StrictStr] = Field(default=None, description="The security ID of the transaction", alias="securityId")
    security_id_type: Optional[StrictStr] = Field(default=None, description="The security type. This field is related to the `securityId` field. Possible values: * \"CUSIP\"  * \"ISIN\"  * \"SEDOL\"  * \"SICC\"  * \"VALOR\"  * \"WKN\"", alias="securityIdType")
    __properties: ClassVar[List[str]] = ["id", "amount", "accountId", "customerId", "status", "description", "memo", "type", "transactionDate", "postedDate", "createdDate", "firstEffectiveDate", "effectiveDate", "optionExpireDate", "checkNum", "escrowAmount", "feeAmount", "suspenseAmount", "interestAmount", "principalAmount", "optionStrikePrice", "unitQuantity", "unitPrice", "categorization", "runningBalanceAmount", "subaccountSecurityType", "commissionAmount", "ticker", "investmentTransactionType", "taxesAmount", "currencySymbol", "incomeType", "splitDenominator", "splitNumerator", "sharesPerContract", "subAccountFund", "securityId", "securityIdType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of categorization
        if self.categorization:
            _dict['categorization'] = self.categorization.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "amount": obj.get("amount"),
            "accountId": obj.get("accountId"),
            "customerId": obj.get("customerId"),
            "status": obj.get("status"),
            "description": obj.get("description"),
            "memo": obj.get("memo"),
            "type": obj.get("type"),
            "transactionDate": obj.get("transactionDate"),
            "postedDate": obj.get("postedDate"),
            "createdDate": obj.get("createdDate"),
            "firstEffectiveDate": obj.get("firstEffectiveDate"),
            "effectiveDate": obj.get("effectiveDate"),
            "optionExpireDate": obj.get("optionExpireDate"),
            "checkNum": obj.get("checkNum"),
            "escrowAmount": obj.get("escrowAmount"),
            "feeAmount": obj.get("feeAmount"),
            "suspenseAmount": obj.get("suspenseAmount"),
            "interestAmount": obj.get("interestAmount"),
            "principalAmount": obj.get("principalAmount"),
            "optionStrikePrice": obj.get("optionStrikePrice"),
            "unitQuantity": obj.get("unitQuantity"),
            "unitPrice": obj.get("unitPrice"),
            "categorization": Categorization.from_dict(obj["categorization"]) if obj.get("categorization") is not None else None,
            "runningBalanceAmount": obj.get("runningBalanceAmount"),
            "subaccountSecurityType": obj.get("subaccountSecurityType"),
            "commissionAmount": obj.get("commissionAmount"),
            "ticker": obj.get("ticker"),
            "investmentTransactionType": obj.get("investmentTransactionType"),
            "taxesAmount": obj.get("taxesAmount"),
            "currencySymbol": obj.get("currencySymbol"),
            "incomeType": obj.get("incomeType"),
            "splitDenominator": obj.get("splitDenominator"),
            "splitNumerator": obj.get("splitNumerator"),
            "sharesPerContract": obj.get("sharesPerContract"),
            "subAccountFund": obj.get("subAccountFund"),
            "securityId": obj.get("securityId"),
            "securityIdType": obj.get("securityIdType")
        })
        return _obj


