# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from openapi_client.models.institution import Institution
from typing import Optional, Set
from typing_extensions import Self

class Institutions(BaseModel):
    """
    A list of financial institutions from the Get Institutions API
    """ # noqa: E501
    found: StrictInt = Field(description="The total number of results matching search criteria")
    displaying: StrictInt = Field(description="The number of results returned")
    more_available: StrictBool = Field(description="If the value of `moreAvailable` is \"true\", you can retrieve the next page of results by increasing the value of the start parameter in your next request:\"...&start=6&limit=5\"", alias="moreAvailable")
    created_date: StrictInt = Field(description="A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="createdDate")
    institutions: Annotated[List[Institution], Field(min_length=0, max_length=1000)] = Field(description="A list of institutions")
    __properties: ClassVar[List[str]] = ["found", "displaying", "moreAvailable", "createdDate", "institutions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Institutions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in institutions (list)
        _items = []
        if self.institutions:
            for _item_institutions in self.institutions:
                if _item_institutions:
                    _items.append(_item_institutions.to_dict())
            _dict['institutions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Institutions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "found": obj.get("found"),
            "displaying": obj.get("displaying"),
            "moreAvailable": obj.get("moreAvailable"),
            "createdDate": obj.get("createdDate"),
            "institutions": [Institution.from_dict(_item) for _item in obj["institutions"]] if obj.get("institutions") is not None else None
        })
        return _obj


