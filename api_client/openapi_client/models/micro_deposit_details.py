# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MicroDepositDetails(BaseModel):
    """
    MicroDepositDetails
    """ # noqa: E501
    status: Optional[StrictStr] = Field(default=None, description="The following values may be returned in the field of a status:  * \"Pending\" : Micro entries not yet deposited to customer's account * \"Completed\": Micro entries deposited to customer's account * \"Verified\": Micro entries got successfully verified * \"Rejected\": Micro entries got rejected due to some reason * \"Returned\": Micro entries got returned back * \"Failed\": Micro entries got failed due to some reason * \"Expired\": Micro entries got expired as they remains unverified for certain defined days")
    status_description: Optional[StrictStr] = Field(default=None, description="Micro entries status description", alias="statusDescription")
    creation_date: Optional[StrictStr] = Field(default=None, description="A date-time without time zone", alias="creationDate")
    routing_number: Optional[StrictStr] = Field(default=None, description="Routing number of receiving bank", alias="routingNumber")
    account_number_last4: Optional[StrictStr] = Field(default=None, description="The last 4 digits of the ACH account number", alias="accountNumberLast4")
    auto_verified_account: Optional[StrictInt] = Field(default=None, description="This field stores an ID for the linked bank account to verify the microdeposits. It will have a value populated only when the microdeposits are auto verified successfully via account aggregation, otherwise this field will not be present.", alias="autoVerifiedAccount")
    rail_type: Optional[StrictStr] = Field(default=None, description="The Rail (ACH / RTP) used for initiating bank deposit(s).", alias="railType")
    __properties: ClassVar[List[str]] = ["status", "statusDescription", "creationDate", "routingNumber", "accountNumberLast4", "autoVerifiedAccount", "railType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MicroDepositDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MicroDepositDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "statusDescription": obj.get("statusDescription"),
            "creationDate": obj.get("creationDate"),
            "routingNumber": obj.get("routingNumber"),
            "accountNumberLast4": obj.get("accountNumberLast4"),
            "autoVerifiedAccount": obj.get("autoVerifiedAccount"),
            "railType": obj.get("railType")
        })
        return _obj


