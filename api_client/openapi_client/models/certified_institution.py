# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.child_institution import ChildInstitution
from typing import Optional, Set
from typing_extensions import Self

class CertifiedInstitution(BaseModel):
    """
    CertifiedInstitution
    """ # noqa: E501
    id: StrictInt = Field(description="The ID of a financial institution, represented as a number")
    rssd: Optional[StrictInt] = Field(default=None, description="The RSSD ID is a unique identifier assigned to financial institutions by the Federal Reserve. While the length of the RSSD ID varies by institution, it cannot exceed 10 numerical digits.")
    name: StrictStr = Field(description="The name of the institution")
    trans_agg: StrictBool = Field(description="\"true\": The institution is certified for the Transaction Aggregation product \"false\": The institution is decertified for the Transaction Aggregation product", alias="transAgg")
    ach: StrictBool = Field(description="\"true\": The institution is certified for the ACH product \"false\": The institution is decertified for the ACH product")
    state_agg: StrictBool = Field(description="\"true\": The institution is certified for the Statement Aggregation product \"false\": The institution is decertified for the Statement Aggregation product", alias="stateAgg")
    voi: StrictBool = Field(description="\"true\": The institution is certified for the VOI product \"false\": The institution is decertified for the VOI product")
    voa: StrictBool = Field(description="\"true\": The institution is certified for the VOA product \"false\": The institution is decertified for the VOA product")
    aha: StrictBool = Field(description="\"true\": The institution is certified for the Account History Aggregation product \"false\": The institution is decertified for the Account History Aggregation product")
    avail_balance: StrictBool = Field(description="\"true\": The institution is certified for the Account Balance Check (ABC) product \"false\": The institution is decertified for the Account Balance Check (ABC) product", alias="availBalance")
    account_owner: StrictBool = Field(description="\"true\": The institution is certified for the Account Owner product \"false\": The institution is decertified for the Account Owner product", alias="accountOwner")
    student_loan_data: StrictBool = Field(description="\"true\": The institution is certified for the Student Loan Data product  \"false\": The institution is decertified for the Student Loan Data product", alias="studentLoanData")
    loan_payment_details: StrictBool = Field(description="\"true\": The institution is certified for the Loan Payment Detail product  \"false\": The institution is decertified for the Loan Payment Detail product", alias="loanPaymentDetails")
    child_institutions: Optional[Annotated[List[ChildInstitution], Field(min_length=0)]] = Field(default=None, description="An array of child financial institutions", alias="childInstitutions")
    __properties: ClassVar[List[str]] = ["id", "rssd", "name", "transAgg", "ach", "stateAgg", "voi", "voa", "aha", "availBalance", "accountOwner", "studentLoanData", "loanPaymentDetails", "childInstitutions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertifiedInstitution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in child_institutions (list)
        _items = []
        if self.child_institutions:
            for _item_child_institutions in self.child_institutions:
                if _item_child_institutions:
                    _items.append(_item_child_institutions.to_dict())
            _dict['childInstitutions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertifiedInstitution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "rssd": obj.get("rssd"),
            "name": obj.get("name"),
            "transAgg": obj.get("transAgg"),
            "ach": obj.get("ach"),
            "stateAgg": obj.get("stateAgg"),
            "voi": obj.get("voi"),
            "voa": obj.get("voa"),
            "aha": obj.get("aha"),
            "availBalance": obj.get("availBalance"),
            "accountOwner": obj.get("accountOwner"),
            "studentLoanData": obj.get("studentLoanData"),
            "loanPaymentDetails": obj.get("loanPaymentDetails"),
            "childInstitutions": [ChildInstitution.from_dict(_item) for _item in obj["childInstitutions"]] if obj.get("childInstitutions") is not None else None
        })
        return _obj


