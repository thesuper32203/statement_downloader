# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.annual_income import AnnualIncome
from openapi_client.models.direct_pay_statements import DirectPayStatements
from openapi_client.models.monthly_income import MonthlyIncome
from typing import Optional, Set
from typing_extensions import Self

class PayrollVOIEIncomeRecord(BaseModel):
    """
    PayrollVOIEIncomeRecord
    """ # noqa: E501
    pay_frequency: Optional[StrictStr] = Field(default=None, description="The current pay frequency or how often a regular pay check is:  * `Daily`  * `Weekly`  * `Bi-Weekly`  * `Semi-Monthly`  * `Monthly`  * `Quarterly`  * `Semi-Annual`  * `Annual`  * `Every 2.6 wks`  * `Every 4 wks`  * `Every 5.2 wks`  * `Other`  * `Unknown` ", alias="payFrequency")
    pay_type: Optional[StrictStr] = Field(default=None, description="The current pay type:  * `Salary`  * `Hourly`  * `Daily` ", alias="payType")
    base_pay_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The current base or regular pay rate. Please use in conjunction with the `basePayRateUnit` field.", alias="basePayRate")
    base_pay_rate_unit: Optional[StrictStr] = Field(default=None, description="Unit for the base pay rate:  * `Hourly`  * `Daily`  * `Weekly`  * `Bi-Weekly`  * `Semi-Monthly`  * `Monthly`  * `Quarterly`  * `Semi-Annual`  * `Annual`  * `Every 2.6 wks`  * `Every 5.2 wks`  * `Other` ", alias="basePayRateUnit")
    oldest_pay_statement_available: Optional[StrictStr] = Field(default=None, description="The date of the oldest direct pay statement available from the payroll source, as measured by the oldest `payDate` from all the pay statements delivered.", alias="oldestPayStatementAvailable")
    annual_income: Optional[List[AnnualIncome]] = Field(default=None, description="The annual pay for the current year, through prior year 2 (as available)  This is a mandatory field only for VOIE-payroll report type.", alias="annualIncome")
    monthly_income: Optional[MonthlyIncome] = Field(default=None, alias="monthlyIncome")
    direct_pay_statements: Optional[List[DirectPayStatements]] = Field(default=None, description="An array of payment histories for each available paycheck", alias="directPayStatements")
    __properties: ClassVar[List[str]] = ["payFrequency", "payType", "basePayRate", "basePayRateUnit", "oldestPayStatementAvailable", "annualIncome", "monthlyIncome", "directPayStatements"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayrollVOIEIncomeRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in annual_income (list)
        _items = []
        if self.annual_income:
            for _item_annual_income in self.annual_income:
                if _item_annual_income:
                    _items.append(_item_annual_income.to_dict())
            _dict['annualIncome'] = _items
        # override the default output from pydantic by calling `to_dict()` of monthly_income
        if self.monthly_income:
            _dict['monthlyIncome'] = self.monthly_income.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in direct_pay_statements (list)
        _items = []
        if self.direct_pay_statements:
            for _item_direct_pay_statements in self.direct_pay_statements:
                if _item_direct_pay_statements:
                    _items.append(_item_direct_pay_statements.to_dict())
            _dict['directPayStatements'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayrollVOIEIncomeRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payFrequency": obj.get("payFrequency"),
            "payType": obj.get("payType"),
            "basePayRate": obj.get("basePayRate"),
            "basePayRateUnit": obj.get("basePayRateUnit"),
            "oldestPayStatementAvailable": obj.get("oldestPayStatementAvailable"),
            "annualIncome": [AnnualIncome.from_dict(_item) for _item in obj["annualIncome"]] if obj.get("annualIncome") is not None else None,
            "monthlyIncome": MonthlyIncome.from_dict(obj["monthlyIncome"]) if obj.get("monthlyIncome") is not None else None,
            "directPayStatements": [DirectPayStatements.from_dict(_item) for _item in obj["directPayStatements"]] if obj.get("directPayStatements") is not None else None
        })
        return _obj


