# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from openapi_client.models.state_attribute import StateAttribute
from openapi_client.models.stream_model import StreamModel
from openapi_client.models.transactional_attribute import TransactionalAttribute
from typing import Optional, Set
from typing_extensions import Self

class CustomerAnalytics(BaseModel):
    """
    Analytics and attributes generated at a customer level
    """ # noqa: E501
    transactional_attributes: List[TransactionalAttribute] = Field(description="List of calculated transactional attributes", alias="transactionalAttributes")
    state_attributes: List[StateAttribute] = Field(description="List of calculated state attributes", alias="stateAttributes")
    streams: List[StreamModel] = Field(description="List of generated streams")
    __properties: ClassVar[List[str]] = ["transactionalAttributes", "stateAttributes", "streams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerAnalytics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in transactional_attributes (list)
        _items = []
        if self.transactional_attributes:
            for _item_transactional_attributes in self.transactional_attributes:
                if _item_transactional_attributes:
                    _items.append(_item_transactional_attributes.to_dict())
            _dict['transactionalAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in state_attributes (list)
        _items = []
        if self.state_attributes:
            for _item_state_attributes in self.state_attributes:
                if _item_state_attributes:
                    _items.append(_item_state_attributes.to_dict())
            _dict['stateAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in streams (list)
        _items = []
        if self.streams:
            for _item_streams in self.streams:
                if _item_streams:
                    _items.append(_item_streams.to_dict())
            _dict['streams'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerAnalytics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transactionalAttributes": [TransactionalAttribute.from_dict(_item) for _item in obj["transactionalAttributes"]] if obj.get("transactionalAttributes") is not None else None,
            "stateAttributes": [StateAttribute.from_dict(_item) for _item in obj["stateAttributes"]] if obj.get("stateAttributes") is not None else None,
            "streams": [StreamModel.from_dict(_item) for _item in obj["streams"]] if obj.get("streams") is not None else None
        })
        return _obj


