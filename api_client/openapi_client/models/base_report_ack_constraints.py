# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from openapi_client.models.analytics_report_constraints_out import AnalyticsReportConstraintsOut
from openapi_client.models.cash_flow_report_constraints_out import CashFlowReportConstraintsOut
from openapi_client.models.pay_statement_report_constraints import PayStatementReportConstraints
from openapi_client.models.payroll_report_constraints_out import PayrollReportConstraintsOut
from openapi_client.models.prequalification_report_constraints_out import PrequalificationReportConstraintsOut
from openapi_client.models.statement_report_constraints import StatementReportConstraints
from openapi_client.models.transactions_report_constraints_out import TransactionsReportConstraintsOut
from openapi_client.models.voa_report_constraints_out import VOAReportConstraintsOut
from openapi_client.models.voa_with_income_report_constraints_out import VOAWithIncomeReportConstraintsOut
from openapi_client.models.voe_transactions_report_constraints_out import VOETransactionsReportConstraintsOut
from openapi_client.models.voi_report_constraints_out import VOIReportConstraintsOut
from openapi_client.models.voie_report_constraints import VOIEReportConstraints
from openapi_client.models.voie_with_tx_verify_report_constraints_out import VOIEWithTXVerifyReportConstraintsOut
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

BASEREPORTACKCONSTRAINTS_ANY_OF_SCHEMAS = ["AnalyticsReportConstraintsOut", "CashFlowReportConstraintsOut", "PayStatementReportConstraints", "PayrollReportConstraintsOut", "PrequalificationReportConstraintsOut", "StatementReportConstraints", "TransactionsReportConstraintsOut", "VOAReportConstraintsOut", "VOAWithIncomeReportConstraintsOut", "VOETransactionsReportConstraintsOut", "VOIEReportConstraints", "VOIEWithTXVerifyReportConstraintsOut", "VOIReportConstraintsOut"]

class BaseReportAckConstraints(BaseModel):
    """
    BaseReportAckConstraints
    """

    # data type: AnalyticsReportConstraintsOut
    anyof_schema_1_validator: Optional[AnalyticsReportConstraintsOut] = None
    # data type: CashFlowReportConstraintsOut
    anyof_schema_2_validator: Optional[CashFlowReportConstraintsOut] = None
    # data type: VOIEWithTXVerifyReportConstraintsOut
    anyof_schema_3_validator: Optional[VOIEWithTXVerifyReportConstraintsOut] = None
    # data type: VOIEReportConstraints
    anyof_schema_4_validator: Optional[VOIEReportConstraints] = None
    # data type: StatementReportConstraints
    anyof_schema_5_validator: Optional[StatementReportConstraints] = None
    # data type: TransactionsReportConstraintsOut
    anyof_schema_6_validator: Optional[TransactionsReportConstraintsOut] = None
    # data type: VOAReportConstraintsOut
    anyof_schema_7_validator: Optional[VOAReportConstraintsOut] = None
    # data type: VOAWithIncomeReportConstraintsOut
    anyof_schema_8_validator: Optional[VOAWithIncomeReportConstraintsOut] = None
    # data type: PrequalificationReportConstraintsOut
    anyof_schema_9_validator: Optional[PrequalificationReportConstraintsOut] = None
    # data type: VOIReportConstraintsOut
    anyof_schema_10_validator: Optional[VOIReportConstraintsOut] = None
    # data type: PayrollReportConstraintsOut
    anyof_schema_11_validator: Optional[PayrollReportConstraintsOut] = None
    # data type: VOETransactionsReportConstraintsOut
    anyof_schema_12_validator: Optional[VOETransactionsReportConstraintsOut] = None
    # data type: PayStatementReportConstraints
    anyof_schema_13_validator: Optional[PayStatementReportConstraints] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[AnalyticsReportConstraintsOut, CashFlowReportConstraintsOut, PayStatementReportConstraints, PayrollReportConstraintsOut, PrequalificationReportConstraintsOut, StatementReportConstraints, TransactionsReportConstraintsOut, VOAReportConstraintsOut, VOAWithIncomeReportConstraintsOut, VOETransactionsReportConstraintsOut, VOIEReportConstraints, VOIEWithTXVerifyReportConstraintsOut, VOIReportConstraintsOut]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "AnalyticsReportConstraintsOut", "CashFlowReportConstraintsOut", "PayStatementReportConstraints", "PayrollReportConstraintsOut", "PrequalificationReportConstraintsOut", "StatementReportConstraints", "TransactionsReportConstraintsOut", "VOAReportConstraintsOut", "VOAWithIncomeReportConstraintsOut", "VOETransactionsReportConstraintsOut", "VOIEReportConstraints", "VOIEWithTXVerifyReportConstraintsOut", "VOIReportConstraintsOut" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = BaseReportAckConstraints.model_construct()
        error_messages = []
        # validate data type: AnalyticsReportConstraintsOut
        if not isinstance(v, AnalyticsReportConstraintsOut):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnalyticsReportConstraintsOut`")
        else:
            return v

        # validate data type: CashFlowReportConstraintsOut
        if not isinstance(v, CashFlowReportConstraintsOut):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CashFlowReportConstraintsOut`")
        else:
            return v

        # validate data type: VOIEWithTXVerifyReportConstraintsOut
        if not isinstance(v, VOIEWithTXVerifyReportConstraintsOut):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VOIEWithTXVerifyReportConstraintsOut`")
        else:
            return v

        # validate data type: VOIEReportConstraints
        if not isinstance(v, VOIEReportConstraints):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VOIEReportConstraints`")
        else:
            return v

        # validate data type: StatementReportConstraints
        if not isinstance(v, StatementReportConstraints):
            error_messages.append(f"Error! Input type `{type(v)}` is not `StatementReportConstraints`")
        else:
            return v

        # validate data type: TransactionsReportConstraintsOut
        if not isinstance(v, TransactionsReportConstraintsOut):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TransactionsReportConstraintsOut`")
        else:
            return v

        # validate data type: VOAReportConstraintsOut
        if not isinstance(v, VOAReportConstraintsOut):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VOAReportConstraintsOut`")
        else:
            return v

        # validate data type: VOAWithIncomeReportConstraintsOut
        if not isinstance(v, VOAWithIncomeReportConstraintsOut):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VOAWithIncomeReportConstraintsOut`")
        else:
            return v

        # validate data type: PrequalificationReportConstraintsOut
        if not isinstance(v, PrequalificationReportConstraintsOut):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrequalificationReportConstraintsOut`")
        else:
            return v

        # validate data type: VOIReportConstraintsOut
        if not isinstance(v, VOIReportConstraintsOut):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VOIReportConstraintsOut`")
        else:
            return v

        # validate data type: PayrollReportConstraintsOut
        if not isinstance(v, PayrollReportConstraintsOut):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PayrollReportConstraintsOut`")
        else:
            return v

        # validate data type: VOETransactionsReportConstraintsOut
        if not isinstance(v, VOETransactionsReportConstraintsOut):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VOETransactionsReportConstraintsOut`")
        else:
            return v

        # validate data type: PayStatementReportConstraints
        if not isinstance(v, PayStatementReportConstraints):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PayStatementReportConstraints`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in BaseReportAckConstraints with anyOf schemas: AnalyticsReportConstraintsOut, CashFlowReportConstraintsOut, PayStatementReportConstraints, PayrollReportConstraintsOut, PrequalificationReportConstraintsOut, StatementReportConstraints, TransactionsReportConstraintsOut, VOAReportConstraintsOut, VOAWithIncomeReportConstraintsOut, VOETransactionsReportConstraintsOut, VOIEReportConstraints, VOIEWithTXVerifyReportConstraintsOut, VOIReportConstraintsOut. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[AnalyticsReportConstraintsOut] = None
        try:
            instance.actual_instance = AnalyticsReportConstraintsOut.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[CashFlowReportConstraintsOut] = None
        try:
            instance.actual_instance = CashFlowReportConstraintsOut.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[VOIEWithTXVerifyReportConstraintsOut] = None
        try:
            instance.actual_instance = VOIEWithTXVerifyReportConstraintsOut.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[VOIEReportConstraints] = None
        try:
            instance.actual_instance = VOIEReportConstraints.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[StatementReportConstraints] = None
        try:
            instance.actual_instance = StatementReportConstraints.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[TransactionsReportConstraintsOut] = None
        try:
            instance.actual_instance = TransactionsReportConstraintsOut.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[VOAReportConstraintsOut] = None
        try:
            instance.actual_instance = VOAReportConstraintsOut.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[VOAWithIncomeReportConstraintsOut] = None
        try:
            instance.actual_instance = VOAWithIncomeReportConstraintsOut.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[PrequalificationReportConstraintsOut] = None
        try:
            instance.actual_instance = PrequalificationReportConstraintsOut.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[VOIReportConstraintsOut] = None
        try:
            instance.actual_instance = VOIReportConstraintsOut.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[PayrollReportConstraintsOut] = None
        try:
            instance.actual_instance = PayrollReportConstraintsOut.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[VOETransactionsReportConstraintsOut] = None
        try:
            instance.actual_instance = VOETransactionsReportConstraintsOut.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_13_validator: Optional[PayStatementReportConstraints] = None
        try:
            instance.actual_instance = PayStatementReportConstraints.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BaseReportAckConstraints with anyOf schemas: AnalyticsReportConstraintsOut, CashFlowReportConstraintsOut, PayStatementReportConstraints, PayrollReportConstraintsOut, PrequalificationReportConstraintsOut, StatementReportConstraints, TransactionsReportConstraintsOut, VOAReportConstraintsOut, VOAWithIncomeReportConstraintsOut, VOETransactionsReportConstraintsOut, VOIEReportConstraints, VOIEWithTXVerifyReportConstraintsOut, VOIReportConstraintsOut. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AnalyticsReportConstraintsOut, CashFlowReportConstraintsOut, PayStatementReportConstraints, PayrollReportConstraintsOut, PrequalificationReportConstraintsOut, StatementReportConstraints, TransactionsReportConstraintsOut, VOAReportConstraintsOut, VOAWithIncomeReportConstraintsOut, VOETransactionsReportConstraintsOut, VOIEReportConstraints, VOIEWithTXVerifyReportConstraintsOut, VOIReportConstraintsOut]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


