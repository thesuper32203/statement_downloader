# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.branding import Branding
from openapi_client.models.institution_address import InstitutionAddress
from openapi_client.models.institutions_with_routing_number_country_codes_inner import InstitutionsWithRoutingNumberCountryCodesInner
from typing import Optional, Set
from typing_extensions import Self

class InstitutionsWithRoutingNumber(BaseModel):
    """
    List of institutions with matching routing numbers
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="The ID of a financial institution, represented as a number")
    name: Optional[StrictStr] = Field(default=None, description="The name of the institution")
    trans_agg: Optional[StrictBool] = Field(default=None, description="\"true\": The institution is certified for the Transaction Aggregation product \"false\": The institution is decertified for the Transaction Aggregation product", alias="transAgg")
    ach: Optional[StrictBool] = Field(default=None, description="\"true\": The institution is certified for the ACH product \"false\": The institution is decertified for the ACH product")
    state_agg: Optional[StrictBool] = Field(default=None, description="\"true\": The institution is certified for the Statement Aggregation product \"false\": The institution is decertified for the Statement Aggregation product", alias="stateAgg")
    voi: Optional[StrictBool] = Field(default=None, description="\"true\": The institution is certified for the VOI product \"false\": The institution is decertified for the VOI product")
    voa: Optional[StrictBool] = Field(default=None, description="\"true\": The institution is certified for the VOA product \"false\": The institution is decertified for the VOA product")
    aha: Optional[StrictBool] = Field(default=None, description="\"true\": The institution is certified for the Account History Aggregation product \"false\": The institution is decertified for the Account History Aggregation product")
    avail_balance: Optional[StrictBool] = Field(default=None, description="\"true\": The institution is certified for the Account Balance Check (ABC) product \"false\": The institution is decertified for the Account Balance Check (ABC) product", alias="availBalance")
    account_owner: Optional[StrictBool] = Field(default=None, description="\"true\": The institution is certified for the Account Owner product \"false\": The institution is decertified for the Account Owner product", alias="accountOwner")
    student_loan_data: Optional[StrictBool] = Field(default=None, description="\"true\": The institution is certified for the Student Loan Data product  \"false\": The institution is decertified for the Student Loan Data product", alias="studentLoanData")
    loan_payment_details: Optional[StrictBool] = Field(default=None, description="\"true\": The institution is certified for the Loan Payment Detail product  \"false\": The institution is decertified for the Loan Payment Detail product", alias="loanPaymentDetails")
    payment_initiation: Optional[StrictBool] = Field(default=False, description="Institution connection is certified for paymentInitiation", alias="paymentInitiation")
    bill_pay_data: Optional[StrictBool] = Field(default=False, description="billPayData is certified", alias="billPayData")
    liability_data: Optional[StrictBool] = Field(default=False, description="liabilityData is certified", alias="liabilityData")
    account_type_description: Optional[StrictStr] = Field(default=None, description="Values: Banking, Investments, Credit Cards/Accounts, Workplace Retirement, Mortgages and Loans, Insurance", alias="accountTypeDescription")
    phone: Optional[StrictStr] = Field(default=None, description="A phone number (max length 15).")
    url_home_app: Optional[StrictStr] = Field(default=None, description="The URL of the institution's primary home page", alias="urlHomeApp")
    url_logon_app: Optional[StrictStr] = Field(default=None, description="The URL of the institution's login page", alias="urlLogonApp")
    oauth_enabled: Optional[StrictBool] = Field(default=None, description="\"true\": The institution is an OAuth connection  \"false\": The institution isn't an OAuth connection", alias="oauthEnabled")
    url_forgot_password: Optional[StrictStr] = Field(default=None, description="Institution's forgot password page", alias="urlForgotPassword")
    url_online_registration: Optional[StrictStr] = Field(default=None, description="Institution's signup page", alias="urlOnlineRegistration")
    var_class: Optional[StrictStr] = Field(default=None, description="Institution's class", alias="class")
    special_text: Optional[StrictStr] = Field(default=None, description="Special instructions given to customers for login", alias="specialText")
    time_zone: Optional[StrictStr] = Field(default=None, description="The time zone of the institution.", alias="timeZone")
    special_instructions: Optional[List[StrictStr]] = Field(default=None, description="Instructions given to the customer before they are sent to the institution website to login for OAuth institutions.  Note: this helps the customer to provide the proper permission for data needed for the application.", alias="specialInstructions")
    special_instutions_title: Optional[StrictStr] = Field(default=None, description="The title of the special instructions, if one exists or is required.", alias="specialInstutionsTitle")
    address: Optional[InstitutionAddress] = None
    currency: Optional[StrictStr] = Field(default=None, description="A currency code")
    email: Optional[StrictStr] = Field(default=None, description="An email address")
    status: Optional[StrictStr] = Field(default=None, description="Status for the institution: \"online\", \"offline\", \"maintenance\", \"testing\", \"beta\", \"validated\", \"migrating\"")
    new_institution_id: Optional[StrictInt] = Field(default=None, description="The ID of a financial institution, represented as a number", alias="newInstitutionId")
    branding: Optional[Branding] = None
    display_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="A version of the institution connection name that is more user friendly", alias="displayName")
    oauth_institution_id: Optional[StrictInt] = Field(default=None, description="The ID of a financial institution, represented as a number", alias="oauthInstitutionId")
    country_codes: Optional[List[InstitutionsWithRoutingNumberCountryCodesInner]] = Field(default=None, alias="countryCodes")
    overall_status_temp: Optional[StrictStr] = Field(default=None, description="Beta Data - Can be ignored. Should use `status` field instead. The overall status for the institution:   - online - Connection is active, financial institution is available and functioning   - offline - Connection is inactive due to an issue. Financial institution is not available in Data Connect search   - maintenance - Financial institution is undergoing planned maintenance and is not available at this time   - testing (Limited Availability)  - A new connection with the financial institution is still undergoing development and is only available to some select partners   - investigating - Connection is new and/or under monitoring due to instability", alias="overallStatusTemp")
    trans_agg_status: Optional[StrictStr] = Field(default=None, description="Beta Data - Can be ignored. Should use `status` field instead. The production status for the Transaction Aggregation product for the institution.   - online - product is functioning correctly for the institution   - investigating - product is degraded for the institution and is being investigated   - offline - product is offline for the institution", alias="transAgg_status")
    voa_status: Optional[StrictStr] = Field(default=None, description="Beta Data - Can be ignored. Should use `status` field instead. The production status for the VOA  product for the institution.   - online - product is functioning correctly for the institution   - investigating - product is degraded for the institution and is being investigated   - offline - product is offline for the institution")
    voi_status: Optional[StrictStr] = Field(default=None, description="Beta Data - Can be ignored. Should use `status` field instead. The production status for the VOI product for the institution.   - online - product is functioning correctly for the institution   - investigating - product is degraded for the institution and is being investigated   - offline - product is offline for the institution")
    state_agg_status: Optional[StrictStr] = Field(default=None, description="Beta Data - Can be ignored. Should use `status` field instead. The production status for the Statement Aggregation product for the institution.   - online - product is functioning correctly for the institution   - investigating - product is degraded for the institution and is being investigated   - offline - product is offline for the institution", alias="stateAgg_status")
    ach_status: Optional[StrictStr] = Field(default=None, description="Beta Data - Can be ignored. Should use `status` field instead. The production status for the ACH product for the institution.   - online - product is functioning correctly for the institution   - investigating - product is degraded for the institution and is being investigated   - offline - product is offline for the institution")
    aha_status: Optional[StrictStr] = Field(default=None, description="Beta Data - Can be ignored. Should use `status` field instead. The production status for the Account History Aggregation product for the institution.   - online - product is functioning correctly for the institution   - investigating - product is degraded for the institution and is being investigated   - offline - product is offline for the institution")
    __properties: ClassVar[List[str]] = ["id", "name", "transAgg", "ach", "stateAgg", "voi", "voa", "aha", "availBalance", "accountOwner", "studentLoanData", "loanPaymentDetails", "paymentInitiation", "billPayData", "liabilityData", "accountTypeDescription", "phone", "urlHomeApp", "urlLogonApp", "oauthEnabled", "urlForgotPassword", "urlOnlineRegistration", "class", "specialText", "timeZone", "specialInstructions", "specialInstutionsTitle", "address", "currency", "email", "status", "newInstitutionId", "branding", "displayName", "oauthInstitutionId", "countryCodes", "overallStatusTemp", "transAgg_status", "voa_status", "voi_status", "stateAgg_status", "ach_status", "aha_status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstitutionsWithRoutingNumber from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of branding
        if self.branding:
            _dict['branding'] = self.branding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in country_codes (list)
        _items = []
        if self.country_codes:
            for _item_country_codes in self.country_codes:
                if _item_country_codes:
                    _items.append(_item_country_codes.to_dict())
            _dict['countryCodes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstitutionsWithRoutingNumber from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "transAgg": obj.get("transAgg"),
            "ach": obj.get("ach"),
            "stateAgg": obj.get("stateAgg"),
            "voi": obj.get("voi"),
            "voa": obj.get("voa"),
            "aha": obj.get("aha"),
            "availBalance": obj.get("availBalance"),
            "accountOwner": obj.get("accountOwner"),
            "studentLoanData": obj.get("studentLoanData"),
            "loanPaymentDetails": obj.get("loanPaymentDetails"),
            "paymentInitiation": obj.get("paymentInitiation") if obj.get("paymentInitiation") is not None else False,
            "billPayData": obj.get("billPayData") if obj.get("billPayData") is not None else False,
            "liabilityData": obj.get("liabilityData") if obj.get("liabilityData") is not None else False,
            "accountTypeDescription": obj.get("accountTypeDescription"),
            "phone": obj.get("phone"),
            "urlHomeApp": obj.get("urlHomeApp"),
            "urlLogonApp": obj.get("urlLogonApp"),
            "oauthEnabled": obj.get("oauthEnabled"),
            "urlForgotPassword": obj.get("urlForgotPassword"),
            "urlOnlineRegistration": obj.get("urlOnlineRegistration"),
            "class": obj.get("class"),
            "specialText": obj.get("specialText"),
            "timeZone": obj.get("timeZone"),
            "specialInstructions": obj.get("specialInstructions"),
            "specialInstutionsTitle": obj.get("specialInstutionsTitle"),
            "address": InstitutionAddress.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "currency": obj.get("currency"),
            "email": obj.get("email"),
            "status": obj.get("status"),
            "newInstitutionId": obj.get("newInstitutionId"),
            "branding": Branding.from_dict(obj["branding"]) if obj.get("branding") is not None else None,
            "displayName": obj.get("displayName"),
            "oauthInstitutionId": obj.get("oauthInstitutionId"),
            "countryCodes": [InstitutionsWithRoutingNumberCountryCodesInner.from_dict(_item) for _item in obj["countryCodes"]] if obj.get("countryCodes") is not None else None,
            "overallStatusTemp": obj.get("overallStatusTemp"),
            "transAgg_status": obj.get("transAgg_status"),
            "voa_status": obj.get("voa_status"),
            "voi_status": obj.get("voi_status"),
            "stateAgg_status": obj.get("stateAgg_status"),
            "ach_status": obj.get("ach_status"),
            "aha_status": obj.get("aha_status")
        })
        return _obj


