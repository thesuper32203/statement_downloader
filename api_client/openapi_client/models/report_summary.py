# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ReportSummary(BaseModel):
    """
    ReportSummary
    """ # noqa: E501
    id: StrictStr = Field(description="A report ID")
    request_id: StrictStr = Field(description="Finicity indicator to track all activity associated with this report", alias="requestId")
    requester_name: StrictStr = Field(description="Name of a Finicity partner", alias="requesterName")
    created_date: StrictInt = Field(description="A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="createdDate")
    consumer_id: Optional[StrictStr] = Field(default=None, description="A consumer ID. See Create Consumer API for how to create a consumer ID.", alias="consumerId")
    consumer_ssn: Optional[StrictStr] = Field(default=None, description="Last 4 digits of a SSN", alias="consumerSsn")
    type: StrictStr = Field(description="A report type. Possible values:  * `voi`  * `voa`  * `voaHistory`  * `history`  * `voieTxVerify`  * `voieWithReport`  * `voieWithInterview`  * `voieWithStatement`  * `paystatement`  * `preQualVoa`  * `assetSummary`  * `voie`  * `transactions`  * `statement`  * `voiePayroll`  * `voeTransactions`  * `farpbfnoncra`  * `voePayroll`  * `cfrp`  * `cfrb`  * `barpcra`  * `barpnoncra`  * `barbcra`  * `barbftc`  * `barbnoncra`  * `cfrpcra`  * `cfrpnoncra`  * `cracfrbcra`  * `cfrbnoncra`  * `cfrbftc`  * `phrbcra`  * `phrbnoncra`  * `phrbftc` ")
    status: StrictStr = Field(description="A report generation status. Possible values:  * `inProgress`  * `success`  * `failure` ")
    __properties: ClassVar[List[str]] = ["id", "requestId", "requesterName", "createdDate", "consumerId", "consumerSsn", "type", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "requestId": obj.get("requestId"),
            "requesterName": obj.get("requesterName"),
            "createdDate": obj.get("createdDate"),
            "consumerId": obj.get("consumerId"),
            "consumerSsn": obj.get("consumerSsn"),
            "type": obj.get("type"),
            "status": obj.get("status")
        })
        return _obj


