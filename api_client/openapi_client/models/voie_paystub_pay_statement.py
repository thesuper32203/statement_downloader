# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.direct_deposit import DirectDeposit
from openapi_client.models.employee import Employee
from openapi_client.models.employer import Employer
from openapi_client.models.pay_stat import PayStat
from openapi_client.models.paystub_monthly_income_record import PaystubMonthlyIncomeRecord
from typing import Optional, Set
from typing_extensions import Self

class VOIEPaystubPayStatement(BaseModel):
    """
    VOIEPaystubPayStatement
    """ # noqa: E501
    pay_period: Optional[StrictStr] = Field(default=None, description="The pay period of the pay statement", alias="payPeriod")
    billable: StrictBool = Field(description="This will display true if the pay statement is billable. If a pay statement has been digitized previously, this will display as false as it will not be billable.")
    asset_id: StrictStr = Field(description="The asset ID of the stored pay statement", alias="assetId")
    pay_date: Optional[StrictInt] = Field(default=None, description="The listed pay date for the pay statement", alias="payDate")
    start_date: Optional[StrictInt] = Field(default=None, description="The beginning of the pay period", alias="startDate")
    end_date: Optional[StrictInt] = Field(default=None, description="The end of the pay period", alias="endDate")
    net_pay_current: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total pay after deductions for the employee for the current pay period", alias="netPayCurrent")
    net_pay_ytd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total accumulation of pay after deductions for the employee for the current pay year", alias="netPayYTD")
    gross_pay_current: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total pay before deductions for the employee for the current pay period", alias="grossPayCurrent")
    gross_pay_ytd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total accumulation of pay before deductions for the employee for the current pay year", alias="grossPayYTD")
    payroll_provider: Optional[StrictStr] = Field(default=None, description="The payroll provider extracted from the pay statement", alias="payrollProvider")
    employer: Employer
    employee: Employee
    pay_stat: List[PayStat] = Field(description="Information pertaining to the earnings on the pay statement", alias="payStat")
    direct_deposits: Optional[List[DirectDeposit]] = Field(default=None, description="Information pertaining to the direct deposits on the pay statement", alias="directDeposits")
    institutions: List[StrictStr] = Field(description="Not populated for the voieWithStatement style of paystub report. For the VOIE - Paystub (with TXVerify) reports this would include details of the financial institution accounts and income streams with matching transactions to the pay statement.")
    error_code: Optional[StrictInt] = Field(default=None, description="Error code for the asset", alias="errorCode")
    error_message: Optional[StrictStr] = Field(default=None, description="Error message for the asset", alias="errorMessage")
    monthly_income: PaystubMonthlyIncomeRecord = Field(alias="monthlyIncome")
    __properties: ClassVar[List[str]] = ["payPeriod", "billable", "assetId", "payDate", "startDate", "endDate", "netPayCurrent", "netPayYTD", "grossPayCurrent", "grossPayYTD", "payrollProvider", "employer", "employee", "payStat", "directDeposits", "institutions", "errorCode", "errorMessage", "monthlyIncome"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VOIEPaystubPayStatement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of employer
        if self.employer:
            _dict['employer'] = self.employer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of employee
        if self.employee:
            _dict['employee'] = self.employee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pay_stat (list)
        _items = []
        if self.pay_stat:
            for _item_pay_stat in self.pay_stat:
                if _item_pay_stat:
                    _items.append(_item_pay_stat.to_dict())
            _dict['payStat'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in direct_deposits (list)
        _items = []
        if self.direct_deposits:
            for _item_direct_deposits in self.direct_deposits:
                if _item_direct_deposits:
                    _items.append(_item_direct_deposits.to_dict())
            _dict['directDeposits'] = _items
        # override the default output from pydantic by calling `to_dict()` of monthly_income
        if self.monthly_income:
            _dict['monthlyIncome'] = self.monthly_income.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VOIEPaystubPayStatement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payPeriod": obj.get("payPeriod"),
            "billable": obj.get("billable"),
            "assetId": obj.get("assetId"),
            "payDate": obj.get("payDate"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "netPayCurrent": obj.get("netPayCurrent"),
            "netPayYTD": obj.get("netPayYTD"),
            "grossPayCurrent": obj.get("grossPayCurrent"),
            "grossPayYTD": obj.get("grossPayYTD"),
            "payrollProvider": obj.get("payrollProvider"),
            "employer": Employer.from_dict(obj["employer"]) if obj.get("employer") is not None else None,
            "employee": Employee.from_dict(obj["employee"]) if obj.get("employee") is not None else None,
            "payStat": [PayStat.from_dict(_item) for _item in obj["payStat"]] if obj.get("payStat") is not None else None,
            "directDeposits": [DirectDeposit.from_dict(_item) for _item in obj["directDeposits"]] if obj.get("directDeposits") is not None else None,
            "institutions": obj.get("institutions"),
            "errorCode": obj.get("errorCode"),
            "errorMessage": obj.get("errorMessage"),
            "monthlyIncome": PaystubMonthlyIncomeRecord.from_dict(obj["monthlyIncome"]) if obj.get("monthlyIncome") is not None else None
        })
        return _obj


