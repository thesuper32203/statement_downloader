# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class LoanPaymentDetailsLoan(BaseModel):
    """
    Loan details
    """ # noqa: E501
    account_id: StrictStr = Field(description="An account ID", alias="accountId")
    loan_number: StrictStr = Field(description="Institution's ID of the Student Loan", alias="loanNumber")
    loan_payment_number: StrictStr = Field(description="The payment number given by the institution. This number is typically for manual payments. This is not an ACH payment number.", alias="loanPaymentNumber")
    loan_payment_address: StrictStr = Field(description="The payment address to which send manual payments should be sent", alias="loanPaymentAddress")
    loan_future_payoff_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The payoff amount for the loan", alias="loanFuturePayoffAmount")
    loan_future_payoff_date: Optional[datetime] = Field(default=None, description="The date to which the \"Future Payoff Amount\" applies", alias="loanFuturePayoffDate")
    __properties: ClassVar[List[str]] = ["accountId", "loanNumber", "loanPaymentNumber", "loanPaymentAddress", "loanFuturePayoffAmount", "loanFuturePayoffDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoanPaymentDetailsLoan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoanPaymentDetailsLoan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "loanNumber": obj.get("loanNumber"),
            "loanPaymentNumber": obj.get("loanPaymentNumber"),
            "loanPaymentAddress": obj.get("loanPaymentAddress"),
            "loanFuturePayoffAmount": obj.get("loanFuturePayoffAmount"),
            "loanFuturePayoffDate": obj.get("loanFuturePayoffDate")
        })
        return _obj


