# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.nsf_return_risk import NsfReturnRisk
from openapi_client.models.payment_success_indicators_transaction import PaymentSuccessIndicatorsTransaction
from openapi_client.models.unauthorized_return_risk import UnauthorizedReturnRisk
from typing import Optional, Set
from typing_extensions import Self

class PaymentSuccessIndicators(BaseModel):
    """
    A Payment Success Indicators score response, indicating how likely a transaction is to be returned. NSF and Unauthorized return risks are provided if the score has a status of SUCCESS, or the captured errors are listed if the score has a status of FAILURE.
    """ # noqa: E501
    pay_request_id: Annotated[str, Field(min_length=18, strict=True, max_length=18)] = Field(description="Unique identifier of the Payments request", alias="payRequestId")
    status: StrictStr = Field(description="Current status of the score generation. Possible values are \"IN PROGRESS\", \"SUCCESS\", \"FAILURE\"")
    customer_id: StrictStr = Field(description="A customer ID. See Add Customer API for how to create a customer ID.", alias="customerId")
    account_id: StrictStr = Field(description="An account ID", alias="accountId")
    request_date: date = Field(description="The ISO 8601 format (YYYY-MM-DD) date of the request.", alias="requestDate")
    transaction: PaymentSuccessIndicatorsTransaction
    nsf_return_risk: Optional[NsfReturnRisk] = Field(default=None, alias="nsfReturnRisk")
    unauthorized_return_risk: Optional[UnauthorizedReturnRisk] = Field(default=None, alias="unauthorizedReturnRisk")
    __properties: ClassVar[List[str]] = ["payRequestId", "status", "customerId", "accountId", "requestDate", "transaction", "nsfReturnRisk", "unauthorizedReturnRisk"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentSuccessIndicators from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of transaction
        if self.transaction:
            _dict['transaction'] = self.transaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nsf_return_risk
        if self.nsf_return_risk:
            _dict['nsfReturnRisk'] = self.nsf_return_risk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unauthorized_return_risk
        if self.unauthorized_return_risk:
            _dict['unauthorizedReturnRisk'] = self.unauthorized_return_risk.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentSuccessIndicators from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payRequestId": obj.get("payRequestId"),
            "status": obj.get("status"),
            "customerId": obj.get("customerId"),
            "accountId": obj.get("accountId"),
            "requestDate": obj.get("requestDate"),
            "transaction": PaymentSuccessIndicatorsTransaction.from_dict(obj["transaction"]) if obj.get("transaction") is not None else None,
            "nsfReturnRisk": NsfReturnRisk.from_dict(obj["nsfReturnRisk"]) if obj.get("nsfReturnRisk") is not None else None,
            "unauthorizedReturnRisk": UnauthorizedReturnRisk.from_dict(obj["unauthorizedReturnRisk"]) if obj.get("unauthorizedReturnRisk") is not None else None
        })
        return _obj


