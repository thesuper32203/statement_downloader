# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DeviceScores(BaseModel):
    """
    Scores that were calculated by analyzing the provided device data.
    """ # noqa: E501
    device_risk_factor: Optional[Annotated[int, Field(le=5, strict=True, ge=1)]] = Field(default=None, description="The calculated risk factor is represented numerically using a range from 1 (no/low risk) to 5 (high risk). Each numerical value and it's associated risk representation is shown below.   * `1` - Represents a no or low risk request.   * `2` - Represents a low risk request.   * `3` - Represents a medium risk request.   * `4` - Represents a high risk request.   * `5` - Represents a very high risk request.  The calculated risk factor is typically used to identify scenarios where a service provider may want to introduce consumer friction on the authorization process to validate the identity of the consumer. Example usage by a service provider may be to implement controls such as multifactor authentication for calculated risk factors of `3` or `4` and request blocking for risk factors of `5`.", alias="deviceRiskFactor")
    device_insight_factor: Optional[Annotated[int, Field(le=5, strict=True, ge=0)]] = Field(default=None, description="The calculated device risk is represented numerically using a range from 1 (no/low risk) to 5 (high risk). Each numerical value and it's associated risk representation is shown below.   * `1` - Represents a no or low risk request.   * `2` - Represents a low risk request.   * `3` - Represents a medium risk request.   * `4` - Represents a high risk request.   * `5` - Represents a very high risk request.  The calculated risk score is typically used to identify scenarios where a service provider may want to introduce consumer friction on the authorization process to validate the identity of the consumer. Example usage by a service provider may be to implement controls such as multifactor authentication for calculated risk factors of `3` or `4` and request blocking for risk factors of `5`.", alias="deviceInsightFactor")
    device_trust_factor: Optional[Annotated[int, Field(le=5, strict=True, ge=1)]] = Field(default=None, description="An integer between 1-5 (1 being no trust and 5 being high trust). The trust factor value reflects the trustworthiness of the attributes associated with this device.", alias="deviceTrustFactor")
    __properties: ClassVar[List[str]] = ["deviceRiskFactor", "deviceInsightFactor", "deviceTrustFactor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceScores from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceScores from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceRiskFactor": obj.get("deviceRiskFactor"),
            "deviceInsightFactor": obj.get("deviceInsightFactor"),
            "deviceTrustFactor": obj.get("deviceTrustFactor")
        })
        return _obj


