# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.indicator import Indicator
from typing import Optional, Set
from typing_extensions import Self

class PaymentSuccessIndicator(BaseModel):
    """
    PaymentSuccessIndicator
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="PSI error code for this scenario")
    message: Optional[StrictStr] = Field(default=None, description="Detailed reason about the source of the error")
    customer_id: StrictStr = Field(description="A customer ID. See Add Customer API for how to create a customer ID.", alias="customerId")
    account_id: StrictStr = Field(description="An account ID", alias="accountId")
    pay_req_id: StrictStr = Field(description="The unique ID that represents the response generated for that specific, customer, account, and transaction.", alias="payReqId")
    settle_by_date: date = Field(description="The expected date that the funds, from the consumer’s account, will be moved to the receiving account.  `settleByDate` in ISO 8601 date format (YYYY-MM-DD). `settleByDate` dictates the number of days the model responds with. The response can range from 3-10 days, including `day0`. Details explained below: 1. If `settleByDate` is 9 or more days out from today, the response includes 10 days of data, `day0` through `day9`. 2. If `settleByDate` is between 3 and 8 days out from today, the response includes 4-9 days of data, `day3-8`. 3. If `settleByDate` is between today and 2 days out from today, the response includes 3 days of data, `day0` through `day2`.", alias="settleByDate")
    settlement_amount: Union[StrictFloat, StrictInt] = Field(description="The transaction amount in USD $.", alias="settlementAmount")
    available_balance: Union[StrictFloat, StrictInt] = Field(description="The available balance provided, by the consumer’s financial institution, at the time of the request.", alias="availableBalance")
    indicators_by_day: Annotated[List[Indicator], Field(min_length=3, max_length=10)] = Field(description="An Array of 3-10 days, providing the potentialSettlementDate, compositeScore, scoreIndicator, and reasons.", alias="indicatorsByDay")
    __properties: ClassVar[List[str]] = ["code", "message", "customerId", "accountId", "payReqId", "settleByDate", "settlementAmount", "availableBalance", "indicatorsByDay"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentSuccessIndicator from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in indicators_by_day (list)
        _items = []
        if self.indicators_by_day:
            for _item_indicators_by_day in self.indicators_by_day:
                if _item_indicators_by_day:
                    _items.append(_item_indicators_by_day.to_dict())
            _dict['indicatorsByDay'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentSuccessIndicator from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "message": obj.get("message"),
            "customerId": obj.get("customerId"),
            "accountId": obj.get("accountId"),
            "payReqId": obj.get("payReqId"),
            "settleByDate": obj.get("settleByDate"),
            "settlementAmount": obj.get("settlementAmount"),
            "availableBalance": obj.get("availableBalance"),
            "indicatorsByDay": [Indicator.from_dict(_item) for _item in obj["indicatorsByDay"]] if obj.get("indicatorsByDay") is not None else None
        })
        return _obj


