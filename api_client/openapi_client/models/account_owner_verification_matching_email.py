# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.email_scores import EmailScores
from typing import Optional, Set
from typing_extensions import Self

class AccountOwnerVerificationMatchingEmail(BaseModel):
    """
    Account owner email
    """ # noqa: E501
    is_primary: Optional[StrictBool] = Field(default=None, description="The email is primary.", alias="isPrimary")
    email: Optional[StrictStr] = Field(default=None, description="An email address")
    email_type: Optional[StrictStr] = Field(default=None, description="The account owner's email type.  * \"Personal\"  * \"Business\"", alias="emailType")
    email_scores: Optional[EmailScores] = Field(default=None, alias="emailScores")
    __properties: ClassVar[List[str]] = ["isPrimary", "email", "emailType", "emailScores"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountOwnerVerificationMatchingEmail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of email_scores
        if self.email_scores:
            _dict['emailScores'] = self.email_scores.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountOwnerVerificationMatchingEmail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isPrimary": obj.get("isPrimary"),
            "email": obj.get("email"),
            "emailType": obj.get("emailType"),
            "emailScores": EmailScores.from_dict(obj["emailScores"]) if obj.get("emailScores") is not None else None
        })
        return _obj


