# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DeviceRiskHistoryEvent(BaseModel):
    """
    DeviceRiskHistoryEvent
    """ # noqa: E501
    risk_event: Optional[StrictStr] = Field(default=None, description="Event label associated with specific risk, for example: AD or ATO.", alias="riskEvent")
    risk_event_count: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The number of times the risk insight of the given type was detected.", alias="riskEventCount")
    risk_level: Optional[StrictInt] = Field(default=None, description="Risk level value between 0-5.", alias="riskLevel")
    last_event_date: Optional[StrictStr] = Field(default=None, description="The day when the risk insight of the given type was detected last.", alias="lastEventDate")
    risk_signals: Optional[List[StrictStr]] = Field(default=None, description="During the insight evaluation, risk signals are generated when a request triggers either the rules or machine learning model. Each risk signal and it's associated definition is shown below.   * `account_carrier_unknown` - Carrier information for account is unknown   * `account_carrier` - Carrier velocity attempts count more than or equal to 50 within 4 hours   * `account_city_unknown` - City information for account is unknown   * `account_city` - Account has not been seen using the City   * `account_state_unknown` - State/Province information for account is unknown   * `account_state` - Account has not been seen using the State/Province   * `account_country_unknown` - Country information for account is unknown   * `account_country` - Account has not been seen using the Country   * `account_ip` - Account has not been seen using the IP   * `account_ua` - Account has not been seen using the UA   * `device_velocity` - Device Fingerprint velocity attempts count more than 100   * `ip_velocity` - Current IP velocity greater than 50 in the past 4 hours   * `login_failures` - High failure rate for account login in the past 30 minutes   * `login_velocity` - The account has +30 login attempts in the past 30 minutes (overall login attempts)   * `account_velocity` - Account logins have exceeded 10 attempts   * `ip_blocklist` - IP is in block list  These risk signals are informational but may be useful for a service provider to understand a detailed view of the associated risk present in a request.", alias="riskSignals")
    __properties: ClassVar[List[str]] = ["riskEvent", "riskEventCount", "riskLevel", "lastEventDate", "riskSignals"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceRiskHistoryEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceRiskHistoryEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "riskEvent": obj.get("riskEvent"),
            "riskEventCount": obj.get("riskEventCount"),
            "riskLevel": obj.get("riskLevel"),
            "lastEventDate": obj.get("lastEventDate"),
            "riskSignals": obj.get("riskSignals")
        })
        return _obj


