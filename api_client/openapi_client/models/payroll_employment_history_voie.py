# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.payroll_employee_record import PayrollEmployeeRecord
from openapi_client.models.payroll_employment_record import PayrollEmploymentRecord
from openapi_client.models.payroll_voie_income_record import PayrollVOIEIncomeRecord
from typing import Optional, Set
from typing_extensions import Self

class PayrollEmploymentHistoryVOIE(BaseModel):
    """
    PayrollEmploymentHistoryVOIE
    """ # noqa: E501
    as_of_date: StrictInt = Field(description="The last time the payroll data was updated in the payroll provider's system", alias="asOfDate")
    employment_id: Optional[StrictStr] = Field(default=None, description="This is a Mastercard assigned ID to the employment record. It remains consistent for that employment record, even if the report is refreshed. It can be used to limit the employment records that are returned in the report.", alias="employmentId")
    employer_name: StrictStr = Field(description="Name of the employer as stated by the employer in the payroll system", alias="employerName")
    payroll_source: StrictStr = Field(description="The name of the payroll source where the data was retrieved", alias="payrollSource")
    payroll_provider: Optional[StrictStr] = Field(default=None, description="The name of the provider who provides payroll data to payroll source", alias="payrollProvider")
    employee: PayrollEmployeeRecord
    employment: PayrollEmploymentRecord
    income: PayrollVOIEIncomeRecord
    __properties: ClassVar[List[str]] = ["asOfDate", "employmentId", "employerName", "payrollSource", "payrollProvider", "employee", "employment", "income"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayrollEmploymentHistoryVOIE from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of employee
        if self.employee:
            _dict['employee'] = self.employee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of employment
        if self.employment:
            _dict['employment'] = self.employment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of income
        if self.income:
            _dict['income'] = self.income.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayrollEmploymentHistoryVOIE from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asOfDate": obj.get("asOfDate"),
            "employmentId": obj.get("employmentId"),
            "employerName": obj.get("employerName"),
            "payrollSource": obj.get("payrollSource"),
            "payrollProvider": obj.get("payrollProvider"),
            "employee": PayrollEmployeeRecord.from_dict(obj["employee"]) if obj.get("employee") is not None else None,
            "employment": PayrollEmploymentRecord.from_dict(obj["employment"]) if obj.get("employment") is not None else None,
            "income": PayrollVOIEIncomeRecord.from_dict(obj["income"]) if obj.get("income") is not None else None
        })
        return _obj


