# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Deduction(BaseModel):
    """
    Deduction
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The normalized category of the deductions in the format [type][number]. The number is the will be the iterating number of the type's occurrence starting at one.")
    description: Optional[StrictStr] = Field(default=None, description="The deduction line's deduction type description")
    amount_current: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount for the deduction line deducted from employee's pay for the specified pay period", alias="amountCurrent")
    amount_ytd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount for the deduction line being deducted from the employee's pay for the current pay year", alias="amountYTD")
    type: Optional[StrictStr] = Field(default=None, description="Categorization based on the deduction line's description")
    __properties: ClassVar[List[str]] = ["name", "description", "amountCurrent", "amountYTD", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Deduction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Deduction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "amountCurrent": obj.get("amountCurrent"),
            "amountYTD": obj.get("amountYTD"),
            "type": obj.get("type")
        })
        return _obj


