# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.customer_account_detail import CustomerAccountDetail
from openapi_client.models.customer_account_position import CustomerAccountPosition
from typing import Optional, Set
from typing_extensions import Self

class CustomerAccount(BaseModel):
    """
    An account represents a bank account such as a checking or savings that the customer has added via the Data Connect interface.
    """ # noqa: E501
    id: StrictStr = Field(description="An account ID")
    number: StrictStr = Field(description="The account number from the institution")
    account_number_display: StrictStr = Field(description="The account number from a financial institution in truncated format:    * Last four digits: \"1234\"    * Last four digits with suffix: \"1234-9\"    * Full value for string accounts: \"john@gmail.com\" example: '1234-9'", alias="accountNumberDisplay")
    real_account_number_last4: Optional[StrictStr] = Field(default=None, description="The last 4 digits of the ACH account number", alias="realAccountNumberLast4")
    name: StrictStr = Field(description="The account name from the institution")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The cleared balance of the account as of `balanceDate`")
    type: StrictStr = Field(description="The list of supported account types. * \"checking\": Standard checking * \"savings\": Standard savings * \"cd\": Certificates of deposit * \"moneyMarket\": Money Market * \"creditCard\": Standard credit cards * \"lineOfCredit\": Home equity, line of credit * \"investment\": Generic investment (no details) * \"investmentTaxDeferred\": Generic tax-advantaged investment (no details) * \"employeeStockPurchasePlan\": ESPP, Employee Stock Ownership Plans (ESOP), Stock Purchase Plans * \"ira\": Individual Retirement Account (not Rollover or Roth) * \"401k\": 401K Plan * \"roth\": Roth IRA, Roth 401K * \"403b\": 403B Plan * \"529plan\": 529 Plan (True value is 529) * \"rollover\": Rollover IRA * \"ugma\": Uniform Gifts to Minors Act * \"utma\": Uniform Transfers to Minors Act * \"keogh\": Keogh Plan * \"457plan\": 457 Plan (True value is 457) * \"401a\": 401A Plan * \"brokerageAccount\": Brokerage Account * \"educationSavings\": Education Savings Account that is not a 529 * \"healthSavingsAccount\": HSA (Health Savings Accounts) * \"pension\": Pension * \"profitSharingPlan\": Profit Sharing Plan * \"roth401k\": Roth 401K * \"sepIRA\": Simplified Employee Pension IRA * \"simpleIRA\": Simple IRA * \"thriftSavingsPlan\": Thrift Savings Plan * \"variableAnnuity\": Variable Annuity * \"cryptocurrency\": Cryptocurrency Wallet, Cryptocurrency Account * \"mortgage\": Standard Mortgages * \"loan\": Auto loans, equity loans, other loans * \"studentLoan\": Student Loan * \"studentLoanGroup\": Student Loan Group * \"studentLoanAccount\": Student Loan Account")
    aggregation_status_code: Optional[StrictInt] = Field(default=None, description="The status of the most recent aggregation attempt (see [Aggregation Status Codes](https://developer.mastercard.com/open-banking-us/documentation/products/manage/account-aggregation/#aggregation-status-codes)). Won't be present until you have run your first aggregation for the account.", alias="aggregationStatusCode")
    status: StrictStr = Field(description="\"pending\" during account discovery, always \"active\" following   successful account activation")
    customer_id: StrictStr = Field(description="A customer ID. See Add Customer API for how to create a customer ID.", alias="customerId")
    institution_id: StrictStr = Field(description="The ID of a financial institution", alias="institutionId")
    balance_date: Optional[StrictInt] = Field(default=None, description="A timestamp showing when the balance was captured by the FI . A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="balanceDate")
    aggregation_success_date: Optional[StrictInt] = Field(default=None, description="A timestamp showing the last successful aggregation of the account. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="aggregationSuccessDate")
    aggregation_attempt_date: Optional[StrictInt] = Field(default=None, description="A timestamp showing the last aggregation attempt, whether successful or not. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="aggregationAttemptDate")
    created_date: StrictInt = Field(description="A timestamp showing when the account was added to the system. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="createdDate")
    last_updated_date: Optional[StrictInt] = Field(default=None, description="A timestamp showing when the account was last modified to the system. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="lastUpdatedDate")
    market_segment: Optional[StrictStr] = Field(default=None, description="The market segment of the account. Possible values: personal, business", alias="marketSegment")
    currency: StrictStr = Field(description="A currency code")
    last_transaction_date: Optional[StrictInt] = Field(default=None, description="The date of the latest transaction on the account. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="lastTransactionDate")
    oldest_transaction_date: Optional[StrictInt] = Field(default=None, description="The date of the oldest transaction in the transactions for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="oldestTransactionDate")
    institution_login_id: StrictInt = Field(description="An institution login ID (from the account record), represented as a number", alias="institutionLoginId")
    detail: Optional[CustomerAccountDetail] = None
    position: Optional[List[CustomerAccountPosition]] = Field(default=None, description="Investment holdings")
    display_position: Optional[StrictInt] = Field(default=None, description="Display position of the account at the financial institution, \"1\"     being the top listed account", alias="displayPosition")
    parent_account: Optional[StrictStr] = Field(default=None, description="The assigned account ID for the account one level higher in the student loan account hierarchy", alias="parentAccount")
    linked_account_date: Optional[StrictInt] = Field(default=None, description="A timestamp showing when the account was last linked to the system. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).", alias="linkedAccountDate")
    __properties: ClassVar[List[str]] = ["id", "number", "accountNumberDisplay", "realAccountNumberLast4", "name", "balance", "type", "aggregationStatusCode", "status", "customerId", "institutionId", "balanceDate", "aggregationSuccessDate", "aggregationAttemptDate", "createdDate", "lastUpdatedDate", "marketSegment", "currency", "lastTransactionDate", "oldestTransactionDate", "institutionLoginId", "detail", "position", "displayPosition", "parentAccount", "linkedAccountDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of detail
        if self.detail:
            _dict['detail'] = self.detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in position (list)
        _items = []
        if self.position:
            for _item_position in self.position:
                if _item_position:
                    _items.append(_item_position.to_dict())
            _dict['position'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "number": obj.get("number"),
            "accountNumberDisplay": obj.get("accountNumberDisplay"),
            "realAccountNumberLast4": obj.get("realAccountNumberLast4"),
            "name": obj.get("name"),
            "balance": obj.get("balance"),
            "type": obj.get("type"),
            "aggregationStatusCode": obj.get("aggregationStatusCode"),
            "status": obj.get("status"),
            "customerId": obj.get("customerId"),
            "institutionId": obj.get("institutionId"),
            "balanceDate": obj.get("balanceDate"),
            "aggregationSuccessDate": obj.get("aggregationSuccessDate"),
            "aggregationAttemptDate": obj.get("aggregationAttemptDate"),
            "createdDate": obj.get("createdDate"),
            "lastUpdatedDate": obj.get("lastUpdatedDate"),
            "marketSegment": obj.get("marketSegment"),
            "currency": obj.get("currency"),
            "lastTransactionDate": obj.get("lastTransactionDate"),
            "oldestTransactionDate": obj.get("oldestTransactionDate"),
            "institutionLoginId": obj.get("institutionLoginId"),
            "detail": CustomerAccountDetail.from_dict(obj["detail"]) if obj.get("detail") is not None else None,
            "position": [CustomerAccountPosition.from_dict(_item) for _item in obj["position"]] if obj.get("position") is not None else None,
            "displayPosition": obj.get("displayPosition"),
            "parentAccount": obj.get("parentAccount"),
            "linkedAccountDate": obj.get("linkedAccountDate")
        })
        return _obj


