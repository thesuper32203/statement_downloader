# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.analytics_report_ack import AnalyticsReportAck
from openapi_client.models.analytics_report_constraints import AnalyticsReportConstraints

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class BalanceAnalyticsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def generate_balance_analytics_report(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        user_type: Annotated[StrictStr, Field(description="UserType indicates if the request is for a business or personal use case, Allowed values: business/personal.")],
        analytics_report_constraints: AnalyticsReportConstraints,
        callback_url: Annotated[Optional[StrictStr], Field(description="A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsReportAck:
        """Generate Balance Analytics Report for the customer - Personal/Business

        Generate a Balance Analytics Report for a given customer. This service retrieves up to two years of transaction history from connected accounts.  Balance  Analytics analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Before calling this API, a consumer or business may need to be created for the given customer ID based on the user type (see Consumer/Business APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  This is a premium service, billable per every successful API call for non-testing customers. A successful call to this API will generate an analytics report which can be retrieved via Get Report by Customer or Get Report by Consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param user_type: UserType indicates if the request is for a business or personal use case, Allowed values: business/personal. (required)
        :type user_type: str
        :param analytics_report_constraints: (required)
        :type analytics_report_constraints: AnalyticsReportConstraints
        :param callback_url: A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
        :type callback_url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_balance_analytics_report_serialize(
            customer_id=customer_id,
            user_type=user_type,
            analytics_report_constraints=analytics_report_constraints,
            callback_url=callback_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "AnalyticsReportAck",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '403': "SecurityFreezeErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def generate_balance_analytics_report_with_http_info(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        user_type: Annotated[StrictStr, Field(description="UserType indicates if the request is for a business or personal use case, Allowed values: business/personal.")],
        analytics_report_constraints: AnalyticsReportConstraints,
        callback_url: Annotated[Optional[StrictStr], Field(description="A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsReportAck]:
        """Generate Balance Analytics Report for the customer - Personal/Business

        Generate a Balance Analytics Report for a given customer. This service retrieves up to two years of transaction history from connected accounts.  Balance  Analytics analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Before calling this API, a consumer or business may need to be created for the given customer ID based on the user type (see Consumer/Business APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  This is a premium service, billable per every successful API call for non-testing customers. A successful call to this API will generate an analytics report which can be retrieved via Get Report by Customer or Get Report by Consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param user_type: UserType indicates if the request is for a business or personal use case, Allowed values: business/personal. (required)
        :type user_type: str
        :param analytics_report_constraints: (required)
        :type analytics_report_constraints: AnalyticsReportConstraints
        :param callback_url: A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
        :type callback_url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_balance_analytics_report_serialize(
            customer_id=customer_id,
            user_type=user_type,
            analytics_report_constraints=analytics_report_constraints,
            callback_url=callback_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "AnalyticsReportAck",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '403': "SecurityFreezeErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def generate_balance_analytics_report_without_preload_content(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        user_type: Annotated[StrictStr, Field(description="UserType indicates if the request is for a business or personal use case, Allowed values: business/personal.")],
        analytics_report_constraints: AnalyticsReportConstraints,
        callback_url: Annotated[Optional[StrictStr], Field(description="A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate Balance Analytics Report for the customer - Personal/Business

        Generate a Balance Analytics Report for a given customer. This service retrieves up to two years of transaction history from connected accounts.  Balance  Analytics analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Before calling this API, a consumer or business may need to be created for the given customer ID based on the user type (see Consumer/Business APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  This is a premium service, billable per every successful API call for non-testing customers. A successful call to this API will generate an analytics report which can be retrieved via Get Report by Customer or Get Report by Consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param user_type: UserType indicates if the request is for a business or personal use case, Allowed values: business/personal. (required)
        :type user_type: str
        :param analytics_report_constraints: (required)
        :type analytics_report_constraints: AnalyticsReportConstraints
        :param callback_url: A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
        :type callback_url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_balance_analytics_report_serialize(
            customer_id=customer_id,
            user_type=user_type,
            analytics_report_constraints=analytics_report_constraints,
            callback_url=callback_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "AnalyticsReportAck",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '403': "SecurityFreezeErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _generate_balance_analytics_report_serialize(
        self,
        customer_id,
        user_type,
        analytics_report_constraints,
        callback_url,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if customer_id is not None:
            _path_params['customerId'] = customer_id
        if user_type is not None:
            _path_params['userType'] = user_type
        # process the query parameters
        if callback_url is not None:
            
            _query_params.append(('callbackUrl', callback_url))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if analytics_report_constraints is not None:
            _body_params = analytics_report_constraints


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/plain'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'FinicityAppToken', 
            'FinicityAppKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/decisioning/v2/customers/{customerId}/reports/balance-analytics/userTypes/{userType}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


