# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.payment_enablement_bundle import PaymentEnablementBundle

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PaymentEnablementBundleApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_account_details_by_account_id(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        include: Annotated[Optional[StrictStr], Field(description="If you do not require all API fields ( `balanceDetails`, `accountIdentity` and `paymentInstruction`) then mention specific API fields you are interested in.  For example, If you are interested in only `balanceDetails` and `paymentInstruction`, then send query string as include=`balanceDetails`,`paymentInstruction`")] = None,
        balance_cache_interval: Annotated[Optional[Annotated[int, Field(le=1440, strict=True, ge=1)]], Field(description="`balance_cache_interval` (in minutes) is used at server side to decide whether to return existing cached balance or retrieve from financial institution in real-time. Details explained below: 1. If the cached balance data at server is older than provided `balance_cache_interval` then live balance from financial institution will be retrieved. 2. If the cached balance data is within provided `balance_cache_interval` allowed interval then balance from cache will be returned. 3. If `balance_cache_interval` is not provided, then by default pre defined cache interval will be used to decide whether to return existing cached balance or retrieve from financial institution in real-time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaymentEnablementBundle:
        """Fetch all the requested details using the account ID

        This bundled API will return any or all of the Payments endpoints in one API call using account ID. This includes, Account Simple details, ACH details, Account Owner, and Account Balance. This requires initial setup to determine which endpoints are included in the API response. For Account Balance, You can define an additional query parameter `balance_cache_interval` to specify the time interval of the last cached balance.  This parameter will be used by the server to determine whether the cached balance is still valid or if it needs to be refreshed.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param include: If you do not require all API fields ( `balanceDetails`, `accountIdentity` and `paymentInstruction`) then mention specific API fields you are interested in.  For example, If you are interested in only `balanceDetails` and `paymentInstruction`, then send query string as include=`balanceDetails`,`paymentInstruction`
        :type include: str
        :param balance_cache_interval: `balance_cache_interval` (in minutes) is used at server side to decide whether to return existing cached balance or retrieve from financial institution in real-time. Details explained below: 1. If the cached balance data at server is older than provided `balance_cache_interval` then live balance from financial institution will be retrieved. 2. If the cached balance data is within provided `balance_cache_interval` allowed interval then balance from cache will be returned. 3. If `balance_cache_interval` is not provided, then by default pre defined cache interval will be used to decide whether to return existing cached balance or retrieve from financial institution in real-time.
        :type balance_cache_interval: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_account_details_by_account_id_serialize(
            customer_id=customer_id,
            account_id=account_id,
            include=include,
            balance_cache_interval=balance_cache_interval,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentEnablementBundle",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_account_details_by_account_id_with_http_info(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        include: Annotated[Optional[StrictStr], Field(description="If you do not require all API fields ( `balanceDetails`, `accountIdentity` and `paymentInstruction`) then mention specific API fields you are interested in.  For example, If you are interested in only `balanceDetails` and `paymentInstruction`, then send query string as include=`balanceDetails`,`paymentInstruction`")] = None,
        balance_cache_interval: Annotated[Optional[Annotated[int, Field(le=1440, strict=True, ge=1)]], Field(description="`balance_cache_interval` (in minutes) is used at server side to decide whether to return existing cached balance or retrieve from financial institution in real-time. Details explained below: 1. If the cached balance data at server is older than provided `balance_cache_interval` then live balance from financial institution will be retrieved. 2. If the cached balance data is within provided `balance_cache_interval` allowed interval then balance from cache will be returned. 3. If `balance_cache_interval` is not provided, then by default pre defined cache interval will be used to decide whether to return existing cached balance or retrieve from financial institution in real-time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaymentEnablementBundle]:
        """Fetch all the requested details using the account ID

        This bundled API will return any or all of the Payments endpoints in one API call using account ID. This includes, Account Simple details, ACH details, Account Owner, and Account Balance. This requires initial setup to determine which endpoints are included in the API response. For Account Balance, You can define an additional query parameter `balance_cache_interval` to specify the time interval of the last cached balance.  This parameter will be used by the server to determine whether the cached balance is still valid or if it needs to be refreshed.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param include: If you do not require all API fields ( `balanceDetails`, `accountIdentity` and `paymentInstruction`) then mention specific API fields you are interested in.  For example, If you are interested in only `balanceDetails` and `paymentInstruction`, then send query string as include=`balanceDetails`,`paymentInstruction`
        :type include: str
        :param balance_cache_interval: `balance_cache_interval` (in minutes) is used at server side to decide whether to return existing cached balance or retrieve from financial institution in real-time. Details explained below: 1. If the cached balance data at server is older than provided `balance_cache_interval` then live balance from financial institution will be retrieved. 2. If the cached balance data is within provided `balance_cache_interval` allowed interval then balance from cache will be returned. 3. If `balance_cache_interval` is not provided, then by default pre defined cache interval will be used to decide whether to return existing cached balance or retrieve from financial institution in real-time.
        :type balance_cache_interval: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_account_details_by_account_id_serialize(
            customer_id=customer_id,
            account_id=account_id,
            include=include,
            balance_cache_interval=balance_cache_interval,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentEnablementBundle",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_account_details_by_account_id_without_preload_content(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        include: Annotated[Optional[StrictStr], Field(description="If you do not require all API fields ( `balanceDetails`, `accountIdentity` and `paymentInstruction`) then mention specific API fields you are interested in.  For example, If you are interested in only `balanceDetails` and `paymentInstruction`, then send query string as include=`balanceDetails`,`paymentInstruction`")] = None,
        balance_cache_interval: Annotated[Optional[Annotated[int, Field(le=1440, strict=True, ge=1)]], Field(description="`balance_cache_interval` (in minutes) is used at server side to decide whether to return existing cached balance or retrieve from financial institution in real-time. Details explained below: 1. If the cached balance data at server is older than provided `balance_cache_interval` then live balance from financial institution will be retrieved. 2. If the cached balance data is within provided `balance_cache_interval` allowed interval then balance from cache will be returned. 3. If `balance_cache_interval` is not provided, then by default pre defined cache interval will be used to decide whether to return existing cached balance or retrieve from financial institution in real-time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch all the requested details using the account ID

        This bundled API will return any or all of the Payments endpoints in one API call using account ID. This includes, Account Simple details, ACH details, Account Owner, and Account Balance. This requires initial setup to determine which endpoints are included in the API response. For Account Balance, You can define an additional query parameter `balance_cache_interval` to specify the time interval of the last cached balance.  This parameter will be used by the server to determine whether the cached balance is still valid or if it needs to be refreshed.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param include: If you do not require all API fields ( `balanceDetails`, `accountIdentity` and `paymentInstruction`) then mention specific API fields you are interested in.  For example, If you are interested in only `balanceDetails` and `paymentInstruction`, then send query string as include=`balanceDetails`,`paymentInstruction`
        :type include: str
        :param balance_cache_interval: `balance_cache_interval` (in minutes) is used at server side to decide whether to return existing cached balance or retrieve from financial institution in real-time. Details explained below: 1. If the cached balance data at server is older than provided `balance_cache_interval` then live balance from financial institution will be retrieved. 2. If the cached balance data is within provided `balance_cache_interval` allowed interval then balance from cache will be returned. 3. If `balance_cache_interval` is not provided, then by default pre defined cache interval will be used to decide whether to return existing cached balance or retrieve from financial institution in real-time.
        :type balance_cache_interval: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_account_details_by_account_id_serialize(
            customer_id=customer_id,
            account_id=account_id,
            include=include,
            balance_cache_interval=balance_cache_interval,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentEnablementBundle",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_account_details_by_account_id_serialize(
        self,
        customer_id,
        account_id,
        include,
        balance_cache_interval,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if customer_id is not None:
            _path_params['customerId'] = customer_id
        if account_id is not None:
            _path_params['accountId'] = account_id
        # process the query parameters
        if include is not None:
            
            _query_params.append(('include', include))
            
        if balance_cache_interval is not None:
            
            _query_params.append(('balance_cache_interval', balance_cache_interval))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'FinicityAppToken', 
            'FinicityAppKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/aggregation/v1/paysuite/customers/{customerId}/accounts/{accountId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_account_details_by_institution_login_id(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        institution_login_id: Annotated[StrictInt, Field(description="The institution login ID")],
        include: Annotated[Optional[StrictStr], Field(description="If you do not require all API fields ( `balanceDetails`, `accountIdentity` and `paymentInstruction`) then mention specific API fields you are interested in.  For example, If you are interested in only `balanceDetails` and `paymentInstruction`, then send query string as include=`balanceDetails`,`paymentInstruction`")] = None,
        balance_cache_interval: Annotated[Optional[Annotated[int, Field(le=1440, strict=True, ge=1)]], Field(description="`balance_cache_interval` (in minutes) is used at server side to decide whether to return existing cached balance or retrieve from financial institution in real-time. Details explained below: 1. If the cached balance data at server is older than provided `balance_cache_interval` then live balance from financial institution will be retrieved. 2. If the cached balance data is within provided `balance_cache_interval` allowed interval then balance from cache will be returned. 3. If `balance_cache_interval` is not provided, then by default pre defined cache interval will be used to decide whether to return existing cached balance or retrieve from financial institution in real-time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaymentEnablementBundle:
        """Fetch all the requested field details using institution login ID

        This bundled API returns any or all of the Payments endpoints in one API call using institution login ID. This includes, Account Simple details, ACH details, Account Owner, and Account Balance. This requires initial setup to determine which endpoints are included in the API response. For Account Balance, You can define an additional query parameter `balance_cache_interval` to specify the time interval of the last cached balance.  This parameter is used by the server to determine whether the cached balance is still valid or if it needs to be refreshed.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param institution_login_id: The institution login ID (required)
        :type institution_login_id: int
        :param include: If you do not require all API fields ( `balanceDetails`, `accountIdentity` and `paymentInstruction`) then mention specific API fields you are interested in.  For example, If you are interested in only `balanceDetails` and `paymentInstruction`, then send query string as include=`balanceDetails`,`paymentInstruction`
        :type include: str
        :param balance_cache_interval: `balance_cache_interval` (in minutes) is used at server side to decide whether to return existing cached balance or retrieve from financial institution in real-time. Details explained below: 1. If the cached balance data at server is older than provided `balance_cache_interval` then live balance from financial institution will be retrieved. 2. If the cached balance data is within provided `balance_cache_interval` allowed interval then balance from cache will be returned. 3. If `balance_cache_interval` is not provided, then by default pre defined cache interval will be used to decide whether to return existing cached balance or retrieve from financial institution in real-time.
        :type balance_cache_interval: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_account_details_by_institution_login_id_serialize(
            customer_id=customer_id,
            institution_login_id=institution_login_id,
            include=include,
            balance_cache_interval=balance_cache_interval,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentEnablementBundle",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_account_details_by_institution_login_id_with_http_info(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        institution_login_id: Annotated[StrictInt, Field(description="The institution login ID")],
        include: Annotated[Optional[StrictStr], Field(description="If you do not require all API fields ( `balanceDetails`, `accountIdentity` and `paymentInstruction`) then mention specific API fields you are interested in.  For example, If you are interested in only `balanceDetails` and `paymentInstruction`, then send query string as include=`balanceDetails`,`paymentInstruction`")] = None,
        balance_cache_interval: Annotated[Optional[Annotated[int, Field(le=1440, strict=True, ge=1)]], Field(description="`balance_cache_interval` (in minutes) is used at server side to decide whether to return existing cached balance or retrieve from financial institution in real-time. Details explained below: 1. If the cached balance data at server is older than provided `balance_cache_interval` then live balance from financial institution will be retrieved. 2. If the cached balance data is within provided `balance_cache_interval` allowed interval then balance from cache will be returned. 3. If `balance_cache_interval` is not provided, then by default pre defined cache interval will be used to decide whether to return existing cached balance or retrieve from financial institution in real-time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaymentEnablementBundle]:
        """Fetch all the requested field details using institution login ID

        This bundled API returns any or all of the Payments endpoints in one API call using institution login ID. This includes, Account Simple details, ACH details, Account Owner, and Account Balance. This requires initial setup to determine which endpoints are included in the API response. For Account Balance, You can define an additional query parameter `balance_cache_interval` to specify the time interval of the last cached balance.  This parameter is used by the server to determine whether the cached balance is still valid or if it needs to be refreshed.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param institution_login_id: The institution login ID (required)
        :type institution_login_id: int
        :param include: If you do not require all API fields ( `balanceDetails`, `accountIdentity` and `paymentInstruction`) then mention specific API fields you are interested in.  For example, If you are interested in only `balanceDetails` and `paymentInstruction`, then send query string as include=`balanceDetails`,`paymentInstruction`
        :type include: str
        :param balance_cache_interval: `balance_cache_interval` (in minutes) is used at server side to decide whether to return existing cached balance or retrieve from financial institution in real-time. Details explained below: 1. If the cached balance data at server is older than provided `balance_cache_interval` then live balance from financial institution will be retrieved. 2. If the cached balance data is within provided `balance_cache_interval` allowed interval then balance from cache will be returned. 3. If `balance_cache_interval` is not provided, then by default pre defined cache interval will be used to decide whether to return existing cached balance or retrieve from financial institution in real-time.
        :type balance_cache_interval: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_account_details_by_institution_login_id_serialize(
            customer_id=customer_id,
            institution_login_id=institution_login_id,
            include=include,
            balance_cache_interval=balance_cache_interval,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentEnablementBundle",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_account_details_by_institution_login_id_without_preload_content(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        institution_login_id: Annotated[StrictInt, Field(description="The institution login ID")],
        include: Annotated[Optional[StrictStr], Field(description="If you do not require all API fields ( `balanceDetails`, `accountIdentity` and `paymentInstruction`) then mention specific API fields you are interested in.  For example, If you are interested in only `balanceDetails` and `paymentInstruction`, then send query string as include=`balanceDetails`,`paymentInstruction`")] = None,
        balance_cache_interval: Annotated[Optional[Annotated[int, Field(le=1440, strict=True, ge=1)]], Field(description="`balance_cache_interval` (in minutes) is used at server side to decide whether to return existing cached balance or retrieve from financial institution in real-time. Details explained below: 1. If the cached balance data at server is older than provided `balance_cache_interval` then live balance from financial institution will be retrieved. 2. If the cached balance data is within provided `balance_cache_interval` allowed interval then balance from cache will be returned. 3. If `balance_cache_interval` is not provided, then by default pre defined cache interval will be used to decide whether to return existing cached balance or retrieve from financial institution in real-time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch all the requested field details using institution login ID

        This bundled API returns any or all of the Payments endpoints in one API call using institution login ID. This includes, Account Simple details, ACH details, Account Owner, and Account Balance. This requires initial setup to determine which endpoints are included in the API response. For Account Balance, You can define an additional query parameter `balance_cache_interval` to specify the time interval of the last cached balance.  This parameter is used by the server to determine whether the cached balance is still valid or if it needs to be refreshed.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param institution_login_id: The institution login ID (required)
        :type institution_login_id: int
        :param include: If you do not require all API fields ( `balanceDetails`, `accountIdentity` and `paymentInstruction`) then mention specific API fields you are interested in.  For example, If you are interested in only `balanceDetails` and `paymentInstruction`, then send query string as include=`balanceDetails`,`paymentInstruction`
        :type include: str
        :param balance_cache_interval: `balance_cache_interval` (in minutes) is used at server side to decide whether to return existing cached balance or retrieve from financial institution in real-time. Details explained below: 1. If the cached balance data at server is older than provided `balance_cache_interval` then live balance from financial institution will be retrieved. 2. If the cached balance data is within provided `balance_cache_interval` allowed interval then balance from cache will be returned. 3. If `balance_cache_interval` is not provided, then by default pre defined cache interval will be used to decide whether to return existing cached balance or retrieve from financial institution in real-time.
        :type balance_cache_interval: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_account_details_by_institution_login_id_serialize(
            customer_id=customer_id,
            institution_login_id=institution_login_id,
            include=include,
            balance_cache_interval=balance_cache_interval,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentEnablementBundle",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_account_details_by_institution_login_id_serialize(
        self,
        customer_id,
        institution_login_id,
        include,
        balance_cache_interval,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if customer_id is not None:
            _path_params['customerId'] = customer_id
        if institution_login_id is not None:
            _path_params['institutionLoginId'] = institution_login_id
        # process the query parameters
        if include is not None:
            
            _query_params.append(('include', include))
            
        if balance_cache_interval is not None:
            
            _query_params.append(('balance_cache_interval', balance_cache_interval))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'FinicityAppToken', 
            'FinicityAppKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/aggregation/v1/paysuite/customers/{customerId}/institutionLogins/{institutionLoginId}/accounts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


