# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.fcra_payment_success_indicators import FcraPaymentSuccessIndicators
from openapi_client.models.payment_success_indicator import PaymentSuccessIndicator
from openapi_client.models.payment_success_indicators import PaymentSuccessIndicators
from openapi_client.models.payment_success_indicators_properties import PaymentSuccessIndicatorsProperties

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PaymentSuccessIndicatorApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def generate_fcra_payment_success_indicators(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        payment_success_indicators_properties: PaymentSuccessIndicatorsProperties,
        purpose: Annotated[Optional[StrictStr], Field(description="2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaymentSuccessIndicators:
        """Generate FCRA Payment Success Indicators

        Payment Success Indicator (PSI) allows the user to evaluate the likelihood of a specific ACH transaction resulting in either an insufficient funds return (NSF) or an unauthorized return due to first- or third-party fraud. PSI is powered by a machine learning model trained on consumer-permissioned data. PSI provides a risk assessment, which includes a real-time balance check, predictive risk scores forecasting a consumer’s likelihood of having sufficient funds over a 10-day period, a real-time score predicting the likelihood of an unauthorized return, and risk attributes to explain and enhance decisioning. Provision and use of this report is subject to all applicable obligations of the FCRA and any applicable analogous state law. This product may only be used for the stated permissible purpose under the FCRA. _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param payment_success_indicators_properties: (required)
        :type payment_success_indicators_properties: PaymentSuccessIndicatorsProperties
        :param purpose: 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
        :type purpose: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_fcra_payment_success_indicators_serialize(
            customer_id=customer_id,
            account_id=account_id,
            payment_success_indicators_properties=payment_success_indicators_properties,
            purpose=purpose,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "PaymentSuccessIndicators",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '403': "ErrorMessage",
            '404': "ErrorMessage",
            '406': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def generate_fcra_payment_success_indicators_with_http_info(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        payment_success_indicators_properties: PaymentSuccessIndicatorsProperties,
        purpose: Annotated[Optional[StrictStr], Field(description="2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaymentSuccessIndicators]:
        """Generate FCRA Payment Success Indicators

        Payment Success Indicator (PSI) allows the user to evaluate the likelihood of a specific ACH transaction resulting in either an insufficient funds return (NSF) or an unauthorized return due to first- or third-party fraud. PSI is powered by a machine learning model trained on consumer-permissioned data. PSI provides a risk assessment, which includes a real-time balance check, predictive risk scores forecasting a consumer’s likelihood of having sufficient funds over a 10-day period, a real-time score predicting the likelihood of an unauthorized return, and risk attributes to explain and enhance decisioning. Provision and use of this report is subject to all applicable obligations of the FCRA and any applicable analogous state law. This product may only be used for the stated permissible purpose under the FCRA. _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param payment_success_indicators_properties: (required)
        :type payment_success_indicators_properties: PaymentSuccessIndicatorsProperties
        :param purpose: 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
        :type purpose: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_fcra_payment_success_indicators_serialize(
            customer_id=customer_id,
            account_id=account_id,
            payment_success_indicators_properties=payment_success_indicators_properties,
            purpose=purpose,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "PaymentSuccessIndicators",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '403': "ErrorMessage",
            '404': "ErrorMessage",
            '406': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def generate_fcra_payment_success_indicators_without_preload_content(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        payment_success_indicators_properties: PaymentSuccessIndicatorsProperties,
        purpose: Annotated[Optional[StrictStr], Field(description="2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate FCRA Payment Success Indicators

        Payment Success Indicator (PSI) allows the user to evaluate the likelihood of a specific ACH transaction resulting in either an insufficient funds return (NSF) or an unauthorized return due to first- or third-party fraud. PSI is powered by a machine learning model trained on consumer-permissioned data. PSI provides a risk assessment, which includes a real-time balance check, predictive risk scores forecasting a consumer’s likelihood of having sufficient funds over a 10-day period, a real-time score predicting the likelihood of an unauthorized return, and risk attributes to explain and enhance decisioning. Provision and use of this report is subject to all applicable obligations of the FCRA and any applicable analogous state law. This product may only be used for the stated permissible purpose under the FCRA. _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param payment_success_indicators_properties: (required)
        :type payment_success_indicators_properties: PaymentSuccessIndicatorsProperties
        :param purpose: 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
        :type purpose: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_fcra_payment_success_indicators_serialize(
            customer_id=customer_id,
            account_id=account_id,
            payment_success_indicators_properties=payment_success_indicators_properties,
            purpose=purpose,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "PaymentSuccessIndicators",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '403': "ErrorMessage",
            '404': "ErrorMessage",
            '406': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _generate_fcra_payment_success_indicators_serialize(
        self,
        customer_id,
        account_id,
        payment_success_indicators_properties,
        purpose,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if customer_id is not None:
            _path_params['customerId'] = customer_id
        if account_id is not None:
            _path_params['accountId'] = account_id
        # process the query parameters
        if purpose is not None:
            
            _query_params.append(('purpose', purpose))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if payment_success_indicators_properties is not None:
            _body_params = payment_success_indicators_properties


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/plain'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'FinicityAppToken', 
            'FinicityAppKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/payments/customers/{customerId}/accounts/{accountId}/fcra-payment-success-indicators',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def generate_payment_success_indicators(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        payment_success_indicators_properties: PaymentSuccessIndicatorsProperties,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaymentSuccessIndicators:
        """Generate Non-FCRA Payment Success Indicators

        Payment Success Indicator (PSI) allows the user to evaluate the likelihood of a specific ACH transaction resulting in either an insufficient funds return (NSF) or an unauthorized return due to first- or third-party fraud. PSI is powered by a machine learning model trained on consumer-permissioned data. PSI provides a risk assessment, which includes a real-time balance check, predictive risk scores forecasting a consumer’s likelihood of having sufficient funds over a 10-day period, a real-time score predicting the likelihood of an unauthorized return, and risk attributes to explain and enhance decisioning. This product may not be used for uses subject to the FCRA.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param payment_success_indicators_properties: (required)
        :type payment_success_indicators_properties: PaymentSuccessIndicatorsProperties
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_payment_success_indicators_serialize(
            customer_id=customer_id,
            account_id=account_id,
            payment_success_indicators_properties=payment_success_indicators_properties,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "PaymentSuccessIndicators",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '403': "ErrorMessage",
            '404': "ErrorMessage",
            '406': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def generate_payment_success_indicators_with_http_info(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        payment_success_indicators_properties: PaymentSuccessIndicatorsProperties,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaymentSuccessIndicators]:
        """Generate Non-FCRA Payment Success Indicators

        Payment Success Indicator (PSI) allows the user to evaluate the likelihood of a specific ACH transaction resulting in either an insufficient funds return (NSF) or an unauthorized return due to first- or third-party fraud. PSI is powered by a machine learning model trained on consumer-permissioned data. PSI provides a risk assessment, which includes a real-time balance check, predictive risk scores forecasting a consumer’s likelihood of having sufficient funds over a 10-day period, a real-time score predicting the likelihood of an unauthorized return, and risk attributes to explain and enhance decisioning. This product may not be used for uses subject to the FCRA.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param payment_success_indicators_properties: (required)
        :type payment_success_indicators_properties: PaymentSuccessIndicatorsProperties
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_payment_success_indicators_serialize(
            customer_id=customer_id,
            account_id=account_id,
            payment_success_indicators_properties=payment_success_indicators_properties,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "PaymentSuccessIndicators",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '403': "ErrorMessage",
            '404': "ErrorMessage",
            '406': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def generate_payment_success_indicators_without_preload_content(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        payment_success_indicators_properties: PaymentSuccessIndicatorsProperties,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate Non-FCRA Payment Success Indicators

        Payment Success Indicator (PSI) allows the user to evaluate the likelihood of a specific ACH transaction resulting in either an insufficient funds return (NSF) or an unauthorized return due to first- or third-party fraud. PSI is powered by a machine learning model trained on consumer-permissioned data. PSI provides a risk assessment, which includes a real-time balance check, predictive risk scores forecasting a consumer’s likelihood of having sufficient funds over a 10-day period, a real-time score predicting the likelihood of an unauthorized return, and risk attributes to explain and enhance decisioning. This product may not be used for uses subject to the FCRA.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param payment_success_indicators_properties: (required)
        :type payment_success_indicators_properties: PaymentSuccessIndicatorsProperties
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_payment_success_indicators_serialize(
            customer_id=customer_id,
            account_id=account_id,
            payment_success_indicators_properties=payment_success_indicators_properties,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "PaymentSuccessIndicators",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '403': "ErrorMessage",
            '404': "ErrorMessage",
            '406': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _generate_payment_success_indicators_serialize(
        self,
        customer_id,
        account_id,
        payment_success_indicators_properties,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if customer_id is not None:
            _path_params['customerId'] = customer_id
        if account_id is not None:
            _path_params['accountId'] = account_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if payment_success_indicators_properties is not None:
            _body_params = payment_success_indicators_properties


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/plain'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'FinicityAppToken', 
            'FinicityAppKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/payments/customers/{customerId}/accounts/{accountId}/payment-success-indicators',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_fcra_payment_success_indicator(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        settlement_amount: Annotated[Union[StrictFloat, StrictInt], Field(description="The transaction amount in USD $.")],
        settle_by_date: Annotated[date, Field(description="The expected date that the funds, from the consumer’s account, will be moved to the receiving account.  `settleByDate` in ISO 8601 date format (YYYY-MM-DD). `settleByDate` dictates the number of days the model responds with. The response can range from 3-10 days, including `day0`. Details explained below: 1. If `settleByDate` is 9 or more days out from today, the response includes 10 days of data, `day0` through `day9`. 2. If `settleByDate` is between 3 and 8 days out from today, the response includes 4-9 days of data, `day3-8`. 3. If `settleByDate` is between today and 2 days out from today, the response includes 3 days of data, `day0` through `day2`.")],
        purpose_code: Annotated[StrictStr, Field(description="The 2-digit code (1P) assigned to indicate the intended purpose. 1P represents the following permissible purpose: “Determine whether a consumers payment method may be accepted or authorized”, which falls under the “Legitimate Business Need” permissible purpose under section 604 of the FCRA.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaymentSuccessIndicator:
        """Get FCRA Payment Success Indicator (Legacy)

        Payment Success Indicator (PSI) allows the user to evaluate the likelihood of a specific ACH transaction resulting in an insufficient funds return (NSF). PSI is powered by a machine learning model trained on Finicity’s consumer-permissioned data network. PSI provides a risk assessment, which includes a real-time balance check, a predictive risk score for the up to the next 9 days, and 8 risk attributes to explain and enhance decisioning. Provision and use of this report is subject to all applicable obligations of the FCRA and any applicable analogous state law. This product may only be used for the stated permissible purpose under the FCRA.    _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param settlement_amount: The transaction amount in USD $. (required)
        :type settlement_amount: float
        :param settle_by_date: The expected date that the funds, from the consumer’s account, will be moved to the receiving account.  `settleByDate` in ISO 8601 date format (YYYY-MM-DD). `settleByDate` dictates the number of days the model responds with. The response can range from 3-10 days, including `day0`. Details explained below: 1. If `settleByDate` is 9 or more days out from today, the response includes 10 days of data, `day0` through `day9`. 2. If `settleByDate` is between 3 and 8 days out from today, the response includes 4-9 days of data, `day3-8`. 3. If `settleByDate` is between today and 2 days out from today, the response includes 3 days of data, `day0` through `day2`. (required)
        :type settle_by_date: date
        :param purpose_code: The 2-digit code (1P) assigned to indicate the intended purpose. 1P represents the following permissible purpose: “Determine whether a consumers payment method may be accepted or authorized”, which falls under the “Legitimate Business Need” permissible purpose under section 604 of the FCRA. (required)
        :type purpose_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_fcra_payment_success_indicator_serialize(
            customer_id=customer_id,
            account_id=account_id,
            settlement_amount=settlement_amount,
            settle_by_date=settle_by_date,
            purpose_code=purpose_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentSuccessIndicator",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_fcra_payment_success_indicator_with_http_info(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        settlement_amount: Annotated[Union[StrictFloat, StrictInt], Field(description="The transaction amount in USD $.")],
        settle_by_date: Annotated[date, Field(description="The expected date that the funds, from the consumer’s account, will be moved to the receiving account.  `settleByDate` in ISO 8601 date format (YYYY-MM-DD). `settleByDate` dictates the number of days the model responds with. The response can range from 3-10 days, including `day0`. Details explained below: 1. If `settleByDate` is 9 or more days out from today, the response includes 10 days of data, `day0` through `day9`. 2. If `settleByDate` is between 3 and 8 days out from today, the response includes 4-9 days of data, `day3-8`. 3. If `settleByDate` is between today and 2 days out from today, the response includes 3 days of data, `day0` through `day2`.")],
        purpose_code: Annotated[StrictStr, Field(description="The 2-digit code (1P) assigned to indicate the intended purpose. 1P represents the following permissible purpose: “Determine whether a consumers payment method may be accepted or authorized”, which falls under the “Legitimate Business Need” permissible purpose under section 604 of the FCRA.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaymentSuccessIndicator]:
        """Get FCRA Payment Success Indicator (Legacy)

        Payment Success Indicator (PSI) allows the user to evaluate the likelihood of a specific ACH transaction resulting in an insufficient funds return (NSF). PSI is powered by a machine learning model trained on Finicity’s consumer-permissioned data network. PSI provides a risk assessment, which includes a real-time balance check, a predictive risk score for the up to the next 9 days, and 8 risk attributes to explain and enhance decisioning. Provision and use of this report is subject to all applicable obligations of the FCRA and any applicable analogous state law. This product may only be used for the stated permissible purpose under the FCRA.    _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param settlement_amount: The transaction amount in USD $. (required)
        :type settlement_amount: float
        :param settle_by_date: The expected date that the funds, from the consumer’s account, will be moved to the receiving account.  `settleByDate` in ISO 8601 date format (YYYY-MM-DD). `settleByDate` dictates the number of days the model responds with. The response can range from 3-10 days, including `day0`. Details explained below: 1. If `settleByDate` is 9 or more days out from today, the response includes 10 days of data, `day0` through `day9`. 2. If `settleByDate` is between 3 and 8 days out from today, the response includes 4-9 days of data, `day3-8`. 3. If `settleByDate` is between today and 2 days out from today, the response includes 3 days of data, `day0` through `day2`. (required)
        :type settle_by_date: date
        :param purpose_code: The 2-digit code (1P) assigned to indicate the intended purpose. 1P represents the following permissible purpose: “Determine whether a consumers payment method may be accepted or authorized”, which falls under the “Legitimate Business Need” permissible purpose under section 604 of the FCRA. (required)
        :type purpose_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_fcra_payment_success_indicator_serialize(
            customer_id=customer_id,
            account_id=account_id,
            settlement_amount=settlement_amount,
            settle_by_date=settle_by_date,
            purpose_code=purpose_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentSuccessIndicator",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_fcra_payment_success_indicator_without_preload_content(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        settlement_amount: Annotated[Union[StrictFloat, StrictInt], Field(description="The transaction amount in USD $.")],
        settle_by_date: Annotated[date, Field(description="The expected date that the funds, from the consumer’s account, will be moved to the receiving account.  `settleByDate` in ISO 8601 date format (YYYY-MM-DD). `settleByDate` dictates the number of days the model responds with. The response can range from 3-10 days, including `day0`. Details explained below: 1. If `settleByDate` is 9 or more days out from today, the response includes 10 days of data, `day0` through `day9`. 2. If `settleByDate` is between 3 and 8 days out from today, the response includes 4-9 days of data, `day3-8`. 3. If `settleByDate` is between today and 2 days out from today, the response includes 3 days of data, `day0` through `day2`.")],
        purpose_code: Annotated[StrictStr, Field(description="The 2-digit code (1P) assigned to indicate the intended purpose. 1P represents the following permissible purpose: “Determine whether a consumers payment method may be accepted or authorized”, which falls under the “Legitimate Business Need” permissible purpose under section 604 of the FCRA.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get FCRA Payment Success Indicator (Legacy)

        Payment Success Indicator (PSI) allows the user to evaluate the likelihood of a specific ACH transaction resulting in an insufficient funds return (NSF). PSI is powered by a machine learning model trained on Finicity’s consumer-permissioned data network. PSI provides a risk assessment, which includes a real-time balance check, a predictive risk score for the up to the next 9 days, and 8 risk attributes to explain and enhance decisioning. Provision and use of this report is subject to all applicable obligations of the FCRA and any applicable analogous state law. This product may only be used for the stated permissible purpose under the FCRA.    _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param settlement_amount: The transaction amount in USD $. (required)
        :type settlement_amount: float
        :param settle_by_date: The expected date that the funds, from the consumer’s account, will be moved to the receiving account.  `settleByDate` in ISO 8601 date format (YYYY-MM-DD). `settleByDate` dictates the number of days the model responds with. The response can range from 3-10 days, including `day0`. Details explained below: 1. If `settleByDate` is 9 or more days out from today, the response includes 10 days of data, `day0` through `day9`. 2. If `settleByDate` is between 3 and 8 days out from today, the response includes 4-9 days of data, `day3-8`. 3. If `settleByDate` is between today and 2 days out from today, the response includes 3 days of data, `day0` through `day2`. (required)
        :type settle_by_date: date
        :param purpose_code: The 2-digit code (1P) assigned to indicate the intended purpose. 1P represents the following permissible purpose: “Determine whether a consumers payment method may be accepted or authorized”, which falls under the “Legitimate Business Need” permissible purpose under section 604 of the FCRA. (required)
        :type purpose_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_fcra_payment_success_indicator_serialize(
            customer_id=customer_id,
            account_id=account_id,
            settlement_amount=settlement_amount,
            settle_by_date=settle_by_date,
            purpose_code=purpose_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentSuccessIndicator",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_fcra_payment_success_indicator_serialize(
        self,
        customer_id,
        account_id,
        settlement_amount,
        settle_by_date,
        purpose_code,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if customer_id is not None:
            _path_params['customerId'] = customer_id
        if account_id is not None:
            _path_params['accountId'] = account_id
        # process the query parameters
        if settlement_amount is not None:
            
            _query_params.append(('settlementAmount', settlement_amount))
            
        if settle_by_date is not None:
            if isinstance(settle_by_date, date):
                _query_params.append(
                    (
                        'settleByDate',
                        settle_by_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('settleByDate', settle_by_date))
            
        if purpose_code is not None:
            
            _query_params.append(('purposeCode', purpose_code))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/plain'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'FinicityAppToken', 
            'FinicityAppKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/aggregation/v1/customers/{customerId}/accounts/{accountId}/payments/paymentIndicator/fcra',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_fcra_payment_success_indicators(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        pay_request_id: Annotated[str, Field(min_length=18, strict=True, max_length=18, description="Unique identifier of the Payments request")],
        include_reasons: Annotated[Optional[StrictBool], Field(description="If this parameter is true, the reasons codes will be provided in the results. Otherwise, the reasons will be omitted.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FcraPaymentSuccessIndicators:
        """Get FCRA Payment Success Indicators by Pay Request ID

        Get the FCRA Payment Success Indicator scores that have been generated by a previous call to Generate FCRA Payment Success Indicators. _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param pay_request_id: Unique identifier of the Payments request (required)
        :type pay_request_id: str
        :param include_reasons: If this parameter is true, the reasons codes will be provided in the results. Otherwise, the reasons will be omitted.
        :type include_reasons: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_fcra_payment_success_indicators_serialize(
            customer_id=customer_id,
            account_id=account_id,
            pay_request_id=pay_request_id,
            include_reasons=include_reasons,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FcraPaymentSuccessIndicators",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
            '406': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_fcra_payment_success_indicators_with_http_info(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        pay_request_id: Annotated[str, Field(min_length=18, strict=True, max_length=18, description="Unique identifier of the Payments request")],
        include_reasons: Annotated[Optional[StrictBool], Field(description="If this parameter is true, the reasons codes will be provided in the results. Otherwise, the reasons will be omitted.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FcraPaymentSuccessIndicators]:
        """Get FCRA Payment Success Indicators by Pay Request ID

        Get the FCRA Payment Success Indicator scores that have been generated by a previous call to Generate FCRA Payment Success Indicators. _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param pay_request_id: Unique identifier of the Payments request (required)
        :type pay_request_id: str
        :param include_reasons: If this parameter is true, the reasons codes will be provided in the results. Otherwise, the reasons will be omitted.
        :type include_reasons: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_fcra_payment_success_indicators_serialize(
            customer_id=customer_id,
            account_id=account_id,
            pay_request_id=pay_request_id,
            include_reasons=include_reasons,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FcraPaymentSuccessIndicators",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
            '406': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_fcra_payment_success_indicators_without_preload_content(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        pay_request_id: Annotated[str, Field(min_length=18, strict=True, max_length=18, description="Unique identifier of the Payments request")],
        include_reasons: Annotated[Optional[StrictBool], Field(description="If this parameter is true, the reasons codes will be provided in the results. Otherwise, the reasons will be omitted.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get FCRA Payment Success Indicators by Pay Request ID

        Get the FCRA Payment Success Indicator scores that have been generated by a previous call to Generate FCRA Payment Success Indicators. _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param pay_request_id: Unique identifier of the Payments request (required)
        :type pay_request_id: str
        :param include_reasons: If this parameter is true, the reasons codes will be provided in the results. Otherwise, the reasons will be omitted.
        :type include_reasons: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_fcra_payment_success_indicators_serialize(
            customer_id=customer_id,
            account_id=account_id,
            pay_request_id=pay_request_id,
            include_reasons=include_reasons,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FcraPaymentSuccessIndicators",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
            '406': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_fcra_payment_success_indicators_serialize(
        self,
        customer_id,
        account_id,
        pay_request_id,
        include_reasons,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if customer_id is not None:
            _path_params['customerId'] = customer_id
        if account_id is not None:
            _path_params['accountId'] = account_id
        if pay_request_id is not None:
            _path_params['payRequestId'] = pay_request_id
        # process the query parameters
        if include_reasons is not None:
            
            _query_params.append(('include_reasons', include_reasons))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/plain'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'FinicityAppToken', 
            'FinicityAppKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/payments/customers/{customerId}/accounts/{accountId}/fcra-payment-success-indicators/{payRequestId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_payment_success_indicator(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        settlement_amount: Annotated[Union[StrictFloat, StrictInt], Field(description="The transaction amount in USD $.")],
        settle_by_date: Annotated[date, Field(description="The expected date that the funds, from the consumer’s account, will be moved to the receiving account.  `settleByDate` in ISO 8601 date format (YYYY-MM-DD). `settleByDate` dictates the number of days the model responds with. The response can range from 3-10 days, including `day0`. Details explained below: 1. If `settleByDate` is 9 or more days out from today, the response includes 10 days of data, `day0` through `day9`. 2. If `settleByDate` is between 3 and 8 days out from today, the response includes 4-9 days of data, `day3-8`. 3. If `settleByDate` is between today and 2 days out from today, the response includes 3 days of data, `day0` through `day2`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaymentSuccessIndicator:
        """Get Non-FCRA Payment Success Indicator (Legacy)

        Payment Success Indicator (PSI) is a Payment Intelligence solution that uses Financial Institution (FI) data to help payment originators evaluate a consumer's ability to pay now and in the future within a given time period. PSI is for payment originators to assess a consumer's real-time FI account balance and historical FI account activities to help minimize ACH declines and enable payment originators to gracefully transition to alternative payment methods or schedules when payment settlement using ACH / Account-based payment is less likely. PSI may not be used for credit or insurance underwriting, employment or rental screening, or any other purpose(s) that would implicate the Fair Credit Reporting Act or other consumer reporting law.    _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param settlement_amount: The transaction amount in USD $. (required)
        :type settlement_amount: float
        :param settle_by_date: The expected date that the funds, from the consumer’s account, will be moved to the receiving account.  `settleByDate` in ISO 8601 date format (YYYY-MM-DD). `settleByDate` dictates the number of days the model responds with. The response can range from 3-10 days, including `day0`. Details explained below: 1. If `settleByDate` is 9 or more days out from today, the response includes 10 days of data, `day0` through `day9`. 2. If `settleByDate` is between 3 and 8 days out from today, the response includes 4-9 days of data, `day3-8`. 3. If `settleByDate` is between today and 2 days out from today, the response includes 3 days of data, `day0` through `day2`. (required)
        :type settle_by_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payment_success_indicator_serialize(
            customer_id=customer_id,
            account_id=account_id,
            settlement_amount=settlement_amount,
            settle_by_date=settle_by_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentSuccessIndicator",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_payment_success_indicator_with_http_info(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        settlement_amount: Annotated[Union[StrictFloat, StrictInt], Field(description="The transaction amount in USD $.")],
        settle_by_date: Annotated[date, Field(description="The expected date that the funds, from the consumer’s account, will be moved to the receiving account.  `settleByDate` in ISO 8601 date format (YYYY-MM-DD). `settleByDate` dictates the number of days the model responds with. The response can range from 3-10 days, including `day0`. Details explained below: 1. If `settleByDate` is 9 or more days out from today, the response includes 10 days of data, `day0` through `day9`. 2. If `settleByDate` is between 3 and 8 days out from today, the response includes 4-9 days of data, `day3-8`. 3. If `settleByDate` is between today and 2 days out from today, the response includes 3 days of data, `day0` through `day2`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaymentSuccessIndicator]:
        """Get Non-FCRA Payment Success Indicator (Legacy)

        Payment Success Indicator (PSI) is a Payment Intelligence solution that uses Financial Institution (FI) data to help payment originators evaluate a consumer's ability to pay now and in the future within a given time period. PSI is for payment originators to assess a consumer's real-time FI account balance and historical FI account activities to help minimize ACH declines and enable payment originators to gracefully transition to alternative payment methods or schedules when payment settlement using ACH / Account-based payment is less likely. PSI may not be used for credit or insurance underwriting, employment or rental screening, or any other purpose(s) that would implicate the Fair Credit Reporting Act or other consumer reporting law.    _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param settlement_amount: The transaction amount in USD $. (required)
        :type settlement_amount: float
        :param settle_by_date: The expected date that the funds, from the consumer’s account, will be moved to the receiving account.  `settleByDate` in ISO 8601 date format (YYYY-MM-DD). `settleByDate` dictates the number of days the model responds with. The response can range from 3-10 days, including `day0`. Details explained below: 1. If `settleByDate` is 9 or more days out from today, the response includes 10 days of data, `day0` through `day9`. 2. If `settleByDate` is between 3 and 8 days out from today, the response includes 4-9 days of data, `day3-8`. 3. If `settleByDate` is between today and 2 days out from today, the response includes 3 days of data, `day0` through `day2`. (required)
        :type settle_by_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payment_success_indicator_serialize(
            customer_id=customer_id,
            account_id=account_id,
            settlement_amount=settlement_amount,
            settle_by_date=settle_by_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentSuccessIndicator",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_payment_success_indicator_without_preload_content(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        settlement_amount: Annotated[Union[StrictFloat, StrictInt], Field(description="The transaction amount in USD $.")],
        settle_by_date: Annotated[date, Field(description="The expected date that the funds, from the consumer’s account, will be moved to the receiving account.  `settleByDate` in ISO 8601 date format (YYYY-MM-DD). `settleByDate` dictates the number of days the model responds with. The response can range from 3-10 days, including `day0`. Details explained below: 1. If `settleByDate` is 9 or more days out from today, the response includes 10 days of data, `day0` through `day9`. 2. If `settleByDate` is between 3 and 8 days out from today, the response includes 4-9 days of data, `day3-8`. 3. If `settleByDate` is between today and 2 days out from today, the response includes 3 days of data, `day0` through `day2`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Non-FCRA Payment Success Indicator (Legacy)

        Payment Success Indicator (PSI) is a Payment Intelligence solution that uses Financial Institution (FI) data to help payment originators evaluate a consumer's ability to pay now and in the future within a given time period. PSI is for payment originators to assess a consumer's real-time FI account balance and historical FI account activities to help minimize ACH declines and enable payment originators to gracefully transition to alternative payment methods or schedules when payment settlement using ACH / Account-based payment is less likely. PSI may not be used for credit or insurance underwriting, employment or rental screening, or any other purpose(s) that would implicate the Fair Credit Reporting Act or other consumer reporting law.    _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param settlement_amount: The transaction amount in USD $. (required)
        :type settlement_amount: float
        :param settle_by_date: The expected date that the funds, from the consumer’s account, will be moved to the receiving account.  `settleByDate` in ISO 8601 date format (YYYY-MM-DD). `settleByDate` dictates the number of days the model responds with. The response can range from 3-10 days, including `day0`. Details explained below: 1. If `settleByDate` is 9 or more days out from today, the response includes 10 days of data, `day0` through `day9`. 2. If `settleByDate` is between 3 and 8 days out from today, the response includes 4-9 days of data, `day3-8`. 3. If `settleByDate` is between today and 2 days out from today, the response includes 3 days of data, `day0` through `day2`. (required)
        :type settle_by_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payment_success_indicator_serialize(
            customer_id=customer_id,
            account_id=account_id,
            settlement_amount=settlement_amount,
            settle_by_date=settle_by_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentSuccessIndicator",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_payment_success_indicator_serialize(
        self,
        customer_id,
        account_id,
        settlement_amount,
        settle_by_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if customer_id is not None:
            _path_params['customerId'] = customer_id
        if account_id is not None:
            _path_params['accountId'] = account_id
        # process the query parameters
        if settlement_amount is not None:
            
            _query_params.append(('settlementAmount', settlement_amount))
            
        if settle_by_date is not None:
            if isinstance(settle_by_date, date):
                _query_params.append(
                    (
                        'settleByDate',
                        settle_by_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('settleByDate', settle_by_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/plain'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'FinicityAppToken', 
            'FinicityAppKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/aggregation/v2/customers/{customerId}/accounts/{accountId}/payments/paymentIndicator',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_payment_success_indicators(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        pay_request_id: Annotated[str, Field(min_length=18, strict=True, max_length=18, description="Unique identifier of the Payments request")],
        include_reasons: Annotated[Optional[StrictBool], Field(description="If this parameter is true, the reasons codes will be provided in the results. Otherwise, the reasons will be omitted.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaymentSuccessIndicators:
        """Get Non-FCRA Payment Success Indicators by Pay Request ID

        Get the Non-FCRA Payment Success Indicator scores that have been generated by a previous call to Generate Payment Success Indicators.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param pay_request_id: Unique identifier of the Payments request (required)
        :type pay_request_id: str
        :param include_reasons: If this parameter is true, the reasons codes will be provided in the results. Otherwise, the reasons will be omitted.
        :type include_reasons: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payment_success_indicators_serialize(
            customer_id=customer_id,
            account_id=account_id,
            pay_request_id=pay_request_id,
            include_reasons=include_reasons,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentSuccessIndicators",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
            '406': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_payment_success_indicators_with_http_info(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        pay_request_id: Annotated[str, Field(min_length=18, strict=True, max_length=18, description="Unique identifier of the Payments request")],
        include_reasons: Annotated[Optional[StrictBool], Field(description="If this parameter is true, the reasons codes will be provided in the results. Otherwise, the reasons will be omitted.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaymentSuccessIndicators]:
        """Get Non-FCRA Payment Success Indicators by Pay Request ID

        Get the Non-FCRA Payment Success Indicator scores that have been generated by a previous call to Generate Payment Success Indicators.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param pay_request_id: Unique identifier of the Payments request (required)
        :type pay_request_id: str
        :param include_reasons: If this parameter is true, the reasons codes will be provided in the results. Otherwise, the reasons will be omitted.
        :type include_reasons: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payment_success_indicators_serialize(
            customer_id=customer_id,
            account_id=account_id,
            pay_request_id=pay_request_id,
            include_reasons=include_reasons,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentSuccessIndicators",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
            '406': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_payment_success_indicators_without_preload_content(
        self,
        customer_id: Annotated[StrictStr, Field(description="A customer ID")],
        account_id: Annotated[StrictStr, Field(description="The account ID")],
        pay_request_id: Annotated[str, Field(min_length=18, strict=True, max_length=18, description="Unique identifier of the Payments request")],
        include_reasons: Annotated[Optional[StrictBool], Field(description="If this parameter is true, the reasons codes will be provided in the results. Otherwise, the reasons will be omitted.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Non-FCRA Payment Success Indicators by Pay Request ID

        Get the Non-FCRA Payment Success Indicator scores that have been generated by a previous call to Generate Payment Success Indicators.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)

        :param customer_id: A customer ID (required)
        :type customer_id: str
        :param account_id: The account ID (required)
        :type account_id: str
        :param pay_request_id: Unique identifier of the Payments request (required)
        :type pay_request_id: str
        :param include_reasons: If this parameter is true, the reasons codes will be provided in the results. Otherwise, the reasons will be omitted.
        :type include_reasons: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payment_success_indicators_serialize(
            customer_id=customer_id,
            account_id=account_id,
            pay_request_id=pay_request_id,
            include_reasons=include_reasons,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaymentSuccessIndicators",
            '400': "ErrorMessage",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
            '406': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_payment_success_indicators_serialize(
        self,
        customer_id,
        account_id,
        pay_request_id,
        include_reasons,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if customer_id is not None:
            _path_params['customerId'] = customer_id
        if account_id is not None:
            _path_params['accountId'] = account_id
        if pay_request_id is not None:
            _path_params['payRequestId'] = pay_request_id
        # process the query parameters
        if include_reasons is not None:
            
            _query_params.append(('include_reasons', include_reasons))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/plain'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'FinicityAppToken', 
            'FinicityAppKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/payments/customers/{customerId}/accounts/{accountId}/payment-success-indicators/{payRequestId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


