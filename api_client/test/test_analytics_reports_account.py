# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.analytics_reports_account import AnalyticsReportsAccount

class TestAnalyticsReportsAccount(unittest.TestCase):
    """AnalyticsReportsAccount unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AnalyticsReportsAccount:
        """Test AnalyticsReportsAccount
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AnalyticsReportsAccount`
        """
        model = AnalyticsReportsAccount()
        if include_optional:
            return AnalyticsReportsAccount(
                id = 1000023996,
                owner_name = 'PATRICK PURCHASER|LORRAINE PURCHASER',
                owner_address = '7195 BELMONT ST. PARLIN, NJ 08859',
                owner_as_of_date = 1596175200,
                name = 'Checking',
                number = 'XX1111',
                type = 'checking',
                currency = 'USD',
                aggregation_status_code = 0,
                current_balance = 100000,
                available_balance = 1000,
                balance_date = 1614880526,
                transactions = [
                    openapi_client.models.report_transaction.ReportTransaction()
                    ],
                details = openapi_client.models.account_details.AccountDetails(
                    interest_margin_balance = -50000, 
                    available_cash_balance = 1500, 
                    vested_balance = 300000, 
                    current_loan_balance = 0, 
                    available_balance_amount = 1000, ),
                analytics = openapi_client.models.account_analytics.AccountAnalytics(
                    transactional_attributes = [
                        openapi_client.models.transactional_attribute.TransactionalAttribute(
                            aggregated_by_time_periods = [
                                openapi_client.models.transactional_time_interval.TransactionalTimeInterval(
                                    periods = [
                                        openapi_client.models.transactional_period.TransactionalPeriod(
                                            count = 2, 
                                            end_date = 'Sat Dec 31 19:00:00 EST 2022', 
                                            max = 60.21, 
                                            mean = 42.22, 
                                            median = 42.22, 
                                            min = 30.22, 
                                            standard_deviation = 14.995, 
                                            start_date = 'Wed Nov 30 19:00:00 EST 2022', 
                                            sum = 90.43, )
                                        ], 
                                    time_interval_type = 'MONTHLY_CALENDAR', )
                                ], 
                            attribute_name = 'INFLOW_TRANSACTIONS', 
                            stream_ids = ["1","2"], 
                            transaction_ids = ["6010290887","6010290914"], )
                        ], 
                    state_attributes = [
                        openapi_client.models.state_attribute.StateAttribute(
                            attribute_name = 'NET_CASH_FLOW', 
                            reported_by_time_periods = [
                                openapi_client.models.state_time_interval.StateTimeInterval(
                                    periods = [
                                        openapi_client.models.state_period.StatePeriod(
                                            beginning_value = 60.21, 
                                            count = 2, 
                                            end_date = 'Sat Dec 31 19:00:00 EST 2022', 
                                            ending_value = 60.21, 
                                            max = 60.21, 
                                            mean = 42.22, 
                                            median = 42.22, 
                                            min = 30.22, 
                                            standard_deviation = 14.995, 
                                            start_date = 'Wed Nov 30 19:00:00 EST 2022', 
                                            sum = 90.43, )
                                        ], 
                                    time_interval_type = 'MONTHLY_CALENDAR', )
                                ], )
                        ], 
                    streams = [
                        openapi_client.models.stream_model.StreamModel(
                            cadence = 30, 
                            id = '1', 
                            payee = 'Walmart', 
                            payor = 'Elizabeth Johnson', 
                            recency = 2, 
                            transaction_ids = ["6010290887","6010290914"], )
                        ], )
            )
        else:
            return AnalyticsReportsAccount(
                id = 1000023996,
                name = 'Checking',
                number = 'XX1111',
                type = 'checking',
                currency = 'USD',
                transactions = [
                    openapi_client.models.report_transaction.ReportTransaction()
                    ],
        )
        """

    def testAnalyticsReportsAccount(self):
        """Test AnalyticsReportsAccount"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
