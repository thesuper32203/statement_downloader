# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.customer_analytics import CustomerAnalytics

class TestCustomerAnalytics(unittest.TestCase):
    """CustomerAnalytics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CustomerAnalytics:
        """Test CustomerAnalytics
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CustomerAnalytics`
        """
        model = CustomerAnalytics()
        if include_optional:
            return CustomerAnalytics(
                transactional_attributes = [
                    openapi_client.models.transactional_attribute.TransactionalAttribute(
                        aggregated_by_time_periods = [
                            openapi_client.models.transactional_time_interval.TransactionalTimeInterval(
                                periods = [
                                    openapi_client.models.transactional_period.TransactionalPeriod(
                                        count = 2, 
                                        end_date = 'Sat Dec 31 19:00:00 EST 2022', 
                                        max = 60.21, 
                                        mean = 42.22, 
                                        median = 42.22, 
                                        min = 30.22, 
                                        standard_deviation = 14.995, 
                                        start_date = 'Wed Nov 30 19:00:00 EST 2022', 
                                        sum = 90.43, )
                                    ], 
                                time_interval_type = 'MONTHLY_CALENDAR', )
                            ], 
                        attribute_name = 'INFLOW_TRANSACTIONS', 
                        stream_ids = ["1","2"], 
                        transaction_ids = ["6010290887","6010290914"], )
                    ],
                state_attributes = [
                    openapi_client.models.state_attribute.StateAttribute(
                        attribute_name = 'NET_CASH_FLOW', 
                        reported_by_time_periods = [
                            openapi_client.models.state_time_interval.StateTimeInterval(
                                periods = [
                                    openapi_client.models.state_period.StatePeriod(
                                        beginning_value = 60.21, 
                                        count = 2, 
                                        end_date = 'Sat Dec 31 19:00:00 EST 2022', 
                                        ending_value = 60.21, 
                                        max = 60.21, 
                                        mean = 42.22, 
                                        median = 42.22, 
                                        min = 30.22, 
                                        standard_deviation = 14.995, 
                                        start_date = 'Wed Nov 30 19:00:00 EST 2022', 
                                        sum = 90.43, )
                                    ], 
                                time_interval_type = 'MONTHLY_CALENDAR', )
                            ], )
                    ],
                streams = [
                    openapi_client.models.stream_model.StreamModel(
                        cadence = 30, 
                        id = '1', 
                        payee = 'Walmart', 
                        payor = 'Elizabeth Johnson', 
                        recency = 2, 
                        transaction_ids = ["6010290887","6010290914"], )
                    ]
            )
        else:
            return CustomerAnalytics(
                transactional_attributes = [
                    openapi_client.models.transactional_attribute.TransactionalAttribute(
                        aggregated_by_time_periods = [
                            openapi_client.models.transactional_time_interval.TransactionalTimeInterval(
                                periods = [
                                    openapi_client.models.transactional_period.TransactionalPeriod(
                                        count = 2, 
                                        end_date = 'Sat Dec 31 19:00:00 EST 2022', 
                                        max = 60.21, 
                                        mean = 42.22, 
                                        median = 42.22, 
                                        min = 30.22, 
                                        standard_deviation = 14.995, 
                                        start_date = 'Wed Nov 30 19:00:00 EST 2022', 
                                        sum = 90.43, )
                                    ], 
                                time_interval_type = 'MONTHLY_CALENDAR', )
                            ], 
                        attribute_name = 'INFLOW_TRANSACTIONS', 
                        stream_ids = ["1","2"], 
                        transaction_ids = ["6010290887","6010290914"], )
                    ],
                state_attributes = [
                    openapi_client.models.state_attribute.StateAttribute(
                        attribute_name = 'NET_CASH_FLOW', 
                        reported_by_time_periods = [
                            openapi_client.models.state_time_interval.StateTimeInterval(
                                periods = [
                                    openapi_client.models.state_period.StatePeriod(
                                        beginning_value = 60.21, 
                                        count = 2, 
                                        end_date = 'Sat Dec 31 19:00:00 EST 2022', 
                                        ending_value = 60.21, 
                                        max = 60.21, 
                                        mean = 42.22, 
                                        median = 42.22, 
                                        min = 30.22, 
                                        standard_deviation = 14.995, 
                                        start_date = 'Wed Nov 30 19:00:00 EST 2022', 
                                        sum = 90.43, )
                                    ], 
                                time_interval_type = 'MONTHLY_CALENDAR', )
                            ], )
                    ],
                streams = [
                    openapi_client.models.stream_model.StreamModel(
                        cadence = 30, 
                        id = '1', 
                        payee = 'Walmart', 
                        payor = 'Elizabeth Johnson', 
                        recency = 2, 
                        transaction_ids = ["6010290887","6010290914"], )
                    ],
        )
        """

    def testCustomerAnalytics(self):
        """Test CustomerAnalytics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
