# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.account_owner_verification_matching_details import AccountOwnerVerificationMatchingDetails

class TestAccountOwnerVerificationMatchingDetails(unittest.TestCase):
    """AccountOwnerVerificationMatchingDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AccountOwnerVerificationMatchingDetails:
        """Test AccountOwnerVerificationMatchingDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AccountOwnerVerificationMatchingDetails`
        """
        model = AccountOwnerVerificationMatchingDetails()
        if include_optional:
            return AccountOwnerVerificationMatchingDetails(
                relationship = 'AUTHORIZED_USER',
                owner_name = 'John Smith, PhD',
                first_name = 'John',
                middle_name = 'L',
                last_name = 'Smith',
                suffix = 'PhD',
                name_scores = openapi_client.models.name_score.NameScore(
                    owner_name = 0, 
                    first_name = 100, 
                    middle_name = 100, 
                    last_name = 100, 
                    suffix = 100, ),
                name_classification = 'person',
                name_classificationconfidencescore = 0.9,
                addresses = [
                    openapi_client.models.account_owner_verification_matching_address.AccountOwnerVerificationMatchingAddress(
                        owner_address = '434 W Ascension Way Suite #200 Murray UT 84123', 
                        line1 = '434 W Ascension Way', 
                        line2 = 'Suite #200', 
                        line3 = 'UT 84123', 
                        city = 'Murray', 
                        state = 'UT', 
                        country = 'US', 
                        postal_code = '84123', 
                        type = 'Home', 
                        address_scores = openapi_client.models.address_score.AddressScore(
                            type = 100, ), )
                    ],
                emails = [
                    openapi_client.models.account_owner_verification_matching_email.AccountOwnerVerificationMatchingEmail(
                        is_primary = True, 
                        email = 'myname@mycompany.com', 
                        email_type = 'Personal', 
                        email_scores = openapi_client.models.email_scores.EmailScores(), )
                    ],
                phones = [
                    openapi_client.models.account_owner_verification_phone.AccountOwnerVerificationPhone(
                        type = 'HOME', 
                        country = '61', 
                        phone = '1-801-984-4200', 
                        phone_scores = openapi_client.models.phone_scores.PhoneScores(), )
                    ],
                documentations = [
                    openapi_client.models.account_owner_documentation.AccountOwnerDocumentation(
                        tax_id = '123-45-7890', 
                        tax_id_country = 'USA', 
                        government_id = '123456789', )
                    ],
                identity_insights = openapi_client.models.account_owner_identity_insights.AccountOwnerIdentityInsights(
                    request_ref_id = 'be3ad617-04ad-43e1-a438-79425b6511b6', 
                    is_email_valid = True, 
                    email_first_seen_days = 453, 
                    email_domain_creation_date = '2011-06-29T00:00:00.000Z', 
                    email_to_name = 'not found', 
                    ip_risk = True, 
                    ip_risk_score = 0.123, 
                    ip_last_seen_days = 15, 
                    ip_geolocation_country_code = 'US', 
                    ip_geolocation_subdivision = 'Oregon', 
                    ip_phone_distance = 200, 
                    ip_address_distance = 210, 
                    is_phone_valid = True, 
                    phone_line_type = 'mobile', 
                    phone_carrier = 'Vodafone UK ltd.', 
                    phone_country_code = 'UK', 
                    phone_last_seen_days = 42, 
                    phone_email_first_seen_days = 54, 
                    phone_to_name = 'match', 
                    phone_to_address = 'match', 
                    address_validity_level = 'valid', 
                    address_to_name = 'match', 
                    email_risk = 0.8, 
                    identity_risk_score = 275, 
                    device = openapi_client.models.device_insights.DeviceInsights(
                        scores = openapi_client.models.device_scores.DeviceScores(
                            device_risk_factor = 5, 
                            device_insight_factor = 2, 
                            device_trust_factor = 4, ), 
                        details = openapi_client.models.device_details.DeviceDetails(
                            id = openapi_client.models.device_id.DeviceID(
                                u_device_id = 'UDID-9284e12b85b0d2763c13d734c70b1d62', ), 
                            device_info = openapi_client.models.device_info.DeviceInfo(
                                browser = 'Safari', 
                                platform = 'iOS', 
                                device_type = 'iPhone', ), ), ), 
                    warnings = [
                        'Test warnings'
                        ], 
                    alerts = [
                        'Unable to generate IP and user insights'
                        ], )
            )
        else:
            return AccountOwnerVerificationMatchingDetails(
                owner_name = 'John Smith, PhD',
                name_scores = openapi_client.models.name_score.NameScore(
                    owner_name = 0, 
                    first_name = 100, 
                    middle_name = 100, 
                    last_name = 100, 
                    suffix = 100, ),
                name_classification = 'person',
        )
        """

    def testAccountOwnerVerificationMatchingDetails(self):
        """Test AccountOwnerVerificationMatchingDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
