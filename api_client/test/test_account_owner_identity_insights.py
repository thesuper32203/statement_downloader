# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.account_owner_identity_insights import AccountOwnerIdentityInsights

class TestAccountOwnerIdentityInsights(unittest.TestCase):
    """AccountOwnerIdentityInsights unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AccountOwnerIdentityInsights:
        """Test AccountOwnerIdentityInsights
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AccountOwnerIdentityInsights`
        """
        model = AccountOwnerIdentityInsights()
        if include_optional:
            return AccountOwnerIdentityInsights(
                request_ref_id = 'be3ad617-04ad-43e1-a438-79425b6511b6',
                is_email_valid = True,
                email_first_seen_days = 453,
                email_domain_creation_date = '2011-06-29T00:00:00.000Z',
                email_to_name = 'not found',
                ip_risk = True,
                ip_risk_score = 0.123,
                ip_last_seen_days = 15,
                ip_geolocation_country_code = 'US',
                ip_geolocation_subdivision = 'Oregon',
                ip_phone_distance = 200,
                ip_address_distance = 210,
                is_phone_valid = True,
                phone_line_type = 'mobile',
                phone_carrier = 'Vodafone UK ltd.',
                phone_country_code = 'UK',
                phone_last_seen_days = 42,
                phone_email_first_seen_days = 54,
                phone_to_name = 'match',
                phone_to_address = 'match',
                address_validity_level = 'valid',
                address_to_name = 'match',
                email_risk = 0.8,
                identity_risk_score = 275,
                device = openapi_client.models.device_insights.DeviceInsights(
                    scores = openapi_client.models.device_scores.DeviceScores(
                        device_risk_factor = 5, 
                        device_insight_factor = 2, 
                        device_trust_factor = 4, ), 
                    details = openapi_client.models.device_details.DeviceDetails(
                        id = openapi_client.models.device_id.DeviceID(
                            u_device_id = 'UDID-9284e12b85b0d2763c13d734c70b1d62', ), 
                        device_info = openapi_client.models.device_info.DeviceInfo(
                            browser = 'Safari', 
                            platform = 'iOS', 
                            device_type = 'iPhone', ), ), ),
                warnings = [
                    'Test warnings'
                    ],
                alerts = [
                    'Unable to generate IP and user insights'
                    ]
            )
        else:
            return AccountOwnerIdentityInsights(
        )
        """

    def testAccountOwnerIdentityInsights(self):
        """Test AccountOwnerIdentityInsights"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
