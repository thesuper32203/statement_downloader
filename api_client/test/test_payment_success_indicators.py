# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.payment_success_indicators import PaymentSuccessIndicators

class TestPaymentSuccessIndicators(unittest.TestCase):
    """PaymentSuccessIndicators unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaymentSuccessIndicators:
        """Test PaymentSuccessIndicators
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaymentSuccessIndicators`
        """
        model = PaymentSuccessIndicators()
        if include_optional:
            return PaymentSuccessIndicators(
                pay_request_id = '476412776235977427',
                status = 'IN PROGRESS',
                customer_id = '1005061234',
                account_id = '5011648377',
                request_date = 'Sun Mar 31 20:00:00 EDT 2024',
                transaction = openapi_client.models.payment_success_indicators_transaction.PaymentSuccessIndicatorsTransaction(
                    settle_by_date = 'Wed Mar 29 20:00:00 EDT 2023', 
                    amount = 12.45, ),
                nsf_return_risk = openapi_client.models.nsf_return_risk.NsfReturnRisk(
                    result = openapi_client.models.nsf_return_risk_result.NsfReturnRiskResult(
                        available_balance = 315.01, 
                        daily_results = [
                            openapi_client.models.nsf_indicator.NsfIndicator(
                                potential_settlement_date = 'Tue Apr 23 20:00:00 EDT 2024', 
                                score = 6, 
                                indicator = 'Low Risk', 
                                reasons = openapi_client.models.nsf_reason_item.NsfReasonItem(
                                    recent_balance = 78, 
                                    balance_history = 23, 
                                    nsf_history = 40, 
                                    recent_nsf_history = 34, 
                                    recurring_nsf = 34, 
                                    spend_history = 44, 
                                    deposit_history = 10, 
                                    transaction_amount = 65, ), )
                            ], ), 
                    error = openapi_client.models.error_message.ErrorMessage(
                        code = 10001, 
                        status = '401', 
                        title = 'Connecting accounts error', 
                        level = 'error', 
                        message = 'Invalid authorization credentials', 
                        user_message = 'The session has expired or is invalid', 
                        asset_id = '097545c5-1c2a-4f20-a5ef-77f0820344c9-2018601178', 
                        account_id = '5011648377', 
                        external_transaction_id = 'MAC1005061234', 
                        tags = 'AGG', ), ),
                unauthorized_return_risk = openapi_client.models.unauthorized_return_risk.UnauthorizedReturnRisk(
                    result = openapi_client.models.unauthorized_return_risk_result.UnauthorizedReturnRisk_result(
                        score = 89, 
                        indicator = 'Low Risk', ), 
                    error = openapi_client.models.error_message.ErrorMessage(
                        code = 10001, 
                        status = '401', 
                        title = 'Connecting accounts error', 
                        level = 'error', 
                        message = 'Invalid authorization credentials', 
                        user_message = 'The session has expired or is invalid', 
                        asset_id = '097545c5-1c2a-4f20-a5ef-77f0820344c9-2018601178', 
                        account_id = '5011648377', 
                        external_transaction_id = 'MAC1005061234', 
                        tags = 'AGG', ), )
            )
        else:
            return PaymentSuccessIndicators(
                pay_request_id = '476412776235977427',
                status = 'IN PROGRESS',
                customer_id = '1005061234',
                account_id = '5011648377',
                request_date = 'Sun Mar 31 20:00:00 EDT 2024',
                transaction = openapi_client.models.payment_success_indicators_transaction.PaymentSuccessIndicatorsTransaction(
                    settle_by_date = 'Wed Mar 29 20:00:00 EDT 2023', 
                    amount = 12.45, ),
        )
        """

    def testPaymentSuccessIndicators(self):
        """Test PaymentSuccessIndicators"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
