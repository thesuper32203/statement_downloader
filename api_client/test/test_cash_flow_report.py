# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cash_flow_report import CashFlowReport

class TestCashFlowReport(unittest.TestCase):
    """CashFlowReport unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CashFlowReport:
        """Test CashFlowReport
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CashFlowReport`
        """
        model = CashFlowReport()
        if include_optional:
            return CashFlowReport(
                id = 'u4hstnnak45g',
                customer_type = 'active',
                customer_id = 1005061234,
                request_id = 'cjqm4wtdcn',
                requester_name = 'Finicity Test API',
                end_user = openapi_client.models.consumer_end_user.ConsumerEndUser(
                    name = 'John', 
                    address = '434 W Ascension Way', 
                    city = 'Murray', 
                    state = 'UT', 
                    zip = '84123', 
                    phone = '1-801-984-4200', 
                    email = 'myname@mycompany.com', 
                    url = 'testurl.com', ),
                created_date = 1607450357,
                title = 'Finicity Asset Ready Report (CRA)',
                consumer_id = '0bf46322c167b562e6cbed9d40e19a4c',
                consumer_ssn = '9999',
                consumer_details = openapi_client.models.consumer_details.ConsumerDetails(
                    id = '0bf46322c167b562e6cbed9d40e19a4c', 
                    first_name = 'John', 
                    middle_name = 'L', 
                    last_name = 'Smith', 
                    address = '434 W Ascension Way', 
                    city = 'Murray', 
                    state = 'UT', 
                    zip = '84123', 
                    phone = '1-801-984-4200', 
                    ssn = '9999', 
                    email = 'myname@mycompany.com', ),
                dispute_statement = 'Statement dispute text',
                type = 'voi',
                status = 'inProgress',
                constraints = None,
                errors = [
                    openapi_client.models.error_message.ErrorMessage(
                        code = 10001, 
                        status = '401', 
                        title = 'Connecting accounts error', 
                        level = 'error', 
                        message = 'Invalid authorization credentials', 
                        user_message = 'The session has expired or is invalid', 
                        asset_id = '097545c5-1c2a-4f20-a5ef-77f0820344c9-2018601178', 
                        account_id = '5011648377', 
                        external_transaction_id = 'MAC1005061234', 
                        tags = 'AGG', )
                    ],
                portfolio_id = 'y4zsgccj4xpw-6-port',
                start_date = 1607450357,
                end_date = 1607450357,
                days = 730,
                seasoned = True,
                institutions = [
                    openapi_client.models.report_institution.ReportInstitution(
                        id = 4222, 
                        name = 'FinBank Profiles', 
                        url_home_app = 'http://www.finbank.com', 
                        accounts = [
                            openapi_client.models.report_institution_account.ReportInstitutionAccount()
                            ], )
                    ],
                cash_flow_balance_summary = openapi_client.models.cash_flow_cash_flow_balance_summary.CashFlowCashFlowBalanceSummary(
                    monthly_cash_flow_balance_summaries = [
                        openapi_client.models.cash_flow_monthly_cash_flow_balance_summaries.CashFlowMonthlyCashFlowBalanceSummaries(
                            month = 1512111600, 
                            min_daily_balance = 3479.39, 
                            max_daily_balance = 3479.39, 
                            average_daily_balance = 3479.39, 
                            standard_deviation_of_daily_balance = '20.45454545', 
                            number_of_days_negative_balance = '6', 
                            number_of_days_positive_balance = '0', )
                        ], 
                    min_daily_balance = 3479.39, 
                    max_daily_balance = 3479.39, 
                    twelve_month_average_daily_balance = 3479.39, 
                    six_month_average_daily_balance = 3479.39, 
                    two_month_average_daily_balance = 3479.39, 
                    twelve_month_standard_deviation_of_daily_balance = '20', 
                    six_month_standard_deviation_of_daily_balance = '20', 
                    two_month_standard_deviation_of_daily_balance = '20', 
                    number_of_days_negative_balance = '6', 
                    number_of_days_positive_balance = '11', ),
                cash_flow_credit_summary = openapi_client.models.cash_flow_cash_flow_credit_summary.CashFlowCashFlowCreditSummary(
                    monthly_cash_flow_credit_summaries = [
                        openapi_client.models.cash_flow_monthly_cash_flow_credit_summaries.CashFlowMonthlyCashFlowCreditSummaries(
                            month = 1512111600, 
                            number_of_credits = '57', 
                            total_credits_amount = 3479.39, 
                            largest_credit = 3000.49, 
                            number_of_credits_less_transfers = '5', 
                            total_credits_amount_less_transfers = 25.46, 
                            average_credit_amount = 500, 
                            estimated_number_of_loan_deposits = '0', 
                            estimated_loan_deposit_amount = 0, )
                        ], 
                    twelve_month_credit_total = 1200, 
                    twelve_month_credit_total_less_transfers = 1000, 
                    six_month_credit_total = 750, 
                    six_month_credit_total_less_transfers = 500, 
                    two_month_credit_total = 150, 
                    two_month_credit_total_less_transfers = 100, ),
                cash_flow_debit_summary = openapi_client.models.cash_flow_cash_flow_debit_summary.CashFlowCashFlowDebitSummary(
                    monthly_cash_flow_debit_summaries = [
                        openapi_client.models.cash_flow_monthly_cash_flow_debit_summaries.CashFlowMonthlyCashFlowDebitSummaries(
                            month = 1512111600, 
                            number_of_debits = '1500', 
                            total_debits_amount = -12345.46, 
                            largest_debit = -20000, 
                            number_of_debits_less_transfers = '5', 
                            total_debits_amount_less_transfers = -2000, 
                            average_debit_amount = 500, )
                        ], 
                    twelve_month_debit_total = -1200, 
                    twelve_month_debit_total_less_transfers = -1000, 
                    six_month_debit_total = -750, 
                    six_month_debit_total_less_transfers = -500, 
                    two_month_debit_total = -150, 
                    two_month_debit_total_less_transfers = -100, ),
                cash_flow_characteristics_summary = openapi_client.models.cash_flow_cash_flow_characteristics_summary.CashFlowCashFlowCharacteristicsSummary(
                    monthly_cash_flow_characteristics_summaries = [
                        openapi_client.models.cash_flow_monthly_cash_flow_characteristics_summaries.CashFlowMonthlyCashFlowCharacteristicsSummaries(
                            month = 1512111600, 
                            total_credits_less_total_debits = 15000, 
                            total_credits_less_total_debits_less_transfers = 11000, 
                            average_transaction_amount = 10, )
                        ], 
                    average_monthly_net = 1250, 
                    average_monthly_net_less_transfers = 1000, 
                    twelve_month_total_net = 12500, 
                    twelve_month_total_net_less_transfers = 12400, 
                    six_month_average_total_credits_less_total_debits = 55555, 
                    six_month_average_total_credits_less_total_debits_less_transfers = 55555, 
                    two_month_average_total_credits_less_total_debits = 55555, 
                    two_month_average_total_credits_less_total_debits_less_transfers = 55555, ),
                possible_loan_deposits = [
                    openapi_client.models.cash_flow_possible_loan_deposits.CashFlowPossibleLoanDeposits(
                        institutions = [
                            openapi_client.models.cash_flow_possible_loan_deposits_institutions.CashFlowPossibleLoanDepositsInstitutions(
                                id = '102105', 
                                name = 'FinBank Profiles', 
                                url_home_app = 'http://www.finbank.com', 
                                accounts = [
                                    openapi_client.models.cash_flow_possible_loan_deposits_account.CashFlowPossibleLoanDepositsAccount(
                                        id = '6681984', 
                                        owner_name = 'PATRICK PURCHASER|LORRAINE PURCHASER', 
                                        owner_address = '7195 BELMONT ST. PARLIN, NJ 08859', 
                                        owner_as_of_date = 1596175200, 
                                        name = 'Checking', 
                                        number = 'XX1111', 
                                        type = 'checking', 
                                        aggregation_status_code = 0, 
                                        current_balance = 100000, 
                                        available_balance = 1000, 
                                        balance_date = 1614880526, 
                                        transactions = [
                                            openapi_client.models.report_transaction.ReportTransaction()
                                            ], )
                                    ], )
                            ], )
                    ]
            )
        else:
            return CashFlowReport(
        )
        """

    def testCashFlowReport(self):
        """Test CashFlowReport"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
