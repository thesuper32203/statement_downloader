# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.balance_analytics_metrics import BalanceAnalyticsMetrics

class TestBalanceAnalyticsMetrics(unittest.TestCase):
    """BalanceAnalyticsMetrics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BalanceAnalyticsMetrics:
        """Test BalanceAnalyticsMetrics
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BalanceAnalyticsMetrics`
        """
        model = BalanceAnalyticsMetrics()
        if include_optional:
            return BalanceAnalyticsMetrics(
                available_balance = 1000.01,
                available_balance_date = '2022-02-18T02:34:00-07:00',
                average_daily_balance_by_month_for_the_report_time_period = [
                    openapi_client.models.obb_date_range_and_amount.ObbDateRangeAndAmount(
                        amount = 890.99, 
                        period = 'last30to1', 
                        period_begin_date = '2022-03-01', 
                        period_end_date = '2022-03-30', )
                    ],
                average_daily_balance_for_the_report_time_period = -10442.53,
                average_weekday_balance_for_the_report_time_period = -10442.53,
                count_daily_negative_balances_by_month_for_the_report_time_period = [
                    openapi_client.models.obb_date_range_and_count.ObbDateRangeAndCount(
                        count = 5, 
                        period = 'last30to1', 
                        period_begin_date = '2022-03-01', 
                        period_end_date = '2022-03-30', )
                    ],
                current_running_balance = 1000.01,
                current_running_balance_date = '2022-02-10T05:00:00-07:00',
                daily_balances_by_weekday_for_the_report_time_period = [{"date":"2022-03-23","dayOfWeek":"Monday","endingBalance":21527.3}],
                daily_balances_for_the_report_time_period = [{"date":"2022-03-22","dayOfWeek":"Sunday","endingBalance":21527.3}],
                historic_number_of_weeks_average_balance_increasing = openapi_client.models.obb_num_weeks_average_balance_increasing.ObbNumWeeksAverageBalanceIncreasing(
                    historic_average_weekly_balances = [
                        openapi_client.models.obb_average_weekly_balance.ObbAverageWeeklyBalance(
                            amount = 679.07, 
                            from_date = '2020-01-01', 
                            to_date = '2020-01-07', 
                            week = 1, )
                        ], 
                    historic_number_of_weeks_average_balance_increasing = 3, 
                    historic_number_of_weeks_with_data_available = 4, ),
                maximum_daily_balance_by_month_for_the_report_time_period = [
                    openapi_client.models.obb_date_range_and_amount.ObbDateRangeAndAmount(
                        amount = 890.99, 
                        period = 'last30to1', 
                        period_begin_date = '2022-03-01', 
                        period_end_date = '2022-03-30', )
                    ],
                maximum_running_balance_for_the_report_time_period = -28749.44,
                minimum_daily_balance_by_month_for_the_report_time_period = [
                    openapi_client.models.obb_date_range_and_amount.ObbDateRangeAndAmount(
                        amount = 890.99, 
                        period = 'last30to1', 
                        period_begin_date = '2022-03-01', 
                        period_end_date = '2022-03-30', )
                    ],
                minimum_running_balance_for_the_report_time_period = -28749.44
            )
        else:
            return BalanceAnalyticsMetrics(
        )
        """

    def testBalanceAnalyticsMetrics(self):
        """Test BalanceAnalyticsMetrics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
