# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.payroll_employment_history_voe import PayrollEmploymentHistoryVOE

class TestPayrollEmploymentHistoryVOE(unittest.TestCase):
    """PayrollEmploymentHistoryVOE unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PayrollEmploymentHistoryVOE:
        """Test PayrollEmploymentHistoryVOE
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PayrollEmploymentHistoryVOE`
        """
        model = PayrollEmploymentHistoryVOE()
        if include_optional:
            return PayrollEmploymentHistoryVOE(
                as_of_date = 1596175200,
                employer_name = 'ACME INC',
                payroll_source = 'finPayroll',
                payroll_provider = 'Paychex',
                employee = openapi_client.models.payroll_employee_record.PayrollEmployeeRecord(
                    name = 'John Doe Smith', 
                    given_name = 'John', 
                    middle_name = 'Doe', 
                    family_name = 'Smith', 
                    address = [
                        openapi_client.models.payroll_employee_address.PayrollEmployeeAddress(
                            address1 = 'Address 1', 
                            city = 'City', 
                            state = 'TX', 
                            zip = '99999', )
                        ], ),
                employment = openapi_client.models.payroll_employment_record.PayrollEmploymentRecord(
                    employer_name = 'ACME INC', 
                    legal_entity_id = '752760000', 
                    original_hire_date = 1527832800, 
                    latest_hire_date = 1527832800, 
                    latest_pay_period_end_date = 1596175201, 
                    latest_pay_date = 1596175200, 
                    days_since_last_pay = 10, 
                    number_pay_cadence_without_pay = 1, 
                    employment_end_date = 1527832800, 
                    employment_duration = 'P1Y6M0D', 
                    employer_address = [
                        openapi_client.models.payroll_employer_address.PayrollEmployerAddress(
                            address1 = 'Address 1', 
                            city = 'City', 
                            state = 'TX', 
                            zip = '99999', )
                        ], 
                    employment_status_code = 'A', 
                    employment_status_name = 'Active', 
                    derived_employment_status = True, 
                    work_level_code = 'FT', 
                    work_level_name = 'Full Time-Regular', 
                    work_level_status = 'Full Time', 
                    position_title = 'Shift Supervisor', 
                    position_duration = 'P1Y6M0D', ),
                income = openapi_client.models.payroll_voe_income_record.PayrollVOEIncomeRecord(
                    pay_frequency = 'Weekly', )
            )
        else:
            return PayrollEmploymentHistoryVOE(
                as_of_date = 1596175200,
                employer_name = 'ACME INC',
                payroll_source = 'finPayroll',
                employee = openapi_client.models.payroll_employee_record.PayrollEmployeeRecord(
                    name = 'John Doe Smith', 
                    given_name = 'John', 
                    middle_name = 'Doe', 
                    family_name = 'Smith', 
                    address = [
                        openapi_client.models.payroll_employee_address.PayrollEmployeeAddress(
                            address1 = 'Address 1', 
                            city = 'City', 
                            state = 'TX', 
                            zip = '99999', )
                        ], ),
                employment = openapi_client.models.payroll_employment_record.PayrollEmploymentRecord(
                    employer_name = 'ACME INC', 
                    legal_entity_id = '752760000', 
                    original_hire_date = 1527832800, 
                    latest_hire_date = 1527832800, 
                    latest_pay_period_end_date = 1596175201, 
                    latest_pay_date = 1596175200, 
                    days_since_last_pay = 10, 
                    number_pay_cadence_without_pay = 1, 
                    employment_end_date = 1527832800, 
                    employment_duration = 'P1Y6M0D', 
                    employer_address = [
                        openapi_client.models.payroll_employer_address.PayrollEmployerAddress(
                            address1 = 'Address 1', 
                            city = 'City', 
                            state = 'TX', 
                            zip = '99999', )
                        ], 
                    employment_status_code = 'A', 
                    employment_status_name = 'Active', 
                    derived_employment_status = True, 
                    work_level_code = 'FT', 
                    work_level_name = 'Full Time-Regular', 
                    work_level_status = 'Full Time', 
                    position_title = 'Shift Supervisor', 
                    position_duration = 'P1Y6M0D', ),
                income = openapi_client.models.payroll_voe_income_record.PayrollVOEIncomeRecord(
                    pay_frequency = 'Weekly', ),
        )
        """

    def testPayrollEmploymentHistoryVOE(self):
        """Test PayrollEmploymentHistoryVOE"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
