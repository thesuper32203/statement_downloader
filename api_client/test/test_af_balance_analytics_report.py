# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.af_balance_analytics_report import AFBalanceAnalyticsReport

class TestAFBalanceAnalyticsReport(unittest.TestCase):
    """AFBalanceAnalyticsReport unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AFBalanceAnalyticsReport:
        """Test AFBalanceAnalyticsReport
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AFBalanceAnalyticsReport`
        """
        model = AFBalanceAnalyticsReport()
        if include_optional:
            return AFBalanceAnalyticsReport(
                id = 'u4hstnnak45g',
                customer_type = 'active',
                customer_id = 1005061234,
                request_id = 'cjqm4wtdcn',
                requester_name = 'Finicity Test API',
                end_user = openapi_client.models.consumer_end_user.ConsumerEndUser(
                    name = 'John', 
                    address = '434 W Ascension Way', 
                    city = 'Murray', 
                    state = 'UT', 
                    zip = '84123', 
                    phone = '1-801-984-4200', 
                    email = 'myname@mycompany.com', 
                    url = 'testurl.com', ),
                created_date = 1607450357,
                title = 'Finicity Asset Ready Report (CRA)',
                consumer_id = '0bf46322c167b562e6cbed9d40e19a4c',
                consumer_ssn = '9999',
                consumer_details = openapi_client.models.consumer_details.ConsumerDetails(
                    id = '0bf46322c167b562e6cbed9d40e19a4c', 
                    first_name = 'John', 
                    middle_name = 'L', 
                    last_name = 'Smith', 
                    address = '434 W Ascension Way', 
                    city = 'Murray', 
                    state = 'UT', 
                    zip = '84123', 
                    phone = '1-801-984-4200', 
                    ssn = '9999', 
                    email = 'myname@mycompany.com', ),
                dispute_statement = 'Statement dispute text',
                type = 'voi',
                status = 'inProgress',
                constraints = None,
                errors = [
                    openapi_client.models.error_message.ErrorMessage(
                        code = 10001, 
                        status = '401', 
                        title = 'Connecting accounts error', 
                        level = 'error', 
                        message = 'Invalid authorization credentials', 
                        user_message = 'The session has expired or is invalid', 
                        asset_id = '097545c5-1c2a-4f20-a5ef-77f0820344c9-2018601178', 
                        account_id = '5011648377', 
                        external_transaction_id = 'MAC1005061234', 
                        tags = 'AGG', )
                    ],
                business_details = None,
                report_pin = '2398jk',
                start_date = 1607450357,
                end_date = 1607450357,
                days = 730,
                seasoned = True,
                institutions = [
                    openapi_client.models.report_institution.ReportInstitution(
                        id = 4222, 
                        name = 'FinBank Profiles', 
                        url_home_app = 'http://www.finbank.com', 
                        accounts = [
                            openapi_client.models.report_institution_account.ReportInstitutionAccount()
                            ], )
                    ],
                customer_analytics = openapi_client.models.customer_analytics.CustomerAnalytics(
                    transactional_attributes = [
                        openapi_client.models.transactional_attribute.TransactionalAttribute(
                            aggregated_by_time_periods = [
                                openapi_client.models.transactional_time_interval.TransactionalTimeInterval(
                                    periods = [
                                        openapi_client.models.transactional_period.TransactionalPeriod(
                                            count = 2, 
                                            end_date = 'Sat Dec 31 19:00:00 EST 2022', 
                                            max = 60.21, 
                                            mean = 42.22, 
                                            median = 42.22, 
                                            min = 30.22, 
                                            standard_deviation = 14.995, 
                                            start_date = 'Wed Nov 30 19:00:00 EST 2022', 
                                            sum = 90.43, )
                                        ], 
                                    time_interval_type = 'MONTHLY_CALENDAR', )
                                ], 
                            attribute_name = 'INFLOW_TRANSACTIONS', 
                            stream_ids = ["1","2"], 
                            transaction_ids = ["6010290887","6010290914"], )
                        ], 
                    state_attributes = [
                        openapi_client.models.state_attribute.StateAttribute(
                            attribute_name = 'NET_CASH_FLOW', 
                            reported_by_time_periods = [
                                openapi_client.models.state_time_interval.StateTimeInterval(
                                    periods = [
                                        openapi_client.models.state_period.StatePeriod(
                                            beginning_value = 60.21, 
                                            count = 2, 
                                            end_date = 'Sat Dec 31 19:00:00 EST 2022', 
                                            ending_value = 60.21, 
                                            max = 60.21, 
                                            mean = 42.22, 
                                            median = 42.22, 
                                            min = 30.22, 
                                            standard_deviation = 14.995, 
                                            start_date = 'Wed Nov 30 19:00:00 EST 2022', 
                                            sum = 90.43, )
                                        ], 
                                    time_interval_type = 'MONTHLY_CALENDAR', )
                                ], )
                        ], 
                    streams = [
                        openapi_client.models.stream_model.StreamModel(
                            cadence = 30, 
                            id = '1', 
                            payee = 'Walmart', 
                            payor = 'Elizabeth Johnson', 
                            recency = 2, 
                            transaction_ids = ["6010290887","6010290914"], )
                        ], )
            )
        else:
            return AFBalanceAnalyticsReport(
                id = 'u4hstnnak45g',
                customer_type = 'active',
                customer_id = 1005061234,
                request_id = 'cjqm4wtdcn',
                requester_name = 'Finicity Test API',
                created_date = 1607450357,
                title = 'Finicity Asset Ready Report (CRA)',
                type = 'voi',
                status = 'inProgress',
                constraints = None,
        )
        """

    def testAFBalanceAnalyticsReport(self):
        """Test AFBalanceAnalyticsReport"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
