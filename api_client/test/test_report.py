# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report import Report

class TestReport(unittest.TestCase):
    """Report unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Report:
        """Test Report
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Report`
        """
        model = Report()
        if include_optional:
            return Report(
                id = 'u4hstnnak45g',
                customer_type = 'active',
                customer_id = 1005061234,
                request_id = 'cjqm4wtdcn',
                requester_name = 'Finicity Test API',
                end_user = openapi_client.models.consumer_end_user.ConsumerEndUser(
                    name = 'John', 
                    address = '434 W Ascension Way', 
                    city = 'Murray', 
                    state = 'UT', 
                    zip = '84123', 
                    phone = '1-801-984-4200', 
                    email = 'myname@mycompany.com', 
                    url = 'testurl.com', ),
                created_date = 1607450357,
                title = 'Finicity Asset Ready Report (CRA)',
                consumer_id = '0bf46322c167b562e6cbed9d40e19a4c',
                consumer_ssn = '9999',
                consumer_details = openapi_client.models.consumer_details.ConsumerDetails(
                    id = '0bf46322c167b562e6cbed9d40e19a4c', 
                    first_name = 'John', 
                    middle_name = 'L', 
                    last_name = 'Smith', 
                    address = '434 W Ascension Way', 
                    city = 'Murray', 
                    state = 'UT', 
                    zip = '84123', 
                    phone = '1-801-984-4200', 
                    ssn = '9999', 
                    email = 'myname@mycompany.com', ),
                dispute_statement = 'Statement dispute text',
                type = 'voi',
                status = 'inProgress',
                constraints = None,
                errors = [
                    openapi_client.models.error_message.ErrorMessage(
                        code = 10001, 
                        status = '401', 
                        title = 'Connecting accounts error', 
                        level = 'error', 
                        message = 'Invalid authorization credentials', 
                        user_message = 'The session has expired or is invalid', 
                        asset_id = '097545c5-1c2a-4f20-a5ef-77f0820344c9-2018601178', 
                        account_id = '5011648377', 
                        external_transaction_id = 'MAC1005061234', 
                        tags = 'AGG', )
                    ],
                business_details = None,
                report_pin = '2398jk',
                start_date = 1607450357,
                end_date = 1607450357,
                days = 200,
                seasoned = True,
                institutions = [
                    openapi_client.models.report_institution.ReportInstitution(
                        id = 4222, 
                        name = 'FinBank Profiles', 
                        url_home_app = 'http://www.finbank.com', 
                        accounts = [
                            openapi_client.models.report_institution_account.ReportInstitutionAccount()
                            ], )
                    ],
                customer_analytics = openapi_client.models.customer_analytics.CustomerAnalytics(
                    transactional_attributes = [
                        openapi_client.models.transactional_attribute.TransactionalAttribute(
                            aggregated_by_time_periods = [
                                openapi_client.models.transactional_time_interval.TransactionalTimeInterval(
                                    periods = [
                                        openapi_client.models.transactional_period.TransactionalPeriod(
                                            count = 2, 
                                            end_date = 'Sat Dec 31 19:00:00 EST 2022', 
                                            max = 60.21, 
                                            mean = 42.22, 
                                            median = 42.22, 
                                            min = 30.22, 
                                            standard_deviation = 14.995, 
                                            start_date = 'Wed Nov 30 19:00:00 EST 2022', 
                                            sum = 90.43, )
                                        ], 
                                    time_interval_type = 'MONTHLY_CALENDAR', )
                                ], 
                            attribute_name = 'INFLOW_TRANSACTIONS', 
                            stream_ids = ["1","2"], 
                            transaction_ids = ["6010290887","6010290914"], )
                        ], 
                    state_attributes = [
                        openapi_client.models.state_attribute.StateAttribute(
                            attribute_name = 'NET_CASH_FLOW', 
                            reported_by_time_periods = [
                                openapi_client.models.state_time_interval.StateTimeInterval(
                                    periods = [
                                        openapi_client.models.state_period.StatePeriod(
                                            beginning_value = 60.21, 
                                            count = 2, 
                                            end_date = 'Sat Dec 31 19:00:00 EST 2022', 
                                            ending_value = 60.21, 
                                            max = 60.21, 
                                            mean = 42.22, 
                                            median = 42.22, 
                                            min = 30.22, 
                                            standard_deviation = 14.995, 
                                            start_date = 'Wed Nov 30 19:00:00 EST 2022', 
                                            sum = 90.43, )
                                        ], 
                                    time_interval_type = 'MONTHLY_CALENDAR', )
                                ], )
                        ], 
                    streams = [
                        openapi_client.models.stream_model.StreamModel(
                            cadence = 30, 
                            id = '1', 
                            payee = 'Walmart', 
                            payor = 'Elizabeth Johnson', 
                            recency = 2, 
                            transaction_ids = ["6010290887","6010290914"], )
                        ], ),
                portfolio_id = 'y4zsgccj4xpw-6-port',
                cash_flow_balance_summary = openapi_client.models.cash_flow_cash_flow_balance_summary.CashFlowCashFlowBalanceSummary(
                    monthly_cash_flow_balance_summaries = [
                        openapi_client.models.cash_flow_monthly_cash_flow_balance_summaries.CashFlowMonthlyCashFlowBalanceSummaries(
                            month = 1512111600, 
                            min_daily_balance = 3479.39, 
                            max_daily_balance = 3479.39, 
                            average_daily_balance = 3479.39, 
                            standard_deviation_of_daily_balance = '20.45454545', 
                            number_of_days_negative_balance = '6', 
                            number_of_days_positive_balance = '0', )
                        ], 
                    min_daily_balance = 3479.39, 
                    max_daily_balance = 3479.39, 
                    twelve_month_average_daily_balance = 3479.39, 
                    six_month_average_daily_balance = 3479.39, 
                    two_month_average_daily_balance = 3479.39, 
                    twelve_month_standard_deviation_of_daily_balance = '20', 
                    six_month_standard_deviation_of_daily_balance = '20', 
                    two_month_standard_deviation_of_daily_balance = '20', 
                    number_of_days_negative_balance = '6', 
                    number_of_days_positive_balance = '11', ),
                cash_flow_credit_summary = openapi_client.models.cash_flow_cash_flow_credit_summary.CashFlowCashFlowCreditSummary(
                    monthly_cash_flow_credit_summaries = [
                        openapi_client.models.cash_flow_monthly_cash_flow_credit_summaries.CashFlowMonthlyCashFlowCreditSummaries(
                            month = 1512111600, 
                            number_of_credits = '57', 
                            total_credits_amount = 3479.39, 
                            largest_credit = 3000.49, 
                            number_of_credits_less_transfers = '5', 
                            total_credits_amount_less_transfers = 25.46, 
                            average_credit_amount = 500, 
                            estimated_number_of_loan_deposits = '0', 
                            estimated_loan_deposit_amount = 0, )
                        ], 
                    twelve_month_credit_total = 1200, 
                    twelve_month_credit_total_less_transfers = 1000, 
                    six_month_credit_total = 750, 
                    six_month_credit_total_less_transfers = 500, 
                    two_month_credit_total = 150, 
                    two_month_credit_total_less_transfers = 100, ),
                cash_flow_debit_summary = openapi_client.models.cash_flow_cash_flow_debit_summary.CashFlowCashFlowDebitSummary(
                    monthly_cash_flow_debit_summaries = [
                        openapi_client.models.cash_flow_monthly_cash_flow_debit_summaries.CashFlowMonthlyCashFlowDebitSummaries(
                            month = 1512111600, 
                            number_of_debits = '1500', 
                            total_debits_amount = -12345.46, 
                            largest_debit = -20000, 
                            number_of_debits_less_transfers = '5', 
                            total_debits_amount_less_transfers = -2000, 
                            average_debit_amount = 500, )
                        ], 
                    twelve_month_debit_total = -1200, 
                    twelve_month_debit_total_less_transfers = -1000, 
                    six_month_debit_total = -750, 
                    six_month_debit_total_less_transfers = -500, 
                    two_month_debit_total = -150, 
                    two_month_debit_total_less_transfers = -100, ),
                cash_flow_characteristics_summary = openapi_client.models.cash_flow_cash_flow_characteristics_summary.CashFlowCashFlowCharacteristicsSummary(
                    monthly_cash_flow_characteristics_summaries = [
                        openapi_client.models.cash_flow_monthly_cash_flow_characteristics_summaries.CashFlowMonthlyCashFlowCharacteristicsSummaries(
                            month = 1512111600, 
                            total_credits_less_total_debits = 15000, 
                            total_credits_less_total_debits_less_transfers = 11000, 
                            average_transaction_amount = 10, )
                        ], 
                    average_monthly_net = 1250, 
                    average_monthly_net_less_transfers = 1000, 
                    twelve_month_total_net = 12500, 
                    twelve_month_total_net_less_transfers = 12400, 
                    six_month_average_total_credits_less_total_debits = 55555, 
                    six_month_average_total_credits_less_total_debits_less_transfers = 55555, 
                    two_month_average_total_credits_less_total_debits = 55555, 
                    two_month_average_total_credits_less_total_debits_less_transfers = 55555, ),
                possible_loan_deposits = [
                    openapi_client.models.cash_flow_possible_loan_deposits.CashFlowPossibleLoanDeposits(
                        institutions = [
                            openapi_client.models.cash_flow_possible_loan_deposits_institutions.CashFlowPossibleLoanDepositsInstitutions(
                                id = '102105', 
                                name = 'FinBank Profiles', 
                                url_home_app = 'http://www.finbank.com', 
                                accounts = [
                                    openapi_client.models.cash_flow_possible_loan_deposits_account.CashFlowPossibleLoanDepositsAccount(
                                        id = '6681984', 
                                        owner_name = 'PATRICK PURCHASER|LORRAINE PURCHASER', 
                                        owner_address = '7195 BELMONT ST. PARLIN, NJ 08859', 
                                        owner_as_of_date = 1596175200, 
                                        name = 'Checking', 
                                        number = 'XX1111', 
                                        type = 'checking', 
                                        aggregation_status_code = 0, 
                                        current_balance = 100000, 
                                        available_balance = 1000, 
                                        balance_date = 1614880526, 
                                        transactions = [
                                            openapi_client.models.report_transaction.ReportTransaction()
                                            ], )
                                    ], )
                            ], )
                    ],
                consolidated_available_balance = 1929.57,
                assets = openapi_client.models.prequalification_report_asset_summary.PrequalificationReportAssetSummary(
                    type = 'checking', 
                    available_balance = 1000, 
                    current_balance = 1000, 
                    two_month_average = -1865.96, 
                    six_month_average = -7616.01, 
                    beginning_balance = -17795.6, ),
                report_style = 'credentialedPayroll',
                number_of_billable_assets = 1,
                asset_ids = [
                    '097545c5-1c2a-4f20-a5ef-77f0820344c9-2018601178'
                    ],
                pay_statements = [
                    openapi_client.models.voie_paystub_with_statement_pay_statement.VOIEPaystubWithStatementPayStatement()
                    ],
                asset_id = '097545c5-1c2a-4f20-a5ef-77f0820344c9-2018601178',
                employment_history = [
                    openapi_client.models.payroll_employment_history_voie.PayrollEmploymentHistoryVOIE(
                        as_of_date = 1596175200, 
                        employment_id = '123v3bv2s5n', 
                        employer_name = 'ACME INC', 
                        payroll_source = 'finPayroll', 
                        payroll_provider = 'Paychex', 
                        employee = openapi_client.models.payroll_employee_record.PayrollEmployeeRecord(
                            name = 'John Doe Smith', 
                            given_name = 'John', 
                            middle_name = 'Doe', 
                            family_name = 'Smith', 
                            address = [
                                openapi_client.models.payroll_employee_address.PayrollEmployeeAddress(
                                    address1 = 'Address 1', 
                                    city = 'City', 
                                    state = 'TX', 
                                    zip = '99999', )
                                ], ), 
                        employment = openapi_client.models.payroll_employment_record.PayrollEmploymentRecord(
                            employer_name = 'ACME INC', 
                            legal_entity_id = '752760000', 
                            original_hire_date = 1527832800, 
                            latest_hire_date = 1527832800, 
                            latest_pay_period_end_date = 1596175201, 
                            latest_pay_date = 1596175200, 
                            days_since_last_pay = 10, 
                            number_pay_cadence_without_pay = 1, 
                            employment_end_date = 1527832800, 
                            employment_duration = 'P1Y6M0D', 
                            employer_address = [
                                openapi_client.models.payroll_employer_address.PayrollEmployerAddress(
                                    address1 = 'Address 1', 
                                    city = 'City', 
                                    state = 'TX', 
                                    zip = '99999', )
                                ], 
                            employment_status_code = 'A', 
                            employment_status_name = 'Active', 
                            derived_employment_status = True, 
                            work_level_code = 'FT', 
                            work_level_name = 'Full Time-Regular', 
                            work_level_status = 'Full Time', 
                            position_title = 'Shift Supervisor', 
                            position_duration = 'P1Y6M0D', ), 
                        income = openapi_client.models.payroll_voie_income_record.PayrollVOIEIncomeRecord(
                            pay_frequency = 'Weekly', 
                            pay_type = 'Daily', 
                            base_pay_rate = 1234.56, 
                            base_pay_rate_unit = 'Annual', 
                            oldest_pay_statement_available = '1527832900', 
                            annual_income = [
                                openapi_client.models.annual_income.AnnualIncome(
                                    year = '2022', 
                                    gross_pay_amount_ytd = 123.45, 
                                    net_pay_amount_ytd = 123.45, 
                                    base_pay_amount_ytd = 123.45, 
                                    overtime_pay_amount_ytd = 123.45, 
                                    other_pay_amount_ytd = 123.45, 
                                    commission_pay_amount_ytd = 123.45, )
                                ], 
                            monthly_income = openapi_client.models.monthly_income.MonthlyIncome(
                                estimated_monthly_base_pay = 123.45, 
                                estimated_monthly_overtime_pay = 123.45, 
                                estimated_monthly_bonus_pay = 123.45, 
                                estimated_monthly_other_pay = 123.45, 
                                estimated_monthly_total_pay = 123.45, 
                                estimated_monthly_commission_pay = 123.45, ), 
                            direct_pay_statements = [
                                openapi_client.models.direct_pay_statements.DirectPayStatements(
                                    payroll_pay_history_id = 'qsrt2hmjnf', 
                                    last_pay_period_indicator = True, 
                                    main_pay_statement_fields = openapi_client.models.main_pay_statement_fields.MainPayStatementFields(
                                        pay_date = 1607450357, 
                                        start_date = 1607450357, 
                                        end_date = 1607450357, 
                                        pay_period_hours = 39.75, 
                                        pay_frequency = 'Weekly', 
                                        pay_type = 'Hourly', 
                                        gross_pay_amount = 755.25, 
                                        gross_pay_amount_ytd = 4256, 
                                        net_pay_amount = 608.77, 
                                        net_pay_amount_ytd = 2345.99, ), 
                                    earnings = [
                                        openapi_client.models.earnings.Earnings(
                                            name = 'bonusPayAmount', 
                                            type = 'bonus', 
                                            rate = 19, 
                                            amount = 589, 
                                            amount_ytd = 14301.25, )
                                        ], 
                                    deductions = [
                                        openapi_client.models.deductions.Deductions(
                                            type = 'State tax', 
                                            amount = 4.28, )
                                        ], )
                                ], ), )
                    ],
                gse_enabled = True,
                income = [
                    openapi_client.models.report_income_stream_summary.ReportIncomeStreamSummary(
                        confidence_type = 'HIGH', 
                        net_monthly = [
                            openapi_client.models.net_monthly.NetMonthly(
                                month = 1522562400, 
                                net = 2004.77, )
                            ], 
                        income_estimate = openapi_client.models.report_income_estimate.ReportIncomeEstimate(
                            net_annual = 1000.12, 
                            projected_net_annual = 1500.23, 
                            estimated_gross_annual = 2000.12, 
                            projected_gross_annual = 2500.23, ), )
                    ]
            )
        else:
            return Report(
                id = 'u4hstnnak45g',
                customer_type = 'active',
                customer_id = 1005061234,
                request_id = 'cjqm4wtdcn',
                requester_name = 'Finicity Test API',
                created_date = 1607450357,
                title = 'Finicity Asset Ready Report (CRA)',
                type = 'voi',
                status = 'inProgress',
                constraints = None,
        )
        """

    def testReport(self):
        """Test Report"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
