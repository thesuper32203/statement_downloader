# coding: utf-8

"""
    Open Finance

    OpenAPI specification for Finicity APIs.  Open Finance (formerly Open Banking) solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.31.2
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report_institution_account import ReportInstitutionAccount

class TestReportInstitutionAccount(unittest.TestCase):
    """ReportInstitutionAccount unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReportInstitutionAccount:
        """Test ReportInstitutionAccount
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReportInstitutionAccount`
        """
        model = ReportInstitutionAccount()
        if include_optional:
            return ReportInstitutionAccount(
                id = 1000023996,
                owner_name = 'PATRICK PURCHASER|LORRAINE PURCHASER',
                owner_address = '7195 BELMONT ST. PARLIN, NJ 08859',
                owner_as_of_date = 1596175200,
                name = 'Checking',
                number = '1111',
                type = 'checking',
                currency = 'USD',
                aggregation_status_code = 0,
                current_balance = 714.16,
                available_balance = 123.45,
                balance_date = 1588350276,
                transactions = [
                    openapi_client.models.report_transaction_new_tx_based.ReportTransactionNewTxBased()
                    ],
                details = openapi_client.models.account_details_tx_based.AccountDetailsTxBased(),
                analytics = openapi_client.models.account_analytics.AccountAnalytics(
                    transactional_attributes = [
                        openapi_client.models.transactional_attribute.TransactionalAttribute(
                            aggregated_by_time_periods = [
                                openapi_client.models.transactional_time_interval.TransactionalTimeInterval(
                                    periods = [
                                        openapi_client.models.transactional_period.TransactionalPeriod(
                                            count = 2, 
                                            end_date = 'Sat Dec 31 19:00:00 EST 2022', 
                                            max = 60.21, 
                                            mean = 42.22, 
                                            median = 42.22, 
                                            min = 30.22, 
                                            standard_deviation = 14.995, 
                                            start_date = 'Wed Nov 30 19:00:00 EST 2022', 
                                            sum = 90.43, )
                                        ], 
                                    time_interval_type = 'MONTHLY_CALENDAR', )
                                ], 
                            attribute_name = 'INFLOW_TRANSACTIONS', 
                            stream_ids = ["1","2"], 
                            transaction_ids = ["6010290887","6010290914"], )
                        ], 
                    state_attributes = [
                        openapi_client.models.state_attribute.StateAttribute(
                            attribute_name = 'NET_CASH_FLOW', 
                            reported_by_time_periods = [
                                openapi_client.models.state_time_interval.StateTimeInterval(
                                    periods = [
                                        openapi_client.models.state_period.StatePeriod(
                                            beginning_value = 60.21, 
                                            count = 2, 
                                            end_date = 'Sat Dec 31 19:00:00 EST 2022', 
                                            ending_value = 60.21, 
                                            max = 60.21, 
                                            mean = 42.22, 
                                            median = 42.22, 
                                            min = 30.22, 
                                            standard_deviation = 14.995, 
                                            start_date = 'Wed Nov 30 19:00:00 EST 2022', 
                                            sum = 90.43, )
                                        ], 
                                    time_interval_type = 'MONTHLY_CALENDAR', )
                                ], )
                        ], 
                    streams = [
                        openapi_client.models.stream_model.StreamModel(
                            cadence = 30, 
                            id = '1', 
                            payee = 'Walmart', 
                            payor = 'Elizabeth Johnson', 
                            recency = 2, 
                            transaction_ids = ["6010290887","6010290914"], )
                        ], ),
                cash_flow_balance = openapi_client.models.cash_flow_cash_flow_balance.CashFlowCashFlowBalance(
                    monthly_cash_flow_balances = [
                        openapi_client.models.cash_flow_monthly_cash_flow_balances.CashFlowMonthlyCashFlowBalances(
                            month = 1512111600, 
                            min_daily_balance = 3479.39, 
                            max_daily_balance = 3479.39, 
                            average_daily_balance = 3479.39, 
                            standard_deviation_of_daily_balance = '20', 
                            number_of_days_negative_balance = '6', 
                            number_of_days_positive_balance = '0', )
                        ], 
                    min_daily_balance = 3479.39, 
                    max_daily_balance = 3479.39, 
                    twelve_month_average_daily_balance = 3479.39, 
                    six_month_average_daily_balance = 3479.39, 
                    two_month_average_daily_balance = 3479.39, 
                    twelve_month_standard_deviation_of_daily_balance = '20', 
                    six_month_standard_deviation_of_daily_balance = '20', 
                    two_month_standard_deviation_of_daily_balance = '20', 
                    number_days_negative_balance = '6', 
                    number_of_days_positive_balance = '0', ),
                cash_flow_credit = openapi_client.models.cash_flow_cash_flow_credit.CashFlowCashFlowCredit(
                    monthly_cash_flow_credits = [
                        openapi_client.models.cash_flow_monthly_cash_flow_credits.CashFlowMonthlyCashFlowCredits(
                            month = 1512111600, 
                            number_of_credits = '3', 
                            total_credits_amount = 5000, 
                            largest_credit = 2000, 
                            number_of_credits_less_transfers = '2', 
                            total_credits_amount_less_transfers = 4000, 
                            average_credit_amount = 500, 
                            estimated_number_of_loan_deposits = '0', 
                            estimated_loan_deposit_amount = 0, )
                        ], 
                    twelve_month_credit_total = 1200, 
                    twelve_month_credit_total_less_transfers = 1000, 
                    six_month_credit_total = 750, 
                    six_month_credit_total_less_transfers = 500, 
                    two_month_credit_total = 150, 
                    two_month_credit_total_less_transfers = 100, ),
                cash_flow_debit = openapi_client.models.cash_flow_cash_flow_debit.CashFlowCashFlowDebit(
                    monthly_cash_flow_debits = [
                        openapi_client.models.cash_flow_monthlycashflow_debits.CashFlowMonthlycashflowDebits(
                            month = 1512111600, 
                            number_of_debits = '5', 
                            total_debits_amount = -12345, 
                            largest_debit = -2000, 
                            number_of_debits_less_transfers = '3', 
                            total_debits_amount_less_transfers = -2000, 
                            average_debit_amount = 500, )
                        ], 
                    twelve_month_debit_total = 1200, 
                    twelve_month_debit_total_less_transfers = 1000, 
                    six_month_debit_total = 750, 
                    six_month_debit_total_less_transfers = 500, 
                    two_month_debit_total = 150, 
                    two_month_debit_total_less_transfers = 100, ),
                cash_flow_characteristic = openapi_client.models.cash_flow_cash_flow_characteristic.CashFlowCashFlowCharacteristic(
                    monthly_cash_flow_characteristics = [
                        openapi_client.models.cash_flow_monthly_cash_flow_characteristics.CashFlowMonthlyCashFlowCharacteristics(
                            month = 1512111600, 
                            total_credits_less_total_debits = 15000, 
                            total_credits_less_total_debits_less_transfers = 11000, 
                            average_transaction_amount = 10, )
                        ], 
                    average_monthly_net = 2350, 
                    average_monthly_net_less_transfers = 1000, 
                    twelve_month_total_net = 12500, 
                    twelve_month_total_net_less_transfers = 12400, 
                    six_month_average_total_credits_less_total_debits = 55555, 
                    six_month_average_total_credits_less_total_debits_less_transfers = 55555, 
                    two_month_average_total_credits_less_total_debits = 55555, 
                    two_month_average_total_credits_less_total_debits_less_transfers = 55555, ),
                balance = 123.45,
                average_monthly_balance = 301.45,
                tot_number_insufficient_funds_fee_debit_tx_account = 0,
                tot_number_insufficient_funds_fee_debit_tx_over6_months_account = 0,
                tot_number_days_since_most_recent_insufficient_funds_fee_debit_tx_account = 120,
                asset = openapi_client.models.prequalification_report_asset_summary.PrequalificationReportAssetSummary(
                    type = 'checking', 
                    available_balance = 1000, 
                    current_balance = 1000, 
                    two_month_average = -1865.96, 
                    six_month_average = -7616.01, 
                    beginning_balance = -17795.6, ),
                oldest_transaction_date = 1588350276,
                transactions_count = 3,
                tot_number_insufficient_funds_fee_debit_tx_over2_months_account = 0,
                position = openapi_client.models.report_account_position.ReportAccountPosition(
                    id = 637054, 
                    currency = 'USD', 
                    symbol = 'MCD', 
                    security_name = 'Common Stock', 
                    units = 5, 
                    market_value = 1403.55, 
                    current_price = 280.71, 
                    security_type = 1.337, ),
                income_streams = [
                    openapi_client.models.voietx_verify_report_income_stream.VOIETXVerifyReportIncomeStream(
                        id = 'dens28i3vsch-voietxverify', 
                        name = 'none', 
                        status = 'ACTIVE', 
                        confidence = 70, 
                        cadence = openapi_client.models.cadence_details.CadenceDetails(
                            start_date = 1577986990, 
                            stop_date = 1587986990, 
                            days = 14, ), 
                        net_monthly = [
                            openapi_client.models.net_monthly.NetMonthly(
                                month = 1522562400, 
                                net = 2004.77, )
                            ], 
                        net_annual = 110475.7, 
                        projected_net_annual = 0, 
                        estimated_gross_annual = 12321.1, 
                        projected_gross_annual = 151609, 
                        average_monthly_income_net = 9206.31, 
                        income_stream_months = 24, 
                        transactions = [
                            openapi_client.models.report_transaction.ReportTransaction()
                            ], )
                    ],
                beginning_balance = 714.77,
                misc_deposits = [
                    openapi_client.models.report_transaction.ReportTransaction()
                    ]
            )
        else:
            return ReportInstitutionAccount(
                id = 1000023996,
                name = 'Checking',
                number = '1111',
                type = 'checking',
                currency = 'USD',
                aggregation_status_code = 0,
                transactions = [
                    openapi_client.models.report_transaction_new_tx_based.ReportTransactionNewTxBased()
                    ],
        )
        """

    def testReportInstitutionAccount(self):
        """Test ReportInstitutionAccount"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
